UEsDBAoAAAAAANuCOlgz+EDabwAAAG8AAAAzAAAAL3ZpZXcvQURNSU5JU1RSQUJMRV9ST0xFX0FVVEhPUklaQVRJT05TLmRTLWg2dy5tZXRhI246QURNSU5JU1RSQUJMRV9ST0xFX0FVVEhPUklaQVRJT05TCiE8bWQ+IFtudWxsLCAtMTM2NzE0OTkzMywgWzQ5LCA0OSwgODYzLCA4NjMsIDg2Nl0sIFtfLCBELCBRLCBELCA7XSwgMCwgMF0KUEsDBAoAAAAAANuCOlgmgp7hYgMAAGIDAAAyAAAAL3ZpZXcvQURNSU5JU1RSQUJMRV9ST0xFX0FVVEhPUklaQVRJT05TLmRTLWg2dy5zcWxjcmVhdGUgdmlldyBBRE1JTklTVFJBQkxFX1JPTEVfQVVUSE9SSVpBVElPTlMgYXMKc2VsZWN0IGBpbmZvcm1hdGlvbl9zY2hlbWFgLmBBUFBMSUNBQkxFX1JPTEVTYC5gVVNFUmAgICAgICAgICBBUyBgVVNFUmAsCiAgICAgICBgaW5mb3JtYXRpb25fc2NoZW1hYC5gQVBQTElDQUJMRV9ST0xFU2AuYEhPU1RgICAgICAgICAgQVMgYEhPU1RgLAogICAgICAgYGluZm9ybWF0aW9uX3NjaGVtYWAuYEFQUExJQ0FCTEVfUk9MRVNgLmBHUkFOVEVFYCAgICAgIEFTIGBHUkFOVEVFYCwKICAgICAgIGBpbmZvcm1hdGlvbl9zY2hlbWFgLmBBUFBMSUNBQkxFX1JPTEVTYC5gR1JBTlRFRV9IT1NUYCBBUyBgR1JBTlRFRV9IT1NUYCwKICAgICAgIGBpbmZvcm1hdGlvbl9zY2hlbWFgLmBBUFBMSUNBQkxFX1JPTEVTYC5gUk9MRV9OQU1FYCAgICBBUyBgUk9MRV9OQU1FYCwKICAgICAgIGBpbmZvcm1hdGlvbl9zY2hlbWFgLmBBUFBMSUNBQkxFX1JPTEVTYC5gUk9MRV9IT1NUYCAgICBBUyBgUk9MRV9IT1NUYCwKICAgICAgIGBpbmZvcm1hdGlvbl9zY2hlbWFgLmBBUFBMSUNBQkxFX1JPTEVTYC5gSVNfR1JBTlRBQkxFYCBBUyBgSVNfR1JBTlRBQkxFYCwKICAgICAgIGBpbmZvcm1hdGlvbl9zY2hlbWFgLmBBUFBMSUNBQkxFX1JPTEVTYC5gSVNfREVGQVVMVGAgICBBUyBgSVNfREVGQVVMVGAsCiAgICAgICBgaW5mb3JtYXRpb25fc2NoZW1hYC5gQVBQTElDQUJMRV9ST0xFU2AuYElTX01BTkRBVE9SWWAgQVMgYElTX01BTkRBVE9SWWAKZnJvbSBgaW5mb3JtYXRpb25fc2NoZW1hYC5gQVBQTElDQUJMRV9ST0xFU2AKd2hlcmUgKGBpbmZvcm1hdGlvbl9zY2hlbWFgLmBBUFBMSUNBQkxFX1JPTEVTYC5gSVNfR1JBTlRBQkxFYCA9ICdZRVMnKTsKClBLAwQKAAAAAADbgjpY58Oxc2EAAABhAAAAIgAAAC92aWV3L0FQUExJQ0FCTEVfUk9MRVMuX1FWSjZBLm1ldGEjbjpBUFBMSUNBQkxFX1JPTEVTCiE8bWQ+IFtudWxsLCAtMTg5NzAyOTk2MSwgWzMyLCAzMiwgODcyNiwgODcyNiwgODcyOV0sIFtfLCBELCBRLCBELCA7XSwgMCwgMF0KUEsDBAoAAAAAANuCOlgo+lKBGSIAABkiAAAhAAAAL3ZpZXcvQVBQTElDQUJMRV9ST0xFUy5fUVZKNkEuc3FsY3JlYXRlIHZpZXcgQVBQTElDQUJMRV9ST0xFUyBhcwp3aXRoIHJlY3Vyc2l2ZSBgcm9sZV9ncmFwaGAgKGBjX3BhcmVudF91c2VyYCwgYGNfcGFyZW50X2hvc3RgLCBgY19mcm9tX3VzZXJgLCBgY19mcm9tX2hvc3RgLCBgY190b191c2VyYCwgYGNfdG9faG9zdGAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYHJvbGVfcGF0aGAsIGBjX3dpdGhfYWRtaW5gLCBgY19lbmFibGVkYCkKICAgICAgICAgICAgICAgICAgIGFzIChzZWxlY3QgaW50ZXJuYWxfZ2V0X3VzZXJuYW1lKCkgICAgICAgICAgICAgICAgICAgICAgICBBUyBgSU5URVJOQUxfR0VUX1VTRVJOQU1FKClgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbF9nZXRfaG9zdG5hbWUoKSAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBJTlRFUk5BTF9HRVRfSE9TVE5BTUUoKWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVybmFsX2dldF91c2VybmFtZSgpICAgICAgICAgICAgICAgICAgICAgICAgQVMgYElOVEVSTkFMX0dFVF9VU0VSTkFNRSgpYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxfZ2V0X2hvc3RuYW1lKCkgICAgICAgICAgICAgICAgICAgICAgICBBUyBgSU5URVJOQUxfR0VUX0hPU1ROQU1FKClgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXN0KCcnIGFzIGNoYXIoNjQpIGNoYXJzZXQgdXRmOG1iNCkgICAgICAgICAgIEFTIGBDQVNUKCcnIGFzIENIQVIoNjQpIENIQVJTRVQgdXRmOG1iNClgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXN0KCcnIGFzIGNoYXIoMjU1KSBjaGFyc2V0IHV0ZjhtYjQpICAgICAgICAgIEFTIGBDQVNUKCcnIGFzIENIQVIoMjU1KSBDSEFSU0VUIHV0ZjhtYjQpYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzdChzaGEyKGNvbmNhdChxdW90ZShpbnRlcm5hbF9nZXRfdXNlcm5hbWUoKSksICdAJywgcXVvdGUoaW50ZXJuYWxfZ2V0X2hvc3RuYW1lKCkpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDI1NikgYXMgY2hhcigxNzAwMCkgY2hhcnNldCB1dGY4bWI0KSBBUyBgQ0FTVChTSEEyKENPTkNBVChRVU9URShJTlRFUk5BTF9HRVRfVVNFUk5BTUUoKSksJ0AnLCAgICAgICAgICAgICAgICAgICAgICAgIFFVT1RFKElOVEVSTkFMX0dFVF9IT1NUTkFNRSgpKSksIDI1NikgICAgICAgICAgICBBUyBDSEFSKDE3MDAwKSBDSEFSU0VUIHV0ZjhtYjQpYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzdCgnTicgYXMgY2hhcigxKSBjaGFyc2V0IHV0ZjhtYjQpICAgICAgICAgICBBUyBgQ0FTVCgnTicgYXMgQ0hBUigxKSBDSEFSU0VUIHV0ZjhtYjQpYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgRkFMU0VgCiAgICAgICAgICAgICAgICAgICAgICAgdW5pb24KICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3QgaW50ZXJuYWxfZ2V0X3VzZXJuYW1lKCkgICAgICAgICAgICAgICAgICAgICAgICBBUyBgSU5URVJOQUxfR0VUX1VTRVJOQU1FKClgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbF9nZXRfaG9zdG5hbWUoKSAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBJTlRFUk5BTF9HRVRfSE9TVE5BTUUoKWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBtYW5kYXRvcnlfcm9sZXNgLmBST0xFX05BTUVgICAgICAgICAgICAgICAgICAgQVMgYFJPTEVfTkFNRWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBtYW5kYXRvcnlfcm9sZXNgLmBST0xFX0hPU1RgICAgICAgICAgICAgICAgICAgQVMgYFJPTEVfSE9TVGAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVybmFsX2dldF91c2VybmFtZSgpICAgICAgICAgICAgICAgICAgICAgICAgQVMgYElOVEVSTkFMX0dFVF9VU0VSTkFNRSgpYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxfZ2V0X2hvc3RuYW1lKCkgICAgICAgICAgICAgICAgICAgICAgICBBUyBgSU5URVJOQUxfR0VUX0hPU1ROQU1FKClgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXN0KHNoYTIoY29uY2F0KHF1b3RlKGBtYW5kYXRvcnlfcm9sZXNgLmBST0xFX05BTUVgKSwgJ0AnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnQocXVvdGUoYG1hbmRhdG9yeV9yb2xlc2AuYFJPTEVfSE9TVGApIHVzaW5nIHV0ZjhtYjQpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDI1NikgYXMgY2hhcigxNzAwMCkgY2hhcnNldCB1dGY4bWI0KSBBUyBgQ0FTVChTSEEyKENPTkNBVChRVU9URShST0xFX05BTUUpLCdAJywgICAgICAgICAgICAgICAgICAgQ09OVkVSVChRVU9URShST0xFX0hPU1QpIHVzaW5nIHV0ZjhtYjQpKSwgMjU2KSAgICAgICAgICAgICAgQVMgQ0hBUigxNzAwMCkgQ0hBUlNFVCB1dGY4bWI0KWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc3QoJ04nIGFzIGNoYXIoMSkgY2hhcnNldCB1dGY4bWI0KSAgICAgICAgICAgQVMgYENBU1QoJ04nIGFzIENIQVIoMSkgQ0hBUlNFVCB1dGY4bWI0KWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYEZBTFNFYAogICAgICAgICAgICAgICAgICAgICAgIGZyb20ganNvbl90YWJsZShpbnRlcm5hbF9nZXRfbWFuZGF0b3J5X3JvbGVzX2pzb24oKSwgJyRbKl0nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbnMgKGBST0xFX05BTUVgIHZhcmNoYXIoMjU1KSBjaGFyYWN0ZXIgc2V0IHV0ZjhtYjQgcGF0aCAnJC5ST0xFX05BTUUnLCBgUk9MRV9IT1NUYCB2YXJjaGFyKDI1NSkgY2hhcmFjdGVyIHNldCB1dGY4bWI0IHBhdGggJyQuUk9MRV9IT1NUJykpIGBtYW5kYXRvcnlfcm9sZXNgCiAgICAgICAgICAgICAgICAgICAgICAgd2hlcmUgY29uY2F0KHF1b3RlKGBtYW5kYXRvcnlfcm9sZXNgLmBST0xFX05BTUVgKSwgJ0AnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJ0KHF1b3RlKGBtYW5kYXRvcnlfcm9sZXNgLmBST0xFX0hPU1RgKSB1c2luZyB1dGY4bWI0KSkgaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoc2VsZWN0IGNvbmNhdChjb252ZXJ0KHF1b3RlKGBteXNxbGAuYHJvbGVfZWRnZXNgLmBGUk9NX1VTRVJgKSB1c2luZyB1dGY4bWI0KSwgJ0AnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnQocXVvdGUoYG15c3FsYC5gcm9sZV9lZGdlc2AuYEZST01fSE9TVGApIHVzaW5nIHV0ZjhtYjQpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tIGBteXNxbGAuYHJvbGVfZWRnZXNgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZXJlICgoYG15c3FsYC5gcm9sZV9lZGdlc2AuYFRPX1VTRVJgID0gaW50ZXJuYWxfZ2V0X3VzZXJuYW1lKCkpIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNvbnZlcnQoYG15c3FsYC5gcm9sZV9lZGdlc2AuYFRPX0hPU1RgIHVzaW5nIHV0ZjhtYjQpID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJ0KGludGVybmFsX2dldF9ob3N0bmFtZSgpIHVzaW5nIHV0ZjhtYjQpKSkpIGlzIGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgdW5pb24KICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3QgYHJvbGVfZ3JhcGhgLmBjX3BhcmVudF91c2VyYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgY19wYXJlbnRfdXNlcmAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGByb2xlX2dyYXBoYC5gY19wYXJlbnRfaG9zdGAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYGNfcGFyZW50X2hvc3RgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgbXlzcWxgLmByb2xlX2VkZ2VzYC5gRlJPTV9VU0VSYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBGUk9NX1VTRVJgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgbXlzcWxgLmByb2xlX2VkZ2VzYC5gRlJPTV9IT1NUYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBGUk9NX0hPU1RgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgbXlzcWxgLmByb2xlX2VkZ2VzYC5gVE9fVVNFUmAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBUT19VU0VSYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYG15c3FsYC5gcm9sZV9lZGdlc2AuYFRPX0hPU1RgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgVE9fSE9TVGAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKChsb2NhdGUoc2hhMihjb25jYXQoY29udmVydChxdW90ZShgbXlzcWxgLmByb2xlX2VkZ2VzYC5gRlJPTV9VU0VSYCkgdXNpbmcgdXRmOG1iNCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0AnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnQocXVvdGUoYG15c3FsYC5gcm9sZV9lZGdlc2AuYEZST01fSE9TVGApIHVzaW5nIHV0ZjhtYjQpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDI1NiksIGByb2xlX2dyYXBoYC5gcm9sZV9wYXRoYCkgPSAwKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uY2F0KGByb2xlX2dyYXBoYC5gcm9sZV9wYXRoYCwgJy0+JywgY29udmVydChzaGEyKGNvbmNhdCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udmVydChxdW90ZShgbXlzcWxgLmByb2xlX2VkZ2VzYC5gRlJPTV9VU0VSYCkgdXNpbmcgdXRmOG1iNCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdAJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udmVydChxdW90ZShgbXlzcWxgLmByb2xlX2VkZ2VzYC5gRlJPTV9IT1NUYCkgdXNpbmcgdXRmOG1iNCkpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMjU2KSB1c2luZyB1dGY4bWI0KSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5VTEwpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYElGKExPQ0FURShTSEEyKENPTkNBVChRVU9URShGUk9NX1VTRVIpLCdAJywgICAgICAgICAgICAgICAgICAgICAgQ09OVkVSVChRVU9URShGUk9NX0hPU1QpIHVzaW5nIHV0ZjhtYjQpKSwgMjU2KSwgICAgICAgICAgICAgICAgIHJvbGVfcGF0aCkgPSAwLCAgICAgICAgICBDT05DQVQocm9sZV9wYXRoLCctPicsIFNIQTIoQ09OQ0FUKFFVT1RFKEZST01fVVNFUiksJ0AnLCAgICAgICAgICAgQ09OVkVSVChRVU9URShGUk9NX0hPU1QpIHVzaW5nIHV0ZjhgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgbXlzcWxgLmByb2xlX2VkZ2VzYC5gV0lUSF9BRE1JTl9PUFRJT05gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBXSVRIX0FETUlOX09QVElPTmAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCgoMCA8PiBgcm9sZV9ncmFwaGAuYGNfZW5hYmxlZGApIG9yICgwIDw+IGludGVybmFsX2lzX2VuYWJsZWRfcm9sZSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgbXlzcWxgLmByb2xlX2VkZ2VzYC5gRlJPTV9VU0VSYCwgYG15c3FsYC5gcm9sZV9lZGdlc2AuYEZST01fSE9TVGApKSksIHRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhbHNlKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYElGKGNfZW5hYmxlZCBPUiAgICAgICAgSU5URVJOQUxfSVNfRU5BQkxFRF9ST0xFKEZST01fVVNFUiwgRlJPTV9IT1NUKSwgVFJVRSwgRkFMU0UpYAogICAgICAgICAgICAgICAgICAgICAgIGZyb20gKGBteXNxbGAuYHJvbGVfZWRnZXNgIGpvaW4gYHJvbGVfZ3JhcGhgKQogICAgICAgICAgICAgICAgICAgICAgIHdoZXJlICgoYG15c3FsYC5gcm9sZV9lZGdlc2AuYFRPX1VTRVJgID0gYHJvbGVfZ3JhcGhgLmBjX2Zyb21fdXNlcmApIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY29udmVydChgbXlzcWxgLmByb2xlX2VkZ2VzYC5gVE9fSE9TVGAgdXNpbmcgdXRmOG1iNCkgPSBgcm9sZV9ncmFwaGAuYGNfZnJvbV9ob3N0YCkgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChgcm9sZV9ncmFwaGAuYHJvbGVfcGF0aGAgaXMgbm90IG51bGwpKSkKc2VsZWN0IGRpc3RpbmN0IGByb2xlX2dyYXBoYC5gY19wYXJlbnRfdXNlcmAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgVVNFUmAsCiAgICAgICAgICAgICAgICBgcm9sZV9ncmFwaGAuYGNfcGFyZW50X2hvc3RgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYEhPU1RgLAogICAgICAgICAgICAgICAgYHJvbGVfZ3JhcGhgLmBjX3RvX3VzZXJgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBHUkFOVEVFYCwKICAgICAgICAgICAgICAgIGByb2xlX2dyYXBoYC5gY190b19ob3N0YCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgR1JBTlRFRV9IT1NUYCwKICAgICAgICAgICAgICAgIGByb2xlX2dyYXBoYC5gY19mcm9tX3VzZXJgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgUk9MRV9OQU1FYCwKICAgICAgICAgICAgICAgIGByb2xlX2dyYXBoYC5gY19mcm9tX2hvc3RgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgUk9MRV9IT1NUYCwKICAgICAgICAgICAgICAgIGlmKChgcm9sZV9ncmFwaGAuYGNfd2l0aF9hZG1pbmAgPSAnTicpLCAnTk8nLCAnWUVTJykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgSVNfR1JBTlRBQkxFYCwKICAgICAgICAgICAgICAgIChzZWxlY3QgaWYoY291bnQoMCksICdZRVMnLCAnTk8nKQogICAgICAgICAgICAgICAgIGZyb20gYG15c3FsYC5gZGVmYXVsdF9yb2xlc2AKICAgICAgICAgICAgICAgICB3aGVyZSAoKGBteXNxbGAuYGRlZmF1bHRfcm9sZXNgLmBERUZBVUxUX1JPTEVfVVNFUmAgPSBgcm9sZV9ncmFwaGAuYGNfZnJvbV91c2VyYCkgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIChjb252ZXJ0KGBteXNxbGAuYGRlZmF1bHRfcm9sZXNgLmBERUZBVUxUX1JPTEVfSE9TVGAgdXNpbmcgdXRmOG1iNCkgPQogICAgICAgICAgICAgICAgICAgICAgICAgYHJvbGVfZ3JhcGhgLmBjX2Zyb21faG9zdGApIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAoYG15c3FsYC5gZGVmYXVsdF9yb2xlc2AuYFVTRVJgID0gYHJvbGVfZ3JhcGhgLmBjX3BhcmVudF91c2VyYCkgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIChjb252ZXJ0KGBteXNxbGAuYGRlZmF1bHRfcm9sZXNgLmBIT1NUYCB1c2luZyB1dGY4bWI0KSA9CiAgICAgICAgICAgICAgICAgICAgICAgICBgcm9sZV9ncmFwaGAuYGNfcGFyZW50X2hvc3RgKSkpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYElTX0RFRkFVTFRgLAogICAgICAgICAgICAgICAgaWYoaW50ZXJuYWxfaXNfbWFuZGF0b3J5X3JvbGUoYHJvbGVfZ3JhcGhgLmBjX2Zyb21fdXNlcmAsIGByb2xlX2dyYXBoYC5gY19mcm9tX2hvc3RgKSwgJ1lFUycsCiAg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ZSB2aWV3IENPTExBVElPTlMgYXMKc2VsZWN0IGBjb2xgLmBuYW1lYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYENPTExBVElPTl9OQU1FYCwKICAgICAgIGBjc2AuYG5hbWVgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYENIQVJBQ1RFUl9TRVRfTkFNRWAsCiAgICAgICBgY29sYC5gaWRgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBJRGAsCiAgICAgICBpZihleGlzdHMoc2VsZWN0IDEKICAgICAgICAgICAgICAgICBmcm9tIGBteXNxbGAuYGNoYXJhY3Rlcl9zZXRzYAogICAgICAgICAgICAgICAgIHdoZXJlIChgbXlzcWxgLmBjaGFyYWN0ZXJfc2V0c2AuYGRlZmF1bHRfY29sbGF0aW9uX2lkYCA9IGBjb2xgLmBpZGApKSwgJ1llcycsICcnKSBBUyBgSVNfREVGQVVMVGAsCiAgICAgICBpZihgY29sYC5gaXNfY29tcGlsZWRgLCAnWWVzJywgJycpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBJU19DT01QSUxFRGAsCiAgICAgICBgY29sYC5gc29ydF9sZW5ndGhgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBTT1JUTEVOYCwKICAgICAgIGBjb2xgLmBwYWRfYXR0cmlidXRlYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYFBBRF9BVFRSSUJVVEVgCmZyb20gKGBteXNxbGAuYGNvbGxhdGlvbnNgIGBjb2xgIGpvaW4gYG15c3FsYC5gY2hhcmFjdGVyX3NldHNgIGBjc2Agb24gKChgY29sYC5gY2hhcmFjdGVyX3NldF9pZGAgPSBgY3NgLmBpZGApKSk7CgpQSwMECgAAAAAA24I6WO+lFkxzAAAAcwAAADcAAAAvdmlldy9DT0xMQVRJT05fQ0hBUkFDVEVSX1NFVF9BUFBMSUNBQklMSVRZLjNFc0tVZy5tZXRhI246Q09MTEFUSU9OX0NIQVJBQ1RFUl9TRVRfQVBQTElDQUJJTElUWQohPG1kPiBbbnVsbCwgLTEwMzYyNzI5NzQsIFs1MywgNTMsIDI0MiwgMjQyLCAyNDVdLCBbXywgRCwgUSwgRCwgO10sIDAsIDBdClBLAwQKAAAAAADbgjpY0YZjBPUAAAD1AAAANgAAAC92aWV3L0NPTExBVElPTl9DSEFSQUNURVJfU0VUX0FQUExJQ0FCSUxJVFkuM0VzS1VnLnNxbGNyZWF0ZSB2aWV3IENPTExBVElPTl9DSEFSQUNURVJfU0VUX0FQUExJQ0FCSUxJVFkgYXMKc2VsZWN0IGBjb2xgLmBuYW1lYCBBUyBgQ09MTEFUSU9OX05BTUVgLCBgY3NgLmBuYW1lYCBBUyBgQ0hBUkFDVEVSX1NFVF9OQU1FYApmcm9tIChgbXlzcWxgLmBjaGFyYWN0ZXJfc2V0c2AgYGNzYCBqb2luIGBteXNxbGAuYGNvbGxhdGlvbnNgIGBjb2xgIG9uICgoYGNzYC5gaWRgID0gYGNvbGAuYGNoYXJhY3Rlcl9zZXRfaWRgKSkpOwoKUEsDBAoAAAAAANyCOlgZQ9tQWAAAAFgAAAAZAAAAL3ZpZXcvQ09MVU1OUy52U05uWXcubWV0YSNuOkNPTFVNTlMKITxtZD4gW251bGwsIC0xNzk0MTM4MTcxLCBbMjMsIDIzLCA1ODg0LCA1ODg0LCA1ODg3XSwgW18sIEQsIFEsIEQsIDtdLCAwLCAwXQpQSwMECgAAAAAA3II6WAZzSrn/FgAA/xYAABgAAAAvdmlldy9DT0xVTU5TLnZTTm5Zdy5zcWxjcmVhdGUgdmlldyBDT0xVTU5TIGFzCnNlbGVjdCBgY2F0YC5gbmFtZWAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgVEFCTEVfQ0FUQUxPR2AsCiAgICAgICBgc2NoYC5gbmFtZWAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgVEFCTEVfU0NIRU1BYCwKICAgICAgIGB0YmxgLmBuYW1lYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBUQUJMRV9OQU1FYCwKICAgICAgIChgY29sYC5gbmFtZWAgY29sbGF0ZSB1dGY4bWIzX3RvbG93ZXJfY2kpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBDT0xVTU5fTkFNRWAsCiAgICAgICBgY29sYC5gb3JkaW5hbF9wb3NpdGlvbmAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgT1JESU5BTF9QT1NJVElPTmAsCiAgICAgICBgY29sYC5gZGVmYXVsdF92YWx1ZV91dGY4YCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgQ09MVU1OX0RFRkFVTFRgLAogICAgICAgaWYoKGBjb2xgLmBpc19udWxsYWJsZWAgPSAxKSwgJ1lFUycsICdOTycpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYElTX05VTExBQkxFYCwKICAgICAgIHN1YnN0cmluZ19pbmRleChzdWJzdHJpbmdfaW5kZXgoYGNvbGAuYGNvbHVtbl90eXBlX3V0ZjhgLCAnKCcsIDEpLCAnICcsCiAgICAgICAgICAgICAgICAgICAgICAgMSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgREFUQV9UWVBFYCwKICAgICAgIGludGVybmFsX2RkX2NoYXJfbGVuZ3RoKGBjb2xgLmB0eXBlYCwgYGNvbGAuYGNoYXJfbGVuZ3RoYCwgYGNvbGxgLmBuYW1lYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDApICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBDSEFSQUNURVJfTUFYSU1VTV9MRU5HVEhgLAogICAgICAgaW50ZXJuYWxfZGRfY2hhcl9sZW5ndGgoYGNvbGAuYHR5cGVgLCBgY29sYC5gY2hhcl9sZW5ndGhgLCBgY29sbGAuYG5hbWVgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYENIQVJBQ1RFUl9PQ1RFVF9MRU5HVEhgLAogICAgICAgaWYoKGBjb2xgLmBudW1lcmljX3ByZWNpc2lvbmAgPSAwKSwgTlVMTCwgYGNvbGAuYG51bWVyaWNfcHJlY2lzaW9uYCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYE5VTUVSSUNfUFJFQ0lTSU9OYCwKICAgICAgIGlmKCgoYGNvbGAuYG51bWVyaWNfc2NhbGVgID0gMCkgYW5kIChgY29sYC5gbnVtZXJpY19wcmVjaXNpb25gID0gMCkpLCBOVUxMLAogICAgICAgICAgYGNvbGAuYG51bWVyaWNfc2NhbGVgKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYE5VTUVSSUNfU0NBTEVgLAogICAgICAgYGNvbGAuYGRhdGV0aW1lX3ByZWNpc2lvbmAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYERBVEVUSU1FX1BSRUNJU0lPTmAsCiAgICAgICAoY2FzZSBgY29sYC5gdHlwZWAKICAgICAgICAgICAgd2hlbiAnTVlTUUxfVFlQRV9TVFJJTkcnIHRoZW4gaWYoKGBjc2AuYG5hbWVgID0gJ2JpbmFyeScpLCBOVUxMLCBgY3NgLmBuYW1lYCkKICAgICAgICAgICAgd2hlbiAnTVlTUUxfVFlQRV9WQVJfU1RSSU5HJyB0aGVuIGlmKChgY3NgLmBuYW1lYCA9ICdiaW5hcnknKSwgTlVMTCwgYGNzYC5gbmFtZWApCiAgICAgICAgICAgIHdoZW4gJ01ZU1FMX1RZUEVfVkFSQ0hBUicgdGhlbiBpZigoYGNzYC5gbmFtZWAgPSAnYmluYXJ5JyksIE5VTEwsIGBjc2AuYG5hbWVgKQogICAgICAgICAgICB3aGVuICdNWVNRTF9UWVBFX1RJTllfQkxPQicgdGhlbiBpZigoYGNzYC5gbmFtZWAgPSAnYmluYXJ5JyksIE5VTEwsIGBjc2AuYG5hbWVgKQogICAgICAgICAgICB3aGVuICdNWVNRTF9UWVBFX01FRElVTV9CTE9CJyB0aGVuIGlmKChgY3NgLmBuYW1lYCA9ICdiaW5hcnknKSwgTlVMTCwgYGNzYC5gbmFtZWApCiAgICAgICAgICAgIHdoZW4gJ01ZU1FMX1RZUEVfQkxPQicgdGhlbiBpZigoYGNzYC5gbmFtZWAgPSAnYmluYXJ5JyksIE5VTEwsIGBjc2AuYG5hbWVgKQogICAgICAgICAgICB3aGVuICdNWVNRTF9UWVBFX0xPTkdfQkxPQicgdGhlbiBpZigoYGNzYC5gbmFtZWAgPSAnYmluYXJ5JyksIE5VTEwsIGBjc2AuYG5hbWVgKQogICAgICAgICAgICB3aGVuICdNWVNRTF9UWVBFX0VOVU0nIHRoZW4gaWYoKGBjc2AuYG5hbWVgID0gJ2JpbmFyeScpLCBOVUxMLCBgY3NgLmBuYW1lYCkKICAgICAgICAgICAgd2hlbiAnTVlTUUxfVFlQRV9TRVQnIHRoZW4gaWYoKGBjc2AuYG5hbWVgID0gJ2JpbmFyeScpLCBOVUxMLCBgY3NgLmBuYW1lYCkKICAgICAgICAgICAgZWxzZSBOVUxMIGVuZCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBDSEFSQUNURVJfU0VUX05BTUVgLAogICAgICAgKGNhc2UgYGNvbGAuYHR5cGVgCiAgICAgICAgICAgIHdoZW4gJ01ZU1FMX1RZUEVfU1RSSU5HJyB0aGVuIGlmKChgY3NgLmBuYW1lYCA9ICdiaW5hcnknKSwgTlVMTCwgYGNvbGxgLmBuYW1lYCkKICAgICAgICAgICAgd2hlbiAnTVlTUUxfVFlQRV9WQVJfU1RSSU5HJyB0aGVuIGlmKChgY3NgLmBuYW1lYCA9ICdiaW5hcnknKSwgTlVMTCwgYGNvbGxgLmBuYW1lYCkKICAgICAgICAgICAgd2hlbiAnTVlTUUxfVFlQRV9WQVJDSEFSJyB0aGVuIGlmKChgY3NgLmBuYW1lYCA9ICdiaW5hcnknKSwgTlVMTCwgYGNvbGxgLmBuYW1lYCkKICAgICAgICAgICAgd2hlbiAnTVlTUUxfVFlQRV9USU5ZX0JMT0InIHRoZW4gaWYoKGBjc2AuYG5hbWVgID0gJ2JpbmFyeScpLCBOVUxMLCBgY29sbGAuYG5hbWVgKQogICAgICAgICAgICB3aGVuICdNWVNRTF9UWVBFX01FRElVTV9CTE9CJyB0aGVuIGlmKChgY3NgLmBuYW1lYCA9ICdiaW5hcnknKSwgTlVMTCwgYGNvbGxgLmBuYW1lYCkKICAgICAgICAgICAgd2hlbiAnTVlTUUxfVFlQRV9CTE9CJyB0aGVuIGlmKChgY3NgLmBuYW1lYCA9ICdiaW5hcnknKSwgTlVMTCwgYGNvbGxgLmBuYW1lYCkKICAgICAgICAgICAgd2hlbiAnTVlTUUxfVFlQRV9MT05HX0JMT0InIHRoZW4gaWYoKGBjc2AuYG5hbWVgID0gJ2JpbmFyeScpLCBOVUxMLCBgY29sbGAuYG5hbWVgKQogICAgICAgICAgICB3aGVuICdNWVNRTF9UWVBFX0VOVU0nIHRoZW4gaWYoKGBjc2AuYG5hbWVgID0gJ2JpbmFyeScpLCBOVUxMLCBgY29sbGAuYG5hbWVgKQogICAgICAgICAgICB3aGVuICdNWVNRTF9UWVBFX1NFVCcgdGhlbiBpZigoYGNzYC5gbmFtZWAgPSAnYmluYXJ5JyksIE5VTEwsIGBjb2xsYC5gbmFtZWApCiAgICAgICAgICAgIGVsc2UgTlVMTCBlbmQpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgQ09MTEFUSU9OX05BTUVgLAogICAgICAgYGNvbGAuYGNvbHVtbl90eXBlX3V0ZjhgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYENPTFVNTl9UWVBFYCwKICAgICAgIGBjb2xgLmBjb2x1bW5fa2V5YCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBDT0xVTU5fS0VZYCwKICAgICAgIGludGVybmFsX2dldF9kZF9jb2x1bW5fZXh0cmEoKGBjb2xgLmBnZW5lcmF0aW9uX2V4cHJlc3Npb25fdXRmOGAgaXMgbnVsbCksIGBjb2xgLmBpc192aXJ0dWFsYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYGNvbGAuYGlzX2F1dG9faW5jcmVtZW50YCwgYGNvbGAuYHVwZGF0ZV9vcHRpb25gLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihsZW5ndGgoYGNvbGAuYGRlZmF1bHRfb3B0aW9uYCksIHRydWUsIGZhbHNlKSwgYGNvbGAuYG9wdGlvbnNgLCBgY29sYC5gaGlkZGVuYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYHRibGAuYHR5cGVgKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBFWFRSQWAsCiAgICAgICBnZXRfZGRfY29sdW1uX3ByaXZpbGVnZXMoYHNjaGAuYG5hbWVgLCBgdGJsYC5gbmFtZWAsIGBjb2xgLmBuYW1lYCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgUFJJVklMRUdFU2AsCiAgICAgICBpZm51bGwoYGNvbGAuYGNvbW1lbnRgLCAnJykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgQ09MVU1OX0NPTU1FTlRgLAogICAgICAgaWZudWxsKGBjb2xgLmBnZW5lcmF0aW9uX2V4cHJlc3Npb25fdXRmOGAsICcnKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYEdFTkVSQVRJT05fRVhQUkVTU0lPTmAsCiAgICAgICBgY29sYC5gc3JzX2lkYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgU1JTX0lEYApmcm9tICgoKCgoYG15c3FsYC5gY29sdW1uc2AgYGNvbGAgam9pbiBgbXlzcWxgLmB0YWJsZXNgIGB0YmxgCiAgICAgICAgICBvbiAoKGBjb2xgLmB0YWJsZV9pZGAgPSBgdGJsYC5gaWRgKSkpIGpvaW4gYG15c3FsYC5gc2NoZW1hdGFgIGBzY2hgCiAgICAgICAgIG9uICgoYHRibGAuYHNjaGVtYV9pZGAgPSBgc2NoYC5gaWRgKSkpIGpvaW4gYG15c3FsYC5gY2F0YWxvZ3NgIGBjYXRgCiAgICAgICAgb24gKChgY2F0YC5gaWRgID0gYHNjaGAuYGNhdGFsb2dfaWRgKSkpIGpvaW4gYG15c3FsYC5gY29sbGF0aW9uc2AgYGNvbGxgCiAgICAg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IDQ0NCwgNDQ0LCA0NDddLCBbXywgRCwgUSwgRCwgO10sIDAsIDBdClBLAwQKAAAAAADcgjpYdpb4Rb8BAAC/AQAAIgAAAC92aWV3L0NPTFVNTl9TVEFUSVNUSUNTLnJGbnUwUS5zcWxjcmVhdGUgdmlldyBDT0xVTU5fU1RBVElTVElDUyBhcwpzZWxlY3QgYG15c3FsYC5gY29sdW1uX3N0YXRpc3RpY3NgLmBzY2hlbWFfbmFtZWAgQVMgYFNDSEVNQV9OQU1FYCwKICAgICAgIGBteXNxbGAuYGNvbHVtbl9zdGF0aXN0aWNzYC5gdGFibGVfbmFtZWAgIEFTIGBUQUJMRV9OQU1FYCwKICAgICAgIGBteXNxbGAuYGNvbHVtbl9zdGF0aXN0aWNzYC5gY29sdW1uX25hbWVgIEFTIGBDT0xVTU5fTkFNRWAsCiAgICAgICBgbXlzcWxgLmBjb2x1bW5fc3RhdGlzdGljc2AuYGhpc3RvZ3JhbWAgICBBUyBgSElTVE9HUkFNYApmcm9tIGBteXNxbGAuYGNvbHVtbl9zdGF0aXN0aWNzYAp3aGVyZSAoMCA8PiBjYW5fYWNjZXNzX3RhYmxlKGBteXNxbGAuYGNvbHVtbl9zdGF0aXN0aWNzYC5gc2NoZW1hX25hbWVgLCBgbXlzcWxgLmBjb2x1bW5fc3RhdGlzdGljc2AuYHRhYmxlX25hbWVgKSk7CgpQSwMECgAAAAAA3II6WLo62TheAAAAXgAAAB8AAAAvdmlldy9FTkFCTEVEX1JPTEVTLl8zTmdJZy5tZXRhI246RU5BQkxFRF9ST0xFUwohPG1kPiBbbnVsbCwgLTEzNDkwMzA1NzMsIFsyOSwgMjksIDEyNzUsIDEyNzUsIDEyNzhdLCBbXywgRCwgUSwgRCwgO10sIDAsIDBdClBLAwQKAAAAAADcgjpYHKDPpf4EAAD+BAAAHgAAAC92aWV3L0VOQUJMRURfUk9MRVMuXzNOZ0lnLnNxbGNyZWF0ZSB2aWV3IEVOQUJMRURfUk9MRVMgYXMKc2VsZWN0IGBjdXJyZW50X3VzZXJfZW5hYmxlZF9yb2xlc2AuYFJPTEVfTkFNRWAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYFJPTEVfTkFNRWAsCiAgICAgICBgY3VycmVudF91c2VyX2VuYWJsZWRfcm9sZXNgLmBST0xFX0hPU1RgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBST0xFX0hPU1RgLAogICAgICAgKHNlbGVjdCBpZihjb3VudCgwKSwgJ1lFUycsICdOTycpCiAgICAgICAgZnJvbSBgbXlzcWxgLmBkZWZhdWx0X3JvbGVzYAogICAgICAgIHdoZXJlICgoYG15c3FsYC5gZGVmYXVsdF9yb2xlc2AuYERFRkFVTFRfUk9MRV9VU0VSYCA9IGBjdXJyZW50X3VzZXJfZW5hYmxlZF9yb2xlc2AuYFJPTEVfTkFNRWApIGFuZAogICAgICAgICAgICAgICAoY29udmVydChgbXlzcWxgLmBkZWZhdWx0X3JvbGVzYC5gREVGQVVMVF9ST0xFX0hPU1RgIHVzaW5nIHV0ZjhtYjQpID0KICAgICAgICAgICAgICAgIGBjdXJyZW50X3VzZXJfZW5hYmxlZF9yb2xlc2AuYFJPTEVfSE9TVGApIGFuZAogICAgICAgICAgICAgICAoYG15c3FsYC5gZGVmYXVsdF9yb2xlc2AuYFVTRVJgID0gaW50ZXJuYWxfZ2V0X3VzZXJuYW1lKCkpIGFuZAogICAgICAgICAgICAgICAoY29udmVydChgbXlzcWxgLmBkZWZhdWx0X3JvbGVzYC5gSE9TVGAgdXNpbmcgdXRmOG1iNCkgPQogICAgICAgICAgICAgICAgY29udmVydChpbnRlcm5hbF9nZXRfaG9zdG5hbWUoKSB1c2luZyB1dGY4bWI0KSkpKSAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgSVNfREVGQVVMVGAsCiAgICAgICBpZihpbnRlcm5hbF9pc19tYW5kYXRvcnlfcm9sZShgY3VycmVudF91c2VyX2VuYWJsZWRfcm9sZXNgLmBST0xFX05BTUVgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYGN1cnJlbnRfdXNlcl9lbmFibGVkX3JvbGVzYC5gUk9MRV9IT1NUYCksICdZRVMnLCAnTk8nKSBBUyBgSVNfTUFOREFUT1JZYApmcm9tIGpzb25fdGFibGUoaW50ZXJuYWxfZ2V0X2VuYWJsZWRfcm9sZV9qc29uKCksICckWypdJwogICAgICAgICAgICAgICAgY29sdW1ucyAoYFJPTEVfTkFNRWAgdmFyY2hhcigyNTUpIGNoYXJhY3RlciBzZXQgdXRmOG1iNCBwYXRoICckLlJPTEVfTkFNRScsIGBST0xFX0hPU1RgIHZhcmNoYXIoMjU1KSBjaGFyYWN0ZXIgc2V0IHV0ZjhtYjQgcGF0aCAnJC5ST0xFX0hPU1QnKSkgYGN1cnJlbnRfdXNlcl9lbmFibGVkX3JvbGVzYDsKClBLAwQKAAAAAADcgjpYPSy1rFUAAABVAAAAGAAAAC92aWV3L0VWRU5UUy5HZFdhZWcubWV0YSNuOkVWRU5UUwohPG1kPiBbbnVsbCwgNjk5NzI5MTExLCBbMjIsIDIyLCAzMzU1LCAzMzU1LCAzMzU4XSwgW18sIEQsIFEsIEQsIDtdLCAwLCAwXQpQSwMECgAAAAAA3II6WNfw07weDQAAHg0AABcAAAAvdmlldy9FVkVOVFMuR2RXYWVnLnNxbGNyZWF0ZSB2aWV3IEVWRU5UUyBhcwpzZWxlY3QgYGNhdGAuYG5hbWVgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBFVkVOVF9DQVRBTE9HYCwKICAgICAgIGBzY2hgLmBuYW1lYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgRVZFTlRfU0NIRU1BYCwKICAgICAgIGBldnRgLmBuYW1lYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgRVZFTlRfTkFNRWAsCiAgICAgICBgZXZ0YC5gZGVmaW5lcmAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYERFRklORVJgLAogICAgICAgYGV2dGAuYHRpbWVfem9uZWAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBUSU1FX1pPTkVgLAogICAgICAgJ1NRTCcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBFVkVOVF9CT0RZYCwKICAgICAgIGBldnRgLmBkZWZpbml0aW9uX3V0ZjhgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgRVZFTlRfREVGSU5JVElPTmAsCiAgICAgICBpZigoYGV2dGAuYGludGVydmFsX3ZhbHVlYCBpcyBudWxsKSwgJ09ORSBUSU1FJywgJ1JFQ1VSUklORycpICAgICAgICAgICAgICAgICAgICAgQVMgYEVWRU5UX1RZUEVgLAogICAgICAgY29udmVydF90eihgZXZ0YC5gZXhlY3V0ZV9hdGAsICcrMDA6MDAnLCBgZXZ0YC5gdGltZV96b25lYCkgICAgICAgICAgICAgICAgICAgICAgIEFTIGBFWEVDVVRFX0FUYCwKICAgICAgIGNvbnZlcnRfaW50ZXJ2YWxfdG9fdXNlcl9pbnRlcnZhbChgZXZ0YC5gaW50ZXJ2YWxfdmFsdWVgLCBgZXZ0YC5gaW50ZXJ2YWxfZmllbGRgKSBBUyBgSU5URVJWQUxfVkFMVUVgLAogICAgICAgYGV2dGAuYGludGVydmFsX2ZpZWxkYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBJTlRFUlZBTF9GSUVMRGAsCiAgICAgICBgZXZ0YC5gc3FsX21vZGVgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYFNRTF9NT0RFYCwKICAgICAgIGNvbnZlcnRfdHooYGV2dGAuYHN0YXJ0c2AsICcrMDA6MDAnLCBgZXZ0YC5gdGltZV96b25lYCkgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgU1RBUlRTYCwKICAgICAgIGNvbnZlcnRfdHooYGV2dGAuYGVuZHNgLCAnKzAwOjAwJywgYGV2dGAuYHRpbWVfem9uZWApICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgRU5EU2AsCiAgICAgICBpZigoKGBldnRgLmBzdGF0dXNgID0gJ1JFUExJQ0FfU0lERV9ESVNBQkxFRCcpIGFuZCAoMCA8PiBpbnRlcm5hbF91c2VfdGVybWlub2xvZ3lfcHJldmlvdXMoKSkpLAogICAgICAgICAgJ1NMQVZFU0lERV9ESVNBQkxFRCcsIGBldnRgLmBzdGF0dXNgKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBTVEFUVVNgLAogICAgICAgaWYoKGBldnRgLmBvbl9jb21wbGV0aW9uYCA9ICdEUk9QJyksICdOT1QgUFJFU0VSVkUnLCAnUFJFU0VSVkUnKSAgICAgICAgICAgICAgICAgIEFTIGBPTl9DT01QTEVUSU9OYCwKICAgICAgIGBldnRgLmBjcmVhdGVkYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgQ1JFQVRFRGAsCiAgICAgICBgZXZ0YC5gbGFzdF9hbHRlcmVkYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYExBU1RfQUxURVJFRGAsCiAgICAgICBjb252ZXJ0X3R6KGBldnRgLmBsYXN0X2V4ZWN1dGVkYCwgJyswMDowMCcsIGBldnRgLmB0aW1lX3pvbmVgKSAgICAgICAgICAgICAgICAgICAgQVMgYExBU1RfRVhFQ1VURURgLAogICAgICAgYGV2dGAuYGNvbW1lbnRgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBFVkVOVF9DT01NRU5UYCwKICAgICAgIGBldnRgLmBvcmlnaW5hdG9yYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgT1JJR0lOQVRPUmAsCiAgICAgICBgY3NfY2xpZW50YC5gbmFtZWAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYENIQVJBQ1RFUl9TRVRfQ0xJRU5UYCwKICAgICAgIGBjb2xsX2Nvbm5gLmBuYW1lYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgQ09MTEFUSU9OX0NPTk5FQ1RJT05gLAogICAgICAgYGNvbGxfZGJgLmBuYW1lYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBEQVRBQkFTRV9DT0xMQVRJT05gCmZyb20gKCgoKCgoYG15c3FsYC5gZXZlbnRzYCBgZXZ0YCBqb2luIGBteXNxbGAuYHNjaGVtYXRhYCBgc2NoYAogICAgICAgICAgIG9uICgoYGV2dGAuYHNjaGVtYV9pZGAgPSBgc2NoYC5gaWRgKSkpIGpvaW4gYG15c3FsYC5gY2F0YWxvZ3NgIGBjYXRgCiAgICAgICAgICBvbiAoKGBjYXRgLmBpZGAgPSBgc2NoYC5gY2F0YWxvZ19pZGApKSkgam9pbiBgbXlzcWxgLmBjb2xsYXRpb25zYCBgY29sbF9jbGllbnRgCiAgICAgICAgIG9uICgoYGNvbGxfY2xpZW50YC5gaWRgID0gYGV2dGAuYGNsaWVudF9jb2xsYXRpb25faWRgKSkpIGpvaW4gYG15c3FsYC5gY2hhcmFjdGVyX3NldHNgIGBjc19jbGllbnRgCiAgICAgICAgb24gKChgY3NfY2xpZW50YC5gaWRgID0gYGNvbGxfY2xpZW50YC5gY2hhcmFjdGVyX3NldF9pZGApKSkgam9pbiBgbXlzcWxgLmBjb2xsYXRpb25zYCBgY29sbF9jb25uYAogICAgICAgb24gKChgY29sbF9jb25uYC5gaWRgID0gYGV2dGAuYGNvbm5lY3Rpb25fY29sbGF0aW9uX2lkYCkpKSBqb2luIGBteXNxbGAuYGNvbGxhdGlvbnNgIGBjb2xsX2RiYAogICAgICBvbiAoKGBjb2xsX2RiYC5gaWRgID0gYGV2dGAuYHNjaGVtYV9jb2xsYXRpb25faWRgKSkpCndoZXJlICgwIDw+IGNhbl9hY2Nlc3NfZXZlbnQoYHNjaGAuYG5hbWVgKSk7CgpQSwMECgAAAAAA3II6WE38FKNUAAAAVAAAABcAAAAvdmlldy9GSUxFUy5WOEw4QXcubWV0YSNuOkZJTEVTCiE8bWQ+IFtudWxsLCA0MjE1OTQ2OTcsIFsyMSwgMjEsIDY2ODQsIDY2ODQsIDY2ODddLCBbXywgRCwgUSwgRCwgO10sIDAsIDBdClBLAwQKAAAAAADcgjpYEKbKwB8aAAAfGgAAFgAAAC92aWV3L0ZJTEVTLlY4TDhBdy5zcWxjcmVhdGUgdmlldyBGSUxFUyBhcwpzZWxlY3QgaW50ZXJuYWxfdGFibGVzcGFjZV9pZChgdHNgLmBuYW1lYCwgYHRzZmAuYGZpbGVfbmFtZWAsIGB0c2AuYGVuZ2luZWAsIGB0c2AuYHNlX3ByaXZhdGVfZGF0YWApICAgICAgICAgICAgICAgICBBUyBgRklMRV9JRGAsCiAgICAgICByZXBsYWNlKGlmKCgobG9jYXRlKGxlZnQoYHRzZmAuYGZpbGVfbmFtZWAsIDEpLCAnLi8nKSA9IDApIGFuZCAoc3Vic3RyKGB0c2ZgLmBmaWxlX25hbWVgLCAyLCAxKSA8PiAnOicpKSwKICAgICAgICAgICAgICAgICAgY29uY2F0KCcuLycsIGB0c2ZgLmBmaWxlX25hbWVgKSwgYHRzZmAuYGZpbGVfbmFtZWApLCAnXFwnLAogICAgICAgICAgICAgICAnLycpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgRklMRV9OQU1FYCwKICAgICAgIGludGVybmFsX3RhYmxlc3BhY2VfdHlwZShgdHNgLmBuYW1lYCwgYHRzZmAuYGZpbGVfbmFtZWAsIGB0c2AuYGVuZ2luZWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYHRzYC5gc2VfcHJpdmF0ZV9kYXRhYCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBGSUxFX1RZUEVgLAogICAgICAgYHRzYC5gbmFtZWAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgVEFCTEVTUEFDRV9OQU1FYCwKICAgICAgICcnICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYFRBQkxFX0NBVEFMT0dgLAogICAgICAgTlVMTCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgVEFCTEVfU0NIRU1BYCwKICAgICAgIE5VTEwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYFRBQkxFX05BTUVgLAogICAgICAgaW50ZXJuYWxfdGFibGVzcGFjZV9sb2dmaWxlX2dyb3VwX25hbWUoYHRzYC5gbmFtZWAsIGB0c2ZgLmBmaWxlX25hbWVgLCBgdHNgLmBlbmdpbmVgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYHRzYC5gc2VfcHJpdmF0ZV9kYXRhYCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgTE9HRklMRV9HUk9VUF9OQU1FYCwKICAgICAgIGludGVybmFsX3RhYmxlc3BhY2VfbG9nZmlsZV9ncm91cF9udW1iZXIoYHRzYC5gbmFtZWAsIGB0c2ZgLmBmaWxlX25hbWVgLCBgdHNgLmBlbmdpbmVgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgdHNgLmBzZV9wcml2YXRlX2RhdGFgKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgTE9HRklMRV9HUk9VUF9OVU1CRVJgLAogICAgICAgYHRzYC5gZW5naW5lYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgRU5HSU5FYCwKICAgICAgIE5VTEwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYEZVTExURVhUX0tFWVNgLAogICAgICAgTlVMTCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgREVMRVRFRF9ST1dTYCwKICAgICAgIE5VTEwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYFVQREFURV9DT1VOVGAsCiAgICAgICBpbnRlcm5hbF90YWJsZXNwYWNlX2ZyZWVfZXh0ZW50cyhgdHNgLmBuYW1lYCwgYHRzZmAuYGZpbGVfbmFtZWAsIGB0c2AuYGVuZ2luZWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgdHNgLmBzZV9wcml2YXRlX2RhdGFgKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBGUkVFX0VYVEVOVFNgLAogICAgICAgaW50ZXJuYWxfdGFibGVzcGFjZV90b3RhbF9leHRlbnRzKGB0c2AuYG5hbWVgLCBgdHNmYC5gZmlsZV9uYW1lYCwgYHRzYC5gZW5naW5lYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgdHNgLmBzZV9wcml2YXRlX2RhdGFgKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYFRPVEFMX0VYVEVOVFNgLAogICAgICAgaW50ZXJuYWxfdGFibGVzcGFjZV9leHRlbnRfc2l6ZShgdHNgLmBuYW1lYCwgYHRzZmAuYGZpbGVfbmFtZWAsIGB0c2AuYGVuZ2luZWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGB0c2AuYHNlX3ByaXZhdGVfZGF0YWApICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBFWFRFTlRfU0laRWAsCiAgICAgICBpbnRlcm5hbF90YWJsZXNwYWNlX2luaXRpYWxfc2l6ZShgdHNgLmBuYW1lYCwgYHRzZmAuYGZpbGVfbmFtZWAsIGB0c2AuYGVuZ2luZWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgdHNgLmBzZV9wcml2YXRlX2RhdGFgKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBJTklUSUFMX1NJWkVgLAogICAgICAgaW50ZXJuYWxfdGFibGVzcGFjZV9tYXhpbXVtX3NpemUoYHRzYC5gbmFtZWAsIGB0c2ZgLmBmaWxlX25hbWVgLCBgdHNgLmBlbmdpbmVgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYHRzYC5gc2VfcHJpdmF0ZV9kYXRhYCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgTUFYSU1VTV9TSVpFYCwKICAgICAgIGludGVybmFsX3RhYmxlc3BhY2VfYXV0b2V4dGVuZF9zaXplKGB0c2AuYG5hbWVgLCBgdHNmYC5gZmlsZV9uYW1lYCwgYHRzYC5gZW5naW5lYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGB0c2AuYHNlX3ByaXZhdGVfZGF0YWApICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYEFVVE9FWFRFTkRfU0laRWAsCiAgICAgICBOVUxMICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBDUkVBVElPTl9USU1FYCwKICAgICAgIE5VTEwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYExBU1RfVVBEQVRFX1RJTUVgLAogICAgICAgTlVMTCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgTEFTVF9BQ0NFU1NfVElNRWAsCiAgICAgICBOVUxMICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBSRUNPVkVSX1RJTUVgLAogICAgICAgTlVMTCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgVFJBTlNBQ1RJT05fQ09VTlRFUmAsCiAgICAgICBpbnRlcm5hbF90YWJsZXNwYWNlX3ZlcnNpb24oYHRzYC5gbmFtZWAsIGB0c2ZgLmBmaWxlX25hbWVgLCBgdHNgLmBlbmdpbmVgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGB0c2AuYHNlX3ByaXZhdGVfZGF0YWApICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgVkVSU0lPTmAsCiAgICAgICBpbnRlcm5hbF90YWJsZXNwYWNlX3Jvd19mb3JtYXQoYHRzYC5gbmFtZWAsIGB0c2ZgLmBmaWxlX25hbWVgLCBgdHNgLmBlbmdpbmVgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGB0c2AuYHNlX3ByaXZhdGVfZGF0YWApICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgUk9XX0ZPUk1BVGAsCiAgICAgICBOVUxMICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBUQUJMRV9ST1dTYCwKICAgICAgIE5VTEwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYEFWR19ST1dfTEVOR1RIYCwKICAgICAgIE5VTEwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYERBVEFfTEVOR1RIYCwKICAgICAgIE5VTEwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYE1BWF9EQVRBX0xFTkdUSGAsCiAgICAgICBOVUxMICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBJTkRFWF9MRU5HVEhgLAogICAgICAgaW50ZXJuYWxfdGFibGVzcGFjZV9kYXRhX2ZyZWUoYHRzYC5gbmFtZWAsIGB0c2ZgLmBmaWxlX25hbWVgLCBgdHNgLmBlbmdpbmVgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYHRzYC5gc2VfcHJpdmF0ZV9kYXRhYCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgREFUQV9GUkVFYCwKICAgICAgIE5VTEwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYENSRUFURV9USU1FYCwKICAgICAgIE5VTEwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYFVQREFURV9USU1FYCwKICAgICAgIE5VTEwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYENIRUNLX1RJTUVgLAogICAgICAgTlVMTCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgQ0hFQ0tTVU1gLAogICAgICAgaW50ZXJuYWxfdGFibGVzcGFjZV9zdGF0dXMoYHRzYC5gbmFtZWAsIGB0c2ZgLmBmaWxlX25hbWVgLCBgdHNgLmBlbmdpbmVgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYHRzYC5gc2VfcHJpdmF0ZV9kYXRhYCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgU1RBVFVTYCwKICAgICAgIGludGVybmFsX3RhYmxlc3BhY2VfZXh0cmEoYHRzYC5gbmFtZWAsIGB0c2ZgLmBmaWxlX25hbWVgLCBgdHNgLmBlbmdpbmVgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgdHNgLmBzZV9wcml2YXRlX2RhdGFgKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgRVhUUkFgCmZyb20gKGBteXNxbGAuYHRhYmxlc3BhY2VzYCBgdHNgIGpvaW4gYG15c3FsYC5gdGFibGVzcGFjZV9maWxlc2AgYHRzZmAgb24gKChgdHNgLmBpZGAgPSBgdHNmYC5gdGFibGVzcGFjZV9pZGApKSk7CgpQSwMECgAAAAAA3II6WP+dudBcAAAAXAAAACIAAAAvdmlldy9JTk5PREJfREFUQUZJTEVTLkVpZXB4US5tZXRhI246SU5OT0RCX0RBVEFGSUxFUwohPG1kPiBbbnVsbCwgLTkzNzA3OTMzLCBbMzIsIDMyLCA0MjUsIDQyNSwgNDI4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bWVgLCAnLycsIGB0YmxgLmBuYW1lYCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBGT1JfTkFNRWAsCiAgICAgICBjb25jYXQoYGZrYC5gcmVmZXJlbmNlZF90YWJsZV9zY2hlbWFgLCAnLycsIGBma2AuYHJlZmVyZW5jZWRfdGFibGVfbmFtZWApICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBSRUZfTkFNRWAsCiAgICAgICBjb3VudCgwKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBOX0NPTFNgLAogICAgICAgKCgoKChpZigoYGZrYC5gZGVsZXRlX3J1bGVgID0gJ0NBU0NBREUnKSwgMSwgMCkgfCBpZigoYGZrYC5gZGVsZXRlX3J1bGVgID0gJ1NFVCBOVUxMJyksIDIsIDApKSB8CiAgICAgICAgICAgaWYoKGBma2AuYHVwZGF0ZV9ydWxlYCA9ICdDQVNDQURFJyksIDQsIDApKSB8IGlmKChgZmtgLmB1cGRhdGVfcnVsZWAgPSAnU0VUIE5VTEwnKSwgOCwgMCkpIHwKICAgICAgICAgaWYoKGBma2AuYGRlbGV0ZV9ydWxlYCA9ICdOTyBBQ1RJT04nKSwgMTYsIDApKSB8IGlmKChgZmtgLmB1cGRhdGVfcnVsZWAgPSAnTk8gQUNUSU9OJyksIDMyLCAwKSkgQVMgYFRZUEVgCmZyb20gKCgoYG15c3FsYC5gZm9yZWlnbl9rZXlzYCBgZmtgIGpvaW4gYG15c3FsYC5gdGFibGVzYCBgdGJsYAogICAgICAgIG9uICgoYGZrYC5gdGFibGVfaWRgID0gYHRibGAuYGlkYCkpKSBqb2luIGBteXNxbGAuYHNjaGVtYXRhYCBgc2NoYAogICAgICAgb24gKChgZmtgLmBzY2hlbWFfaWRgID0gYHNjaGAuYGlkYCkpKSBqb2luIGBteXNxbGAuYGZvcmVpZ25fa2V5X2NvbHVtbl91c2FnZWAgYGNvbGAKICAgICAgb24gKChg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amAuYHJlc2VydmVkYCBBUyBgUkVTRVJWRURgCmZyb20ganNvbl90YWJsZSgKICAgICAgICAgICAgICdbWyJBQ0NFU1NJQkxFIiwxXSxbIkFDQ09VTlQiLDBdLFsiQUNUSU9OIiwwXSxbIkFDVElWRSIsMF0sWyJBREQiLDFdLFsiQURNSU4iLDBdLFsiQUZURVIiLDBdLFsiQUdBSU5TVCIsMF0sWyJBR0dSRUdBVEUiLDBdLFsiQUxHT1JJVEhNIiwwXSxbIkFMTCIsMV0sWyJBTFRFUiIsMV0sWyJBTFdBWVMiLDBdLFsiQU5BTFlaRSIsMV0sWyJBTkQiLDFdLFsiQU5ZIiwwXSxbIkFSUkFZIiwwXSxbIkFTIiwxXSxbIkFTQyIsMV0sWyJBU0NJSSIsMF0sWyJBU0VOU0lUSVZFIiwxXSxbIkFTU0lHTl9HVElEU19UT19BTk9OWU1PVVNfVFJBTlNBQ1RJT05TIiwwXSxbIkFUIiwwXSxbIkFUVFJJQlVURSIsMF0sWyJBVVRIRU5USUNBVElPTiIsMF0sWyJBVVRPRVhURU5EX1NJWkUiLDBdLFsiQVVUT19JTkNSRU1FTlQiLDBdLFsiQVZHIiwwXSxbIkFWR19ST1dfTEVOR1RIIiwwXSxbIkJBQ0tVUCIsMF0sWyJCRUZPUkUiLDFdLFsiQkVHSU4iLDBdLFsiQkVUV0VFTiIsMV0sWyJCSUdJTlQiLDFdLFsiQklOQVJZIiwxXSxbIkJJTkxPRyIsMF0sWyJCSVQiLDBdLFsiQkxPQiIsMV0sWyJCTE9DSyIsMF0sWyJCT09MIiwwXSxbIkJPT0xFQU4iLDBdLFsiQk9USCIsMV0sWyJCVFJFRSIsMF0sWyJCVUNLRVRTIiwwXSxbIkJVTEsiLDBdLFsiQlkiLDFdLFsiQllURSIsMF0sWyJDQUNIRSIsMF0sWyJDQUxMIiwxXSxbIkNBU0NBREUiLDFdLFsiQ0FTQ0FERUQiLDBdLFsiQ0FTRSIsMV0sWyJDQVRBTE9HX05BTUUiLDBdLFsiQ0hBSU4iLDBdLFsiQ0hBTExFTkdFX1JFU1BPTlNFIiwwXSxbIkNIQU5HRSIsMV0sWyJDSEFOR0VEIiwwXSxbIkNIQU5ORUwiLDBdLFsiQ0hBUiIsMV0sWyJDSEFSQUNURVIiLDFdLFsiQ0hBUlNFVCIsMF0sWyJDSEVDSyIsMV0sWyJDSEVDS1NVTSIsMF0sWyJDSVBIRVIiLDBdLFsiQ0xBU1NfT1JJR0lOIiwwXSxbIkNMSUVOVCIsMF0sWyJDTE9ORSIsMF0sWyJDTE9TRSIsMF0sWyJDT0FMRVNDRSIsMF0sWyJDT0RFIiwwXSxbIkNPTExBVEUiLDFdLFsiQ09MTEFUSU9OIiwwXSxbIkNPTFVNTiIsMV0sWyJDT0xVTU5TIiwwXSxbIkNPTFVNTl9GT1JNQVQiLDBdLFsiQ09MVU1OX05BTUUiLDBdLFsiQ09NTUVOVCIsMF0sWyJDT01NSVQiLDBdLFsiQ09NTUlUVEVEIiwwXSxbIkNPTVBBQ1QiLDBdLFsiQ09NUExFVElPTiIsMF0sWyJDT01QT05FTlQiLDBdLFsiQ09NUFJFU1NFRCIsMF0sWyJDT01QUkVTU0lPTiIsMF0sWyJDT05DVVJSRU5UIiwwXSxbIkNPTkRJVElPTiIsMV0sWyJDT05ORUNUSU9OIiwwXSxbIkNPTlNJU1RFTlQiLDBdLFsiQ09OU1RSQUlOVCIsMV0sWyJDT05TVFJBSU5UX0NBVEFMT0ciLDBdLFsiQ09OU1RSQUlOVF9OQU1FIiwwXSxbIkNPTlNUUkFJTlRfU0NIRU1BIiwwXSxbIkNPTlRBSU5TIiwwXSxbIkNPTlRFWFQiLDBdLFsiQ09OVElOVUUiLDFdLFsiQ09OVkVSVCIsMV0sWyJDUFUiLDBdLFsiQ1JFQVRFIiwxXSxbIkNST1NTIiwxXSxbIkNVQkUiLDBdLFsiQ1VNRV9ESVNUIiwxXSxbIkNVUlJFTlQiLDBdLFsiQ1VSUkVOVF9EQVRFIiwxXSxbIkNVUlJFTlRfVElNRSIsMV0sWyJDVVJSRU5UX1RJTUVTVEFNUCIsMV0sWyJDVVJSRU5UX1VTRVIiLDFdLFsiQ1VSU09SIiwxXSxbIkNVUlNPUl9OQU1FIiwwXSxbIkRBVEEiLDBdLFsiREFUQUJBU0UiLDFdLFsiREFUQUJBU0VTIiwxXSxbIkRBVEFGSUxFIiwwXSxbIkRBVEUiLDBdLFsiREFURVRJTUUiLDBdLFsiREFZIiwwXSxbIkRBWV9IT1VSIiwxXSxbIkRBWV9NSUNST1NFQ09ORCIsMV0sWyJEQVlfTUlOVVRFIiwxXSxbIkRBWV9TRUNPTkQiLDFdLFsiREVBTExPQ0FURSIsMF0sWyJERUMiLDFdLFsiREVDSU1BTCIsMV0sWyJERUNMQVJFIiwxXSxbIkRFRkFVTFQiLDFdLFsiREVGQVVMVF9BVVRIIiwwXSxbIkRFRklORVIiLDBdLFsiREVGSU5JVElPTiIsMF0sWyJERUxBWUVEIiwxXSxbIkRFTEFZX0tFWV9XUklURSIsMF0sWyJERUxFVEUiLDFdLFsiREVOU0VfUkFOSyIsMV0sWyJERVNDIiwxXSxbIkRFU0NSSUJFIiwxXSxbIkRFU0NSSVBUSU9OIiwwXSxbIkRFVEVSTUlOSVNUSUMiLDFdLFsiRElBR05PU1RJQ1MiLDBdLFsiRElSRUNUT1JZIiwwXSxbIkRJU0FCTEUiLDBdLFsiRElTQ0FSRCIsMF0sWyJESVNLIiwwXSxbIkRJU1RJTkNUIiwxXSxbIkRJU1RJTkNUUk9XIiwxXSxbIkRJViIsMV0sWyJETyIsMF0sWyJET1VCTEUiLDFdLFsiRFJPUCIsMV0sWyJEVUFMIiwxXSxbIkRVTVBGSUxFIiwwXSxbIkRVUExJQ0FURSIsMF0sWyJEWU5BTUlDIiwwXSxbIkVBQ0giLDFdLFsiRUxTRSIsMV0sWyJFTFNFSUYiLDFdLFsiRU1QVFkiLDFdLFsiRU5BQkxFIiwwXSxbIkVOQ0xPU0VEIiwxXSxbIkVOQ1JZUFRJT04iLDBdLFsiRU5EIiwwXSxbIkVORFMiLDBdLFsiRU5GT1JDRUQiLDBdLFsiRU5HSU5FIiwwXSxbIkVOR0lORVMiLDBdLFsiRU5HSU5FX0FUVFJJQlVURSIsMF0sWyJFTlVNIiwwXSxbIkVSUk9SIiwwXSxbIkVSUk9SUyIsMF0sWyJFU0NBUEUiLDBdLFsiRVNDQVBFRCIsMV0sWyJFVkVOVCIsMF0sWyJFVkVOVFMiLDBdLFsiRVZFUlkiLDBdLFsiRVhDRVBUIiwxXSxbIkVYQ0hBTkdFIiwwXSxbIkVYQ0xVREUiLDBdLFsiRVhFQ1VURSIsMF0sWyJFWElTVFMiLDFdLFsiRVhJVCIsMV0sWyJFWFBBTlNJT04iLDBdLFsiRVhQSVJFIiwwXSxbIkVYUExBSU4iLDFdLFsiRVhQT1JUIiwwXSxbIkVYVEVOREVEIiwwXSxbIkVYVEVOVF9TSVpFIiwwXSxbIkZBQ1RPUiIsMF0sWyJGQUlMRURfTE9HSU5fQVRURU1QVFMiLDBdLFsiRkFMU0UiLDFdLFsiRkFTVCIsMF0sWyJGQVVMVFMiLDBdLFsiRkVUQ0giLDFdLFsiRklFTERTIiwwXSxbIkZJTEUiLDBdLFsiRklMRV9CTE9DS19TSVpFIiwwXSxbIkZJTFRFUiIsMF0sWyJGSU5JU0giLDBdLFsiRklSU1QiLDBdLFsiRklSU1RfVkFMVUUiLDFdLFsiRklYRUQiLDBdLFsiRkxPQVQiLDFdLFsiRkxPQVQ0IiwxXSxbIkZMT0FUOCIsMV0sWyJGTFVTSCIsMF0sWyJGT0xMT1dJTkciLDBdLFsiRk9MTE9XUyIsMF0sWyJGT1IiLDFdLFsiRk9SQ0UiLDFdLFsiRk9SRUlHTiIsMV0sWyJGT1JNQVQiLDBdLFsiRk9VTkQiLDBdLFsiRlJPTSIsMV0sWyJGVUxMIiwwXSxbIkZVTExURVhUIiwxXSxbIkZVTkNUSU9OIiwxXSxbIkdFTkVSQUwiLDBdLFsiR0VORVJBVEUiLDBdLFsiR0VORVJBVEVEIiwxXSxbIkdFT01DT0xMRUNUSU9OIiwwXSxbIkdFT01FVFJZIiwwXSxbIkdFT01FVFJZQ09MTEVDVElPTiIsMF0sWyJHRVQiLDFdLFsiR0VUX0ZPUk1BVCIsMF0sWyJHRVRfTUFTVEVSX1BVQkxJQ19LRVkiLDBdLFsiR0VUX1NPVVJDRV9QVUJMSUNfS0VZIiwwXSxbIkdMT0JBTCIsMF0sWyJHUkFOVCIsMV0sWyJHUkFOVFMiLDBdLFsiR1JPVVAiLDFdLFsiR1JPVVBJTkciLDFdLFsiR1JPVVBTIiwxXSxbIkdST1VQX1JFUExJQ0FUSU9OIiwwXSxbIkdUSURTIiwwXSxbIkdUSURfT05MWSIsMF0sWyJIQU5ETEVSIiwwXSxbIkhBU0giLDBdLFsiSEFWSU5HIiwxXSxbIkhFTFAiLDBdLFsiSElHSF9QUklPUklUWSIsMV0sWyJISVNUT0dSQU0iLDBdLFsiSElTVE9SWSIsMF0sWyJIT1NUIiwwXSxbIkhPU1RTIiwwXSxbIkhPVVIiLDBdLFsiSE9VUl9NSUNST1NFQ09ORCIsMV0sWyJIT1VSX01JTlVURSIsMV0sWyJIT1VSX1NFQ09ORCIsMV0sWyJJREVOVElGSUVEIiwwXSxbIklGIiwxXSxbIklHTk9SRSIsMV0sWyJJR05PUkVfU0VSVkVSX0lEUyIsMF0sWyJJTVBPUlQiLDBdLFsiSU4iLDFdLFsiSU5BQ1RJVkUiLDBdLFsiSU5ERVgiLDFdLFsiSU5ERVhFUyIsMF0sWyJJTkZJTEUiLDFdLFsiSU5JVElBTCIsMF0sWyJJTklUSUFMX1NJWkUiLDBdLFsiSU5JVElBVEUiLDBdLFsiSU5ORVIiLDFdLFsiSU5PVVQiLDFdLFsiSU5TRU5TSVRJVkUiLDFdLFsiSU5TRVJUIiwxXSxbIklOU0VSVF9NRVRIT0QiLDBdLFsiSU5TVEFMTCIsMF0sWyJJTlNUQU5DRSIsMF0sWyJJTlQiLDFdLFsiSU5UMSIsMV0sWyJJTlQyIiwxXSxbIklOVDMiLDFdLFsiSU5UNCIsMV0sWyJJTlQ4IiwxXSxbIklOVEVHRVIiLDFdLFsiSU5URVJTRUNUIiwxXSxbIklOVEVSVkFMIiwxXSxbIklOVE8iLDFdLFsiSU5WSVNJQkxFIiwwXSxbIklOVk9LRVIiLDBdLFsiSU8iLDBdLFsiSU9fQUZURVJfR1RJRFMiLDFdLFsiSU9fQkVGT1JFX0dUSURTIiwxXSxbIklPX1RIUkVBRCIsMF0sWyJJUEMiLDBdLFsiSVMiLDFdLFsiSVNPTEFUSU9OIiwwXSxbIklTU1VFUiIsMF0sWyJJVEVSQVRFIiwxXSxbIkpPSU4iLDFdLFsiSlNPTiIsMF0sWyJKU09OX1RBQkxFIiwxXSxbIkpTT05fVkFMVUUiLDBdLFsiS0VZIiwxXSxbIktFWVJJTkciLDBdLFsiS0VZUyIsMV0sWyJLRVlfQkxPQ0tfU0laRSIsMF0sWyJLSUxMIiwxXSxbIkxBRyIsMV0sWyJMQU5HVUFHRSIsMF0sWyJMQVNUIiwwXSxbIkxBU1RfVkFMVUUiLDFdLFsiTEFURVJBTCIsMV0sWyJMRUFEIiwxXSxbIkxFQURJTkciLDFdLFsiTEVBVkUiLDFdLFsiTEVBVkVTIiwwXSxbIkxFRlQiLDFdLFsiTEVTUyIsMF0sWyJMRVZFTCIsMF0sWyJMSUtFIiwxXSxbIkxJTUlUIiwxXSxbIkxJTkVBUiIsMV0sWyJMSU5FUyIsMV0sWyJMSU5FU1RSSU5HIiwwXSxbIkxJU1QiLDBdLFsiTE9BRCIsMV0sWyJMT0NBTCIsMF0sWyJMT0NBTFRJTUUiLDFdLFsiTE9DQUxUSU1FU1RBTVAiLDFdLFsiTE9DSyIsMV0sWyJMT0NLRUQiLDBdLFsiTE9DS1MiLDBdLFsiTE9HIiwwXSxbIkxPR0ZJTEUiLDBdLFsiTE9HUyIsMF0sWyJMT05HIiwxXSxbIkxPTkdCTE9CIiwxXSxbIkxPTkdURVhUIiwxXSxbIkxPT1AiLDFdLFsiTE9XX1BSSU9SSVRZIiwxXSxbIk1BU1RFUiIsMF0sWyJNQVNURVJfQVVUT19QT1NJVElPTiIsMF0sWyJNQVNURVJfQklORCIsMV0sWyJNQVNURVJfQ09NUFJFU1NJT05fQUxHT1JJVEhNUyIsMF0sWyJNQVNURVJfQ09OTkVDVF9SRVRSWSIsMF0sWyJNQVNURVJfREVMQVkiLDBdLFsiTUFTVEVSX0hFQVJUQkVBVF9QRVJJT0QiLDBdLFsiTUFTVEVSX0hPU1QiLDBdLFsiTUFTVEVSX0xPR19GSUxFIiwwXSxbIk1BU1RFUl9MT0dfUE9TIiwwXSxbIk1BU1RFUl9QQVNTV09SRCIsMF0sWyJNQVNURVJfUE9SVCIsMF0sWyJNQVNURVJfUFVCTElDX0tFWV9QQVRIIiwwXSxbIk1BU1RFUl9SRVRSWV9DT1VOVCIsMF0sWyJNQVNURVJfU1NMIiwwXSxbIk1BU1RFUl9TU0xfQ0EiLDBdLFsiTUFTVEVSX1NTTF9DQVBBVEgiLDBdLFsiTUFTVEVSX1NTTF9DRVJUIiwwXSxbIk1BU1RFUl9TU0xfQ0lQSEVSIiwwXSxbIk1BU1RFUl9TU0xfQ1JMIiwwXSxbIk1BU1RFUl9TU0xfQ1JMUEFUSCIsMF0sWyJNQVNURVJfU1NMX0tFWSIsMF0sWyJNQVNURVJfU1NMX1ZFUklGWV9TRVJWRVJfQ0VSVCIsMV0sWyJNQVNURVJfVExTX0NJUEhFUlNVSVRFUyIsMF0sWyJNQVNURVJfVExTX1ZFUlNJT04iLDBdLFsiTUFTVEVSX1VTRVIiLDBdLFsiTUFTVEVSX1pTVERfQ09NUFJFU1NJT05fTEVWRUwiLDBdLFsiTUFUQ0giLDFdLFsiTUFYVkFMVUUiLDFdLFsiTUFYX0NPTk5FQ1RJT05TX1BFUl9IT1VSIiwwXSxbIk1BWF9RVUVSSUVTX1BFUl9IT1VSIiwwXSxbIk1BWF9ST1dTIiwwXSxbIk1BWF9TSVpFIiwwXSxbIk1BWF9VUERBVEVTX1BFUl9IT1VSIiwwXSxbIk1BWF9VU0VSX0NPTk5FQ1RJT05TIiwwXSxbIk1FRElVTSIsMF0sWyJNRURJVU1CTE9CIiwxXSxbIk1FRElVTUlOVCIsMV0sWyJNRURJVU1URVhUIiwxXSxbIk1FTUJFUiIsMF0sWyJNRU1PUlkiLDBdLFsiTUVSR0UiLDBdLFsiTUVTU0FHRV9URVhUIiwwXSxbIk1JQ1JPU0VDT05EIiwwXSxbIk1JRERMRUlOVCIsMV0sWyJNSUdSQVRFIiwwXSxbIk1JTlVURSIsMF0sWyJNSU5VVEVfTUlDUk9TRUNPTkQiLDFdLFsiTUlOVVRFX1NFQ09ORCIsMV0sWyJNSU5fUk9XUyIsMF0sWyJNT0QiLDFdLFsiTU9ERSIsMF0sWyJNT0RJRklFUyIsMV0sWyJNT0RJRlkiLDBdLFsiTU9OVEgiLDBdLFsiTVVMVElMSU5FU1RSSU5HIiwwXSxbIk1VTFRJUE9JTlQiLDBdLFsiTVVMVElQT0xZR09OIiwwXSxbIk1VVEVYIiwwXSxbIk1ZU1FMX0VSUk5PIiwwXSxbIk5BTUUiLDBdLFsiTkFNRVMiLDBdLFsiTkFUSU9OQUwiLDBdLFsiTkFUVVJBTCIsMV0sWyJOQ0hBUiIsMF0sWyJOREIiLDBdLFsiTkRCQ0xVU1RFUiIsMF0sWyJORVNURUQiLDBdLFsiTkVUV09SS19OQU1FU1BBQ0UiLDBdLFsiTkVWRVIiLDBdLFsiTkVXIiwwXSxbIk5FWFQiLDBdLFsiTk8iLDBdLFsiTk9ERUdST1VQIiwwXSxbIk5PTkUiLDBdLFsiTk9UIiwxXSxbIk5PV0FJVCIsMF0sWyJOT19XQUlUIiwwXSxbIk5PX1dSSVRFX1RPX0JJTkxPRyIsMV0sWyJOVEhfVkFMVUUiLDFdLFsiTlRJTEUiLDFdLFsiTlVMTCIsMV0sWyJOVUxMUyIsMF0sWyJOVU1CRVIiLDBdLFsiTlVNRVJJQyIsMV0sWyJOVkFSQ0hBUiIsMF0sWyJPRiIsMV0sWyJPRkYiLDBdLFsiT0ZGU0VUIiwwXSxbIk9KIiwwXSxbIk9MRCIsMF0sWyJPTiIsMV0sWyJPTkUiLDBdLFsiT05MWSIsMF0sWyJPUEVOIiwwXSxbIk9QVElNSVpFIiwxXSxbIk9QVElNSVpFUl9DT1NUUyIsMV0sWyJPUFRJT04iLDFdLFsiT1BUSU9OQUwiLDBdLFsiT1BUSU9OQUxMWSIsMV0sWyJPUFRJT05TIiwwXSxbIk9SIiwxXSxbIk9SREVSIiwxXSxbIk9SRElOQUxJVFkiLDBdLFsiT1JHQU5JWkFUSU9OIiwwXSxbIk9USEVSUyIsMF0sWyJPVVQiLDFdLFsiT1VURVIiLDFdLFsiT1VURklMRSIsMV0sWyJPVkVSIiwxXSxbIk9XTkVSIiwwXSxbIlBBQ0tfS0VZUyIsMF0sWyJQQUdFIiwwXSxbIlBBUkFMTEVMIiwwXSxbIlBBUlNFUiIsMF0sWyJQQVJTRV9UUkVFIiwwXSxbIlBBUlRJQUwiLDBdLFsiUEFSVElUSU9OIiwxXSxbIlBBUlRJVElPTklORyIsMF0sWyJQQVJUSVRJT05TIiwwXSxbIlBBU1NXT1JEIiwwXSxbIlBBU1NXT1JEX0xPQ0tfVElNRSIsMF0sWyJQQVRIIiwwXSxbIlBFUkNFTlRfUkFOSyIsMV0sWyJQRVJTSVNUIiwwXSxbIlBFUlNJU1RfT05MWSIsMF0sWyJQSEFTRSIsMF0sWyJQTFVHSU4iLDBdLFsiUExVR0lOUyIsMF0sWyJQTFVHSU5fRElSIiwwXSxbIlBPSU5UIiwwXSxbIlBPTFlHT04iLDBdLFsiUE9SVCIsMF0sWyJQUkVDRURFUyIsMF0sWyJQUkVDRURJTkciLDBdLFsiUFJFQ0lTSU9OIiwxXSxbIlBSRVBBUkUiLDBdLFsiUFJFU0VSVkUiLDBdLFsiUFJFViIsMF0sWyJQUklNQVJZIiwxXSxbIlBSSVZJTEVHRVMiLDBdLFsiUFJJVklMRUdFX0NIRUNLU19VU0VSIiwwXSxbIlBST0NFRFVSRSIsMV0sWyJQUk9DRVNTIiwwXSxbIlBST0NFU1NMSVNUIiwwXSxbIlBST0ZJTEUiLDBdLFsiUFJPRklMRVMiLDBdLFsiUFJPWFkiLDBdLFsiUFVSR0UiLDFdLFsiUVVBTElGWSIsMF0sWyJRVUFSVEVSIiwwXSxbIlFVRVJZIiwwXSxbIlFVSUNLIiwwXSxbIlJBTkRPTSIsMF0sWyJSQU5HRSIsMV0sWyJSQU5LIiwxXSxbIlJFQUQiLDFdLFsiUkVBRFMiLDFdLFsiUkVBRF9PTkxZIiwwXSxbIlJFQURfV1JJVEUiLDFdLFsiUkVBTCIsMV0sWyJSRUJVSUxEIiwwXSxbIlJFQ09WRVIiLDBdLFsiUkVDVVJTSVZFIiwxXSxbIlJFRE9fQlVGRkVSX1NJWkUiLDBdLFsiUkVEVU5EQU5UIiwwXSxbIlJFRkVSRU5DRSIsMF0sWyJSRUZFUkVOQ0VTIiwxXSxbIlJFR0VYUCIsMV0sWyJSRUdJU1RSQVRJT04iLDBdLFsiUkVMQVkiLDBdLFsiUkVMQVlMT0ciLDBdLFsiUkVMQVlfTE9HX0ZJTEUiLDBdLFsiUkVMQVlfTE9HX1BPUyIsMF0sWyJSRUxBWV9USFJFQUQiLDBdLFsiUkVMRUFTRSIsMV0sWyJSRUxPQUQiLDBdLFsiUkVNT1ZFIiwwXSxbIlJFTkFNRSIsMV0sWyJSRU9SR0FOSVpFIiwwXSxbIlJFUEFJUiIsMF0sWyJSRVBFQVQiLDFdLFsiUkVQRUFUQUJMRSIsMF0sWyJSRVBMQUNFIiwxXSxbIlJFUExJQ0EiLDBdLFsiUkVQTElDQVMiLDBdLFsiUkVQTElDQVRFX0RPX0RCIiwwXSxbIlJFUExJQ0FURV9ET19UQUJMRSIsMF0sWyJSRVBMSUNBVEVfSUdOT1JFX0RCIiwwXSxbIlJFUExJQ0FURV9JR05PUkVfVEFCTEUiLDBdLFsiUkVQTElDQVRFX1JFV1JJVEVfREIiLDBdLFsiUkVQTElDQVRFX1dJTERfRE9fVEFCTEUiLDBdLFsiUkVQTElDQVRFX1dJTERfSUdOT1JFX1RBQkxFIiwwXSxbIlJFUExJQ0FUSU9OIiwwXSxbIlJFUVVJUkUiLDFdLFsiUkVRVUlSRV9ST1dfRk9STUFUIiwwXSxbIlJFUVVJUkVfVEFCTEVfUFJJTUFSWV9LRVlfQ0hFQ0siLDBdLFsiUkVTRVQiLDBdLFsiUkVTSUdOQUwiLDFdLFsiUkVTT1VSQ0UiLDBdLFsiUkVTUEVDVCIsMF0sWyJSRVNUQVJUIiwwXSxbIlJFU1RPUkUiLDBdLFsiUkVTVFJJQ1QiLDFdLFsiUkVTVU1FIiwwXSxbIlJFVEFJTiIsMF0sWyJSRVRVUk4iLDFdLFsiUkVUVVJORURfU1FMU1RBVEUiLDBdLFsiUkVUVVJOSU5HIiwwXSxbIlJFVFVSTlMiLDBdLFsiUkVVU0UiLDBdLFsiUkVWRVJTRSIsMF0sWyJSRVZPS0UiLDFdLFsiUklHSFQiLDFdLFsiUkxJS0UiLDFdLFsiUk9MRSIsMF0sWyJST0xMQkFDSyIsMF0sWyJST0xMVVAiLDBdLFsiUk9UQVRFIiwwXSxbIlJPVVRJTkUiLDBdLFsiUk9XIiwxXSxbIlJPV1MiLDFdLFsiUk9XX0NPVU5UIiwwXSxbIlJPV19GT1JNQVQiLDBdLFsiUk9XX05VTUJFUiIsMV0sWyJSVFJFRSIsMF0sWyJTMyIsMF0sWyJTQVZFUE9JTlQiLDBdLFsiU0NIRURVTEUiLDBdLFsiU0NIRU1BIiwxXSxbIlNDSEVNQVMiLDFdLFsiU0NIRU1BX05BTUUiLDBdLFsiU0VDT05EIiwwXSxbIlNFQ09OREFSWSIsMF0sWyJTRUNPTkRBUllfRU5HSU5FIiwwXSxbIlNFQ09OREFSWV9FTkdJTkVfQVRUUklCVVRFIiwwXSxbIlNFQ09OREFSWV9MT0FEIiwwXSxbIlNFQ09OREFSWV9VTkxPQUQiLDBdLFsiU0VDT05EX01JQ1JPU0VDT05EIiwxXSxbIlNFQ1VSSVRZIiwwXSxbIlNFTEVDVCIsMV0sWyJTRU5TSVRJVkUiLDFdLFsiU0VQQVJBVE9SIiwxXSxbIlNFUklBTCIsMF0sWyJTRVJJQUxJWkFCTEUiLDBdLFsiU0VSVkVSIiwwXSxbIlNFU1NJT04iLDBdLFsiU0VUIiwxXSxbIlNIQVJFIiwwXSxbIlNIT1ciLDFdLFsiU0hVVERPV04iLDBdLFsiU0lHTkFMIiwxXSxbIlNJR05FRCIsMF0sWyJTSU1QTEUiLDBdLFsiU0tJUCIsMF0sWyJTTEFWRSIsMF0sWyJTTE9XIiwwXSxbIlNNQUxMSU5UIiwxXSxbIlNOQVBTSE9UIiwwXSxbIlNPQ0tFVCIsMF0sWyJTT01FIiwwXSxbIlNPTkFNRSIsMF0sWyJTT1VORFMiLDBdLFsiU09VUkNFIiwwXSxbIlNPVVJDRV9BVVRPX1BPU0lUSU9OIiwwXSxbIlNPVVJDRV9CSU5EIiwwXSxbIlNPVVJDRV9DT01QUkVTU0lPTl9BTEdPUklUSE1TIiwwXSxbIlNPVVJDRV9DT05ORUNUSU9OX0FVVE9fRkFJTE9WRVIiLDBdLFsiU09VUkNFX0NPTk5FQ1RfUkVUUlkiLDBdLFsiU09VUkNFX0RFTEFZIiwwXSxbIlNPVVJDRV9IRUFSVEJFQVRfUEVSSU9EIiwwXSxbIlNPVVJDRV9IT1NUIiwwXSxbIlNPVVJDRV9MT0dfRklMRSIsMF0sWyJTT1VSQ0VfTE9HX1BPUyIsMF0sWyJTT1VSQ0VfUEFTU1dPUkQiLDBdLFsiU09VUkNFX1BPUlQiLDBdLFsiU09VUkNFX1BVQkxJQ19LRVlfUEFUSCIsMF0sWyJTT1VSQ0VfUkVUUllfQ09VTlQiLDBdLFsiU09VUkNFX1NTTCIsMF0sWyJTT1VSQ0VfU1NMX0NBIiwwXSxbIlNPVVJDRV9TU0xfQ0FQQVRIIiwwXSxbIlNPVVJDRV9TU0xfQ0VSVCIsMF0sWyJTT1VSQ0VfU1NMX0NJUEhFUiIsMF0sWyJTT1VSQ0VfU1NMX0NSTCIsMF0sWyJTT1VSQ0VfU1NMX0NSTFBBVEgiLDBdLFsiU09VUkNFX1NTTF9LRVkiLDBdLFsiU09VUkNFX1NTTF9WRVJJRllfU0VSVkVSX0NFUlQiLDBdLFsiU09VUkNFX1RMU19DSVBIRVJTVUlURVMiLDBdLFsiU09VUkNFX1RMU19WRVJTSU9OIiwwXSxbIlNPVVJDRV9VU0VSIiwwXSxbIlNPVVJDRV9aU1REX0NPTVBSRVNTSU9OX0xFVkVMIiwwXSxbIlNQQVRJQUwiLDFdLFsiU1BFQ0lGSUMiLDFdLFsiU1FMIiwxXSxbIlNRTEVYQ0VQVElPTiIsMV0sWyJTUUxTVEFURSIsMV0sWyJTUUxXQVJOSU5HIiwxXSxbIlNRTF9BRlRFUl9HVElEUyIsMF0sWyJTUUxfQUZURVJfTVRTX0dBUFMiLDBdLFsiU1FMX0JFRk9SRV9HVElEUyIsMF0sWyJTUUxfQklHX1JFU1VMVCIsMV0sWyJTUUxfQlVGRkVSX1JFU1VMVCIsMF0sWyJTUUxfQ0FMQ19GT1VORF9ST1dTIiwxXSxbIlNRTF9OT19DQUNIRSIsMF0sWyJTUUxfU01BTExfUkVTVUxUIiwxXSxbIlNRTF9USFJFQUQiLDBdLFsiU1FMX1RTSV9EQVkiLDBdLFsiU1FMX1RTSV9IT1VSIiwwXSxbIlNRTF9UU0lfTUlOVVRFIiwwXSxbIlNRTF9UU0lfTU9OVEgiLDBdLFsiU1FMX1RTSV9RVUFSVEVSIiwwXSxbIlNRTF9UU0lfU0VDT05EIiwwXSxbIlNRTF9UU0lfV0VFSyIsMF0sWyJTUUxfVFNJX1lFQVIiLDBdLFsiU1JJRCIsMF0sWyJTU0wiLDFdLFsiU1RBQ0tFRCIsMF0sWyJTVEFSVCIsMF0sWyJTVEFSVElORyIsMV0sWyJTVEFSVFMiLDBdLFsiU1RBVFNfQVVUT19SRUNBTEMiLDBdLFsiU1RBVFNfUEVSU0lTVEVOVCIsMF0sWyJTVEFUU19TQU1QTEVfUEFHRVMiLDBdLFsiU1RBVFVTIiwwXSxbIlNUT1AiLDBdLFsiU1RPUkFHRSIsMF0sWyJTVE9SRUQiLDFdLFsiU1RSQUlHSFRfSk9JTiIsMV0sWyJTVFJFQU0iLDBdLFsiU1RSSU5HIiwwXSxbIlNVQkNMQVNTX09SSUdJTiIsMF0sWyJTVUJKRUNUIiwwXSxbIlNVQlBBUlRJVElPTiIsMF0sWyJTVUJQQVJUSVRJT05TIiwwXSxbIlNVUEVSIiwwXSxbIlNVU1BFTkQiLDBdLFsiU1dBUFMiLDBdLFsiU1dJVENIRVMiLDBdLFsiU1lTVEVNIiwxXSxbIlRBQkxFIiwxXSxbIlRBQkxFUyIsMF0sWyJUQUJMRVNQQUNFIiwwXSxbIlRBQkxFX0NIRUNLU1VNIiwwXSxbIlRBQkxFX05BTUUiLDBdLFsiVEVNUE9SQVJZIiwwXSxbIlRFTVBUQUJMRSIsMF0sWyJURVJNSU5BVEVEIiwxXSxbIlRFWFQiLDBdLFsiVEhBTiIsMF0sWyJUSEVOIiwxXSxbIlRIUkVBRF9QUklPUklUWSIsMF0sWyJUSUVTIiwwXSxbIlRJTUUiLDBdLFsiVElNRVNUQU1QIiwwXSxbIlRJTUVTVEFNUEFERCIsMF0sWyJUSU1FU1RBTVBESUZGIiwwXSxbIlRJTllCTE9CIiwxXSxbIlRJTllJTlQiLDFdLFsiVElOWVRFWFQiLDFdLFsiVExTIiwwXSxbIlRPIiwxXSxbIlRSQUlMSU5HIiwxXSxbIlRSQU5TQUNUSU9OIiwwXSxbIlRSSUdHRVIiLDFdLFsiVFJJR0dFUlMiLDBdLFsiVFJVRSIsMV0sWyJUUlVOQ0FURSIsMF0sWyJUWVBFIiwwXSxbIlRZUEVTIiwwXSxbIlVOQk9VTkRFRCIsMF0sWyJVTkNPTU1JVFRFRCIsMF0sWyJVTkRFRklORUQiLDBdLFsiVU5ETyIsMV0sWyJVTkRPRklMRSIsMF0sWyJVTkRPX0JVRkZFUl9TSVpFIiwwXSxbIlVOSUNPREUiLDBdLFsiVU5JTlNUQUxMIiwwXSxbIlVOSU9OIiwxXSxbIlVOSVFVRSIsMV0sWyJVTktOT1dOIiwwXSxbIlVOTE9DSyIsMV0sWyJVTlJFR0lTVEVSIiwwXSxbIlVOU0lHTkVEIiwxXSxbIlVOVElMIiwwXSxbIlVQREFURSIsMV0sWyJVUEdSQURFIiwwXSxbIlVSTCIsMF0sWyJVU0FHRSIsMV0sWyJVU0UiLDFdLFsiVVNFUiIsMF0sWyJVU0VSX1JFU09VUkNFUyIsMF0sWyJVU0VfRlJNIiwwXSxbIlVTSU5HIiwxXSxbIlVUQ19EQVRFIiwxXSxbIlVUQ19USU1FIiwxXSxbIlVUQ19USU1FU1RBTVAiLDFdLFsiVkFMSURBVElPTiIsMF0sWyJWQUxVRSIsMF0sWyJWQUxVRVMiLDFdLFsiVkFSQklOQVJZIiwxXSxbIlZBUkNIQVIiLDFdLFsiVkFSQ0hBUkFDVEVSIiwxXSxbIlZBUklBQkxFUyIsMF0sWyJWQVJZSU5HIiwxXSxbIlZDUFUiLDBdLFsiVklFVyIsMF0sWyJWSVJUVUFMIiwxXSxbIlZJU0lCTEUiLDBdLFsiV0FJVCIsMF0sWyJXQVJOSU5HUyIsMF0sWyJXRUVLIiwwXSxbIldFSUdIVF9TVFJJTkciLDBdLFsiV0hFTiIsMV0sWyJXSEVSRSIsMV0sWyJXSElMRSIsMV0sWyJXSU5ET1ciLDFdLFsiV0lUSCIsMV0sWyJXSVRIT1VUIiwwXSxbIldPUksiLDBdLFsiV1JBUFBFUiIsMF0sWyJXUklURSIsMV0sWyJYNTA5IiwwXSxbIlhBIiwwXSxbIlhJRCIsMF0sWyJYTUwiLDBdLFsiWE9SIiwxXSxbIllFQVIiLDBdLFsiWUVBUl9NT05USCIsMV0sWyJaRVJPRklMTCIsMV0sWyJaT05FIiwwXV0nLAogICAgICAgICAgICAgJyRbKl0nIGNvbHVtbnMgKGB3b3JkYCB2YXJjaGFyKDEyOCkgY2hhcmFjdGVyIHNldCB1dGY4bWI0IHBhdGggJyRbMF0nLCBgcmVzZXJ2ZWRgIGludCBwYXRoICckWzFdJykpIGBqYDsKClBLAwQKAAAAAADcgjpYDrzbTGAAAABgAAAAIgAAAC92aWV3L0tFWV9DT0xVTU5fVVNBR0UuV0gwREVRLm1ldGEjbjpLRVlfQ09MVU1OX1VTQUdFCiE8bWQ+IFtudWxsLCAxNzg5OTQ4NDA1LCBbMzIsIDMyLCA0ODcxLCA0ODcxLCA0ODc0XSwgW18sIEQsIFEsIEQsIDtdLCAwLCAwXQpQSwMECgAAAAAA3II6WBMdr/AKEwAAChMAACEAAAAvdmlldy9LRVlfQ09MVU1OX1VTQUdFLldIMERFUS5zcWxjcmVhdGUgdmlldyBLRVlfQ09MVU1OX1VTQUdFIGFzCnNlbGVjdCBgY2F0YC5gbmFtZWAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYENPTlNUUkFJTlRfQ0FUQUxPR2AsCiAgICAgICBgc2NoYC5gbmFtZWAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYENPTlNUUkFJTlRfU0NIRU1BYCwKICAgICAgIGBjb25zdHJhaW50c2AuYENPTlNUUkFJTlRfTkFNRWAgICAgICAgICAgICAgICBBUyBgQ09OU1RSQUlOVF9OQU1FYCwKICAgICAgIGBjYXRgLmBuYW1lYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgVEFCTEVfQ0FUQUxPR2AsCiAgICAgICBgc2NoYC5gbmFtZWAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYFRBQkxFX1NDSEVNQWAsCiAgICAgICBgdGJsYC5gbmFtZWAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYFRBQkxFX05BTUVgLAogICAgICAgKGBjb2xgLmBuYW1lYCBjb2xsYXRlIHV0ZjhtYjNfdG9sb3dlcl9jaSkgICAgIEFTIGBDT0xVTU5fTkFNRWAsCiAgICAgICBgY29uc3RyYWludHNgLmBPUkRJTkFMX1BPU0lUSU9OYCAgICAgICAgICAgICAgQVMgYE9SRElOQUxfUE9TSVRJT05gLAogICAgICAgYGNvbnN0cmFpbnRzYC5gUE9TSVRJT05fSU5fVU5JUVVFX0NPTlNUUkFJTlRgIEFTIGBQT1NJVElPTl9JTl9VTklRVUVfQ09OU1RSQUlOVGAsCiAgICAgICBgY29uc3RyYWludHNgLmBSRUZFUkVOQ0VEX1RBQkxFX1NDSEVNQWAgICAgICAgQVMgYFJFRkVSRU5DRURfVEFCTEVfU0NIRU1BYCwKICAgICAgIGBjb25zdHJhaW50c2AuYFJFRkVSRU5DRURfVEFCTEVfTkFNRWAgICAgICAgICBBUyBgUkVGRVJFTkNFRF9UQUJMRV9OQU1FYCwKICAgICAgIGBjb25zdHJhaW50c2AuYFJFRkVSRU5DRURfQ09MVU1OX05BTUVgICAgICAgICBBUyBgUkVGRVJFTkNFRF9DT0xVTU5fTkFNRWAKZnJvbSAoKChgbXlzcWxgLmB0YWJsZXNgIGB0YmxgIGpvaW4gYG15c3FsYC5gc2NoZW1hdGFgIGBzY2hgCiAgICAgICAgb24gKChgdGJsYC5gc2NoZW1hX2lkYCA9IGBzY2hgLmBpZGApKSkgam9pbiBgbXlzcWxgLmBjYXRhbG9nc2AgYGNhdGAKICAgICAgIG9uICgoYGNhdGAuYGlkYCA9IGBzY2hgLmBjYXRhbG9nX2lkYCkpKSBqb2luIChsYXRlcmFsIChzZWxlY3QgYGlkeGAuYG5hbWVgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBDT05TVFJBSU5UX05BTUVgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgaWN1YC5gb3JkaW5hbF9wb3NpdGlvbmAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYE9SRElOQUxfUE9TSVRJT05gLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOVUxMICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYFBPU0lUSU9OX0lOX1VOSVFVRV9DT05TVFJBSU5UYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTlVMTCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBSRUZFUkVOQ0VEX1RBQkxFX1NDSEVNQWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5VTEwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgUkVGRVJFTkNFRF9UQUJMRV9OQU1FYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTlVMTCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBSRUZFUkVOQ0VEX0NPTFVNTl9OQU1FYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYGljdWAuYGNvbHVtbl9pZGAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBjb2x1bW5faWRgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKDAgPD4gYGlkeGAuYGhpZGRlbmApIG9yICgwIDw+IGBpY3VgLmBoaWRkZW5gKSkgQVMgYEhJRERFTmAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tIChgbXlzcWxgLmBpbmRleGVzYCBgaWR4YCBqb2luIGBteXNxbGAuYGluZGV4X2NvbHVtbl91c2FnZWAgYGljdWAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbiAoKGBpY3VgLmBpbmRleF9pZGAgPSBgaWR4YC5gaWRgKSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlcmUgKChgaWR4YC5gdGFibGVfaWRgID0gYHRibGAuYGlkYCkgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChgaWR4YC5gdHlwZWAgaW4gKCdQUklNQVJZJywgJ1VOSVFVRScpKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmlvbiBhbGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3QgKGBma2AuYG5hbWVgIGNvbGxhdGUgdXRmOG1iM190b2xvd2VyX2NpKSBBUyBgQ09OU1RSQUlOVF9OQU1FYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYGZrY3VgLmBvcmRpbmFsX3Bvc2l0aW9uYCAgICAgICAgICAgICAgICBBUyBgT1JESU5BTF9QT1NJVElPTmAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBma2N1YC5gb3JkaW5hbF9wb3NpdGlvbmAgICAgICAgICAgICAgICAgQVMgYFBPU0lUSU9OX0lOX1VOSVFVRV9DT05TVFJBSU5UYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYGZrYC5gcmVmZXJlbmNlZF90YWJsZV9zY2hlbWFgICAgICAgICAgICBBUyBgUkVGRVJFTkNFRF9UQUJMRV9TQ0hFTUFgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgZmtgLmByZWZlcmVuY2VkX3RhYmxlX25hbWVgICAgICAgICAgICAgIEFTIGBSRUZFUkVOQ0VEX1RBQkxFX05BTUVgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgZmtjdWAuYHJlZmVyZW5jZWRfY29sdW1uX25hbWVgICAgICAgICAgIEFTIGBSRUZFUkVOQ0VEX0NPTFVNTl9OQU1FYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYGZrY3VgLmBjb2x1bW5faWRgICAgICAgICAgICAgICAgICAgICAgICBBUyBgY29sdW1uX2lkYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgSElEREVOYAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gKGBteXNxbGAuYGZvcmVpZ25fa2V5c2AgYGZrYCBqb2luIGBteXNxbGAuYGZvcmVpZ25fa2V5X2NvbHVtbl91c2FnZWAgYGZrY3VgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb24gKChgZmtjdWAuYGZvcmVpZ25fa2V5X2lkYCA9IGBma2AuYGlkYCkpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZXJlIChgZmtgLmB0YWJsZV9pZGAgPSBgdGJsYC5gaWRgKSkgYGNvbnN0cmFpbnRzYCBqb2luIGBteXNxbGAuYGNvbHVtbnNgIGBjb2xgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb24gKChgY29uc3RyYWludHNgLmBjb2x1bW5faWRgID0gYGNvbGAuYGlkYCkpKSkKd2hlcmUgKCgwIDw+IGNhbl9hY2Nlc3NfY29sdW1uKGBzY2hgLmBuYW1lYCwgYHRibGAuYG5hbWVgLCBgY29sYC5gbmFtZWApKSBhbmQgKDAgPD4gaXNfdmlzaWJsZV9kZF9vYmplY3QoYHRibGAuYGhpZGRlbmAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoYGNvbGAuYGhpZGRlbmAgbm90IGluICgnVmlzaWJsZScsICdVc2VyJykpIG9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCA8PiBgY29uc3RyYWludHNgLmBISURERU5gKSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBjb2xgLmBvcHRpb25zYCkpKTsKClBLAwQKAAAAAADcgjpYb5+lmlkAAABZAAAAHAAAAC92aWV3L1BBUkFNRVRFUlMuNnExQk9BLm1ldGEjbjpQQVJBTUVURVJTCiE8bWQ+IFtudWxsLCA0MTMyNDUyMDcsIFsyNiwgMjYsIDQzNTQsIDQzNTQsIDQzNTddLCBbXywgRCwgUSwgRCwgO10sIDAsIDBdClBLAwQKAAAAAADcgjpYAF69PgURAAAFEQAAGwAAAC92aWV3L1BBUkFNRVRFUlMuNnExQk9BLnNxbGNyZWF0ZSB2aWV3IFBBUkFNRVRFUlMgYXMKc2VsZWN0IGBjYXRgLmBuYW1lYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBTUEVDSUZJQ19DQVRBTE9HYCwKICAgICAgIGBzY2hgLmBuYW1lYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBTUEVDSUZJQ19TQ0hFTUFgLAogICAgICAgYHJ0bmAuYG5hbWVgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYFNQRUNJRklDX05BTUVgLAogICAgICAgaWYoKGBydG5gLmB0eXBlYCA9ICdGVU5DVElPTicpLCAoYHBybWAuYG9yZGluYWxfcG9zaXRpb25gIC0gMSksIGBwcm1gLmBvcmRpbmFsX3Bvc2l0aW9uYCkgQVMgYE9SRElOQUxfUE9TSVRJT05gLAogICAgICAgaWYoKChgcnRuYC5gdHlwZWAgPSAnRlVOQ1RJT04nKSBhbmQgKGBwcm1gLmBvcmRpbmFsX3Bvc2l0aW9uYCA9IDEpKSwgTlVMTCwgYHBybWAuYG1vZGVgKSAgQVMgYFBBUkFNRVRFUl9NT0RFYCwKICAgICAgIGlmKCgoYHJ0bmAuYHR5cGVgID0gJ0ZVTkNUSU9OJykgYW5kIChgcHJtYC5gb3JkaW5hbF9wb3NpdGlvbmAgPSAxKSksIE5VTEwsIGBwcm1gLmBuYW1lYCkgIEFTIGBQQVJBTUVURVJfTkFNRWAsCiAgICAgICBzdWJzdHJpbmdfaW5kZXgoc3Vic3RyaW5nX2luZGV4KGBwcm1gLmBkYXRhX3R5cGVfdXRmOGAsICcoJywgMSksICcgJywgMSkgICAgICAgICAgICAgICAgICBBUyBgREFUQV9UWVBFYCwKICAgICAgIGludGVybmFsX2RkX2NoYXJfbGVuZ3RoKGBwcm1gLmBkYXRhX3R5cGVgLCBgcHJtYC5gY2hhcl9sZW5ndGhgLCBgY29sYC5gbmFtZWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgQ0hBUkFDVEVSX01BWElNVU1fTEVOR1RIYCwKICAgICAgIGludGVybmFsX2RkX2NoYXJfbGVuZ3RoKGBwcm1gLmBkYXRhX3R5cGVgLCBgcHJtYC5gY2hhcl9sZW5ndGhgLCBgY29sYC5gbmFtZWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgQ0hBUkFDVEVSX09DVEVUX0xFTkdUSGAsCiAgICAgICBgcHJtYC5gbnVtZXJpY19wcmVjaXNpb25gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgTlVNRVJJQ19QUkVDSVNJT05gLAogICAgICAgaWYoKGBwcm1gLmBudW1lcmljX3ByZWNpc2lvbmAgaXMgbnVsbCksIE5VTEwsIGlmbnVsbChgcHJtYC5gbnVtZXJpY19zY2FsZWAsIDApKSAgICAgICAgICAgQVMgYE5VTUVSSUNfU0NBTEVgLAogICAgICAgYHBybWAuYGRhdGV0aW1lX3ByZWNpc2lvbmAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYERBVEVUSU1FX1BSRUNJU0lPTmAsCiAgICAgICAoY2FzZSBgcHJtYC5gZGF0YV90eXBlYAogICAgICAgICAgICB3aGVuICdNWVNRTF9UWVBFX1NUUklORycgdGhlbiBpZigoYGNzYC5gbmFtZWAgPSAnYmluYXJ5JyksIE5VTEwsIGBjc2AuYG5hbWVgKQogICAgICAgICAgICB3aGVuICdNWVNRTF9UWVBFX1ZBUl9TVFJJTkcnIHRoZW4gaWYoKGBjc2AuYG5hbWVgID0gJ2JpbmFyeScpLCBOVUxMLCBgY3NgLmBuYW1lYCkKICAgICAgICAgICAgd2hlbiAnTVlTUUxfVFlQRV9WQVJDSEFSJyB0aGVuIGlmKChgY3NgLmBuYW1lYCA9ICdiaW5hcnknKSwgTlVMTCwgYGNzYC5gbmFtZWApCiAgICAgICAgICAgIHdoZW4gJ01ZU1FMX1RZUEVfVElOWV9CTE9CJyB0aGVuIGlmKChgY3NgLmBuYW1lYCA9ICdiaW5hcnknKSwgTlVMTCwgYGNzYC5gbmFtZWApCiAgICAgICAgICAgIHdoZW4gJ01ZU1FMX1RZUEVfTUVESVVNX0JMT0InIHRoZW4gaWYoKGBjc2AuYG5hbWVgID0gJ2JpbmFyeScpLCBOVUxMLCBgY3NgLmBuYW1lYCkKICAgICAgICAgICAgd2hlbiAnTVlTUUxfVFlQRV9CTE9CJyB0aGVuIGlmKChgY3NgLmBuYW1lYCA9ICdiaW5hcnknKSwgTlVMTCwgYGNzYC5gbmFtZWApCiAgICAgICAgICAgIHdoZW4gJ01ZU1FMX1RZUEVfTE9OR19CTE9CJyB0aGVuIGlmKChgY3NgLmBuYW1lYCA9ICdiaW5hcnknKSwgTlVMTCwgYGNzYC5gbmFtZWApCiAgICAgICAgICAgIHdoZW4gJ01ZU1FMX1RZUEVfRU5VTScgdGhlbiBpZigoYGNzYC5gbmFtZWAgPSAnYmluYXJ5JyksIE5VTEwsIGBjc2AuYG5hbWVgKQogICAgICAgICAgICB3aGVuICdNWVNRTF9UWVBFX1NFVCcgdGhlbiBpZigoYGNzYC5gbmFtZWAgPSAnYmluYXJ5JyksIE5VTEwsIGBjc2AuYG5hbWVgKQogICAgICAgICAgICBlbHNlIE5VTEwgZW5kKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYENIQVJBQ1RFUl9TRVRfTkFNRWAsCiAgICAgICAoY2FzZSBgcHJtYC5gZGF0YV90eXBlYAogICAgICAgICAgICB3aGVuICdNWVNRTF9UWVBFX1NUUklORycgdGhlbiBpZigoYGNzYC5gbmFtZWAgPSAnYmluYXJ5JyksIE5VTEwsIGBjb2xgLmBuYW1lYCkKICAgICAgICAgICAgd2hlbiAnTVlTUUxfVFlQRV9WQVJfU1RSSU5HJyB0aGVuIGlmKChgY3NgLmBuYW1lYCA9ICdiaW5hcnknKSwgTlVMTCwgYGNvbGAuYG5hbWVgKQogICAgICAgICAgICB3aGVuICdNWVNRTF9UWVBFX1ZBUkNIQVInIHRoZW4gaWYoKGBjc2AuYG5hbWVgID0gJ2JpbmFyeScpLCBOVUxMLCBgY29sYC5gbmFtZWApCiAgICAgICAgICAgIHdoZW4gJ01ZU1FMX1RZUEVfVElOWV9CTE9CJyB0aGVuIGlmKChgY3NgLmBuYW1lYCA9ICdiaW5hcnknKSwgTlVMTCwgYGNvbGAuYG5hbWVgKQogICAgICAgICAgICB3aGVuICdNWVNRTF9UWVBFX01FRElVTV9CTE9CJyB0aGVuIGlmKChgY3NgLmBuYW1lYCA9ICdiaW5hcnknKSwgTlVMTCwgYGNvbGAuYG5hbWVgKQogICAgICAgICAgICB3aGVuICdNWVNRTF9UWVBFX0JMT0InIHRoZW4gaWYoKGBjc2AuYG5hbWVgID0gJ2JpbmFyeScpLCBOVUxMLCBgY29sYC5gbmFtZWApCiAgICAgICAgICAgIHdoZW4gJ01ZU1FMX1RZUEVfTE9OR19CTE9CJyB0aGVuIGlmKChgY3NgLmBuYW1lYCA9ICdiaW5hcnknKSwgTlVMTCwgYGNvbGAuYG5hbWVgKQogICAgICAgICAgICB3aGVuICdNWVNRTF9UWVBFX0VOVU0nIHRoZW4gaWYoKGBjc2AuYG5hbWVgID0gJ2JpbmFyeScpLCBOVUxMLCBgY29sYC5gbmFtZWApCiAgICAgICAgICAgIHdoZW4gJ01ZU1FMX1RZUEVfU0VUJyB0aGVuIGlmKChgY3NgLmBuYW1lYCA9ICdiaW5hcnknKSwgTlVMTCwgYGNvbGAuYG5hbWVgKQogICAgICAgICAgICBlbHNlIE5VTEwgZW5kKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYENPTExBVElPTl9OQU1FYCwKICAgICAgIGBwcm1gLmBkYXRhX3R5cGVfdXRmOGAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBEVERfSURFTlRJRklFUmAsCiAgICAgICBgcnRuYC5gdHlwZWAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgUk9VVElORV9UWVBFYApmcm9tICgoKCgoYG15c3FsYC5gcGFyYW1ldGVyc2AgYHBybWAgam9pbiBgbXlzcWxgLmByb3V0aW5lc2AgYHJ0bmAKICAgICAgICAgIG9uICgoYHBybWAuYHJvdXRpbmVfaWRgID0gYHJ0bmAuYGlkYCkpKSBqb2luIGBteXNxbGAuYHNjaGVtYXRhYCBgc2NoYAogICAgICAgICBvbiAoKGBydG5gLmBzY2hlbWFfaWRgID0gYHNjaGAuYGlkYCkpKSBqb2luIGBteXNxbGAuYGNhdGFsb2dzYCBgY2F0YAogICAgICAgIG9uICgoYGNhdGAuYGlkYCA9IGBzY2hgLmBjYXRhbG9nX2lkYCkpKSBqb2luIGBteXNxbGAuYGNvbGxhdGlvbnNgIGBjb2xgCiAgICAgICBvbiAoKGBwcm1gLmBjb2xsYXRpb25faWRgID0gYGNvbGAuYGlkYCkpKSBqb2luIGBteXNxbGAuYGNoYXJhY3Rlcl9zZXRzYCBgY3NgCiAgICAgIG9uICgoYGNvbGAuYGNoYXJhY3Rlcl9zZXRfaWRgID0gYGNzYC5gaWRgKSkpCndoZXJlICgwIDw+IGNhbl9hY2Nlc3Nfcm91dGluZShgc2NoYC5gbmFtZWAsIGBydG5gLmBuYW1lYCwgYHJ0bmAuYHR5cGVgLCBgcnRuYC5gZGVmaW5lcmAsIGZhbHNlKSk7CgpQSwMECgAAAAAA3II6WORq1TBeAAAAXgAAABwAAAAvdmlldy9QQVJUSVRJT05TLnlUWlRIdy5tZXRhI246UEFSVElUSU9OUwohPG1kPiBbbnVsbCwgLTE1NTcyODkyNjAsIFsyNiwgMjYsIDEyMDY3LCAxMjA2NywgMTIwNzBdLCBbXywgRCwgUSwgRCwgO10sIDAsIDBdClBLAwQKAAAAAADcgjpY0Mm9VCYvAAAmLwAAGwAAAC92aWV3L1BBUlRJVElPTlMueVRaVEh3LnNxbGNyZWF0ZSB2aWV3IFBBUlRJVElPTlMgYXMKc2VsZWN0IGBjYXRgLmBuYW1lYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYFRBQkxFX0NBVEFMT0dgLAogICAgICAgYHNjaGAuYG5hbWVgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgVEFCTEVfU0NIRU1BYCwKICAgICAgIGB0YmxgLmBuYW1lYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYFRBQkxFX05BTUVgLAogICAgICAgYHBhcnRgLmBuYW1lYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgUEFSVElUSU9OX05BTUVgLAogICAgICAgYHN1Yl9wYXJ0YC5gbmFtZWAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgU1VCUEFSVElUSU9OX05BTUVgLAogICAgICAgKGBwYXJ0YC5gbnVtYmVyYCArIDEpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgUEFSVElUSU9OX09SRElOQUxfUE9TSVRJT05gLAogICAgICAgKGBzdWJfcGFydGAuYG51bWJlcmAgKyAxKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgU1VCUEFSVElUSU9OX09SRElOQUxfUE9TSVRJT05gLAogICAgICAgKGNhc2UgYHRibGAuYHBhcnRpdGlvbl90eXBlYAogICAgICAgICAgICB3aGVuICdIQVNIJyB0aGVuICdIQVNIJwogICAgICAgICAgICB3aGVuICdSQU5HRScgdGhlbiAnUkFOR0UnCiAgICAgICAgICAgIHdoZW4gJ0xJU1QnIHRoZW4gJ0xJU1QnCiAgICAgICAgICAgIHdoZW4gJ0FVVE8nIHRoZW4gJ0FVVE8nCiAgICAgICAgICAgIHdoZW4gJ0tFWV81MScgdGhlbiAnS0VZJwogICAgICAgICAgICB3aGVuICdLRVlfNTUnIHRoZW4gJ0tFWScKICAgICAgICAgICAgd2hlbiAnTElORUFSX0tFWV81MScgdGhlbiAnTElORUFSIEtFWScKICAgICAgICAgICAgd2hlbiAnTElORUFSX0tFWV81NScgdGhlbiAnTElORUFSIEtFWScKICAgICAgICAgICAgd2hlbiAnTElORUFSX0hBU0gnIHRoZW4gJ0xJTkVBUiBIQVNIJwogICAgICAgICAgICB3aGVuICdSQU5HRV9DT0xVTU5TJyB0aGVuICdSQU5HRSBDT0xVTU5TJwogICAgICAgICAgICB3aGVuICdMSVNUX0NPTFVNTlMnIHRoZW4gJ0xJU1QgQ09MVU1OUycKICAgICAgICAgICAgZWxzZSBOVUxMIGVuZCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYFBBUlRJVElPTl9NRVRIT0RgLAogICAgICAgKGNhc2UgYHRibGAuYHN1YnBhcnRpdGlvbl90eXBlYAogICAgICAgICAgICB3aGVuICdIQVNIJyB0aGVuICdIQVNIJwogICAgICAgICAgICB3aGVuICdSQU5HRScgdGhlbiAnUkFOR0UnCiAgICAgICAgICAgIHdoZW4gJ0xJU1QnIHRoZW4gJ0xJU1QnCiAgICAgICAgICAgIHdoZW4gJ0FVVE8nIHRoZW4gJ0FVVE8nCiAgICAgICAgICAgIHdoZW4gJ0tFWV81MScgdGhlbiAnS0VZJwogICAgICAgICAgICB3aGVuICdLRVlfNTUnIHRoZW4gJ0tFWScKICAgICAgICAgICAgd2hlbiAnTElORUFSX0tFWV81MScgdGhlbiAnTElORUFSIEtFWScKICAgICAgICAgICAgd2hlbiAnTElORUFSX0tFWV81NScgdGhlbiAnTElORUFSIEtFWScKICAgICAgICAgICAgd2hlbiAnTElORUFSX0hBU0gnIHRoZW4gJ0xJTkVBUiBIQVNIJwogICAgICAgICAgICB3aGVuICdSQU5HRV9DT0xVTU5TJyB0aGVuICdSQU5HRSBDT0xVTU5TJwogICAgICAgICAgICB3aGVuICdMSVNUX0NPTFVNTlMnIHRoZW4gJ0xJU1QgQ09MVU1OUycKICAgICAgICAgICAgZWxzZSBOVUxMIGVuZCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYFNVQlBBUlRJVElPTl9NRVRIT0RgLAogICAgICAgYHRibGAuYHBhcnRpdGlvbl9leHByZXNzaW9uX3V0ZjhgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgUEFSVElUSU9OX0VYUFJFU1NJT05gLAogICAgICAgYHRibGAuYHN1YnBhcnRpdGlvbl9leHByZXNzaW9uX3V0ZjhgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgU1VCUEFSVElUSU9OX0VYUFJFU1NJT05gLAogICAgICAgYHBhcnRgLmBkZXNjcmlwdGlvbl91dGY4YCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgUEFSVElUSU9OX0RFU0NSSVBUSU9OYCwKICAgICAgIGludGVybmFsX3RhYmxlX3Jvd3MoYHNjaGAuYG5hbWVgLCBgdGJsYC5gbmFtZWAsIGlmKChgdGJsYC5gcGFydGl0aW9uX3R5cGVgIGlzIG51bGwpLCBgdGJsYC5gZW5naW5lYCwgJycpLAogICAgICAgICAgICAgICAgICAgICAgICAgICBgdGJsYC5gc2VfcHJpdmF0ZV9pZGAsIChgdGJsYC5gaGlkZGVuYCA8PiAnVmlzaWJsZScpLCBpZigoYHN1Yl9wYXJ0YC5gbmFtZWAgaXMgbnVsbCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKChgcGFydGAuYG5hbWVgIGlzIG51bGwpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgdGJsYC5gc2VfcHJpdmF0ZV9kYXRhYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYHBhcnRfdHNgLmBzZV9wcml2YXRlX2RhdGFgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYHN1Yl9wYXJ0X3RzYC5gc2VfcHJpdmF0ZV9kYXRhYCksIDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmbnVsbChgc3ViX3BhcnRgLmBuYW1lYCwgYHBhcnRgLmBuYW1lYCkpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBUQUJMRV9ST1dTYCwKICAgICAgIGludGVybmFsX2F2Z19yb3dfbGVuZ3RoKGBzY2hgLmBuYW1lYCwgYHRibGAuYG5hbWVgLCBpZigoYHRibGAuYHBhcnRpdGlvbl90eXBlYCBpcyBudWxsKSwgYHRibGAuYGVuZ2luZWAsICcnKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGB0YmxgLmBzZV9wcml2YXRlX2lkYCwgKGB0YmxgLmBoaWRkZW5gIDw+ICdWaXNpYmxlJyksIGlmKChgc3ViX3BhcnRgLmBuYW1lYCBpcyBudWxsKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKChgcGFydGAuYG5hbWVgIGlzIG51bGwpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYHRibGAuYHNlX3ByaXZhdGVfZGF0YWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgcGFydF90c2AuYHNlX3ByaXZhdGVfZGF0YWApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYHN1Yl9wYXJ0X3RzYC5gc2VfcHJpdmF0ZV9kYXRhYCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLCAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWZudWxsKGBzdWJfcGFydGAuYG5hbWVgLCBgcGFydGAuYG5hbWVgKSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgQVZHX1JPV19MRU5HVEhgLAogICAgICAgaW50ZXJuYWxfZGF0YV9sZW5ndGgoYHNjaGAuYG5hbWVgLCBgdGJsYC5gbmFtZWAsIGlmKChgdGJsYC5gcGFydGl0aW9uX3R5cGVgIGlzIG51bGwpLCBgdGJsYC5gZW5naW5lYCwgJycpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYHRibGAuYHNlX3ByaXZhdGVfaWRgLCAoYHRibGAuYGhpZGRlbmAgPD4gJ1Zpc2libGUnKSwgaWYoKGBzdWJfcGFydGAuYG5hbWVgIGlzIG51bGwpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoKGBwYXJ0YC5gbmFtZWAgaXMgbnVsbCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgdGJsYC5gc2VfcHJpdmF0ZV9kYXRhYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBwYXJ0X3RzYC5gc2VfcHJpdmF0ZV9kYXRhYCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgc3ViX3BhcnRfdHNgLmBzZV9wcml2YXRlX2RhdGFgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAsIDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZm51bGwoYHN1Yl9wYXJ0YC5gbmFtZWAsIGBwYXJ0YC5gbmFtZWApKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBEQVRBX0xFTkdUSGAsCiAgICAgICBpbnRlcm5hbF9tYXhfZGF0YV9sZW5ndGgoYHNjaGAuYG5hbWVgLCBgdGJsYC5gbmFtZWAsIGlmKChgdGJsYC5gcGFydGl0aW9uX3R5cGVgIGlzIG51bGwpLCBgdGJsYC5gZW5naW5lYCwgJycpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGB0YmxgLmBzZV9wcml2YXRlX2lkYCwgKGB0YmxgLmBoaWRkZW5gIDw+ICdWaXNpYmxlJyksIGlmKChgc3ViX3BhcnRgLmBuYW1lYCBpcyBudWxsKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigoYHBhcnRgLmBuYW1lYCBpcyBudWxsKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgdGJsYC5gc2VfcHJpdmF0ZV9kYXRhYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgcGFydF90c2AuYHNlX3ByaXZhdGVfZGF0YWApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBzdWJfcGFydF90c2AuYHNlX3ByaXZhdGVfZGF0YWApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAsIDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWZudWxsKGBzdWJfcGFydGAuYG5hbWVgLCBgcGFydGAuYG5hbWVgKSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBNQVhfREFUQV9MRU5HVEhgLAogICAgICAgaW50ZXJuYWxfaW5kZXhfbGVuZ3RoKGBzY2hgLmBuYW1lYCwgYHRibGAuYG5hbWVgLCBpZigoYHRibGAuYHBhcnRpdGlvbl90eXBlYCBpcyBudWxsKSwgYHRibGAuYGVuZ2luZWAsICcnKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgdGJsYC5gc2VfcHJpdmF0ZV9pZGAsIChgdGJsYC5gaGlkZGVuYCA8PiAnVmlzaWJsZScpLCBpZigoYHN1Yl9wYXJ0YC5gbmFtZWAgaXMgbnVsbCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoKGBwYXJ0YC5gbmFtZWAgaXMgbnVsbCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYHRibGAuYHNlX3ByaXZhdGVfZGF0YWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYHBhcnRfdHNgLmBzZV9wcml2YXRlX2RhdGFgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgc3ViX3BhcnRfdHNgLmBzZV9wcml2YXRlX2RhdGFgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLCAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmbnVsbChgc3ViX3BhcnRgLmBuYW1lYCwgYHBhcnRgLmBuYW1lYCkpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgSU5ERVhfTEVOR1RIYCwKICAgICAgIGludGVybmFsX2RhdGFfZnJlZShgc2NoYC5gbmFtZWAsIGB0YmxgLmBuYW1lYCwgaWYoKGB0YmxgLmBwYXJ0aXRpb25fdHlwZWAgaXMgbnVsbCksIGB0YmxgLmBlbmdpbmVgLCAnJyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgYHRibGAuYHNlX3ByaXZhdGVfaWRgLCAoYHRibGAuYGhpZGRlbmAgPD4gJ1Zpc2libGUnKSwgaWYoKGBzdWJfcGFydGAuYG5hbWVgIGlzIG51bGwpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKChgcGFydGAuYG5hbWVgIGlzIG51bGwpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGB0YmxgLmBzZV9wcml2YXRlX2RhdGFgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBwYXJ0X3RzYC5gc2VfcHJpdmF0ZV9kYXRhYCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYHN1Yl9wYXJ0X3RzYC5gc2VfcHJpdmF0ZV9kYXRhYCksIDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgMCwKICAgICAgICAgICAgICAgICAgICAgICAgICBpZm51bGwoYHN1Yl9wYXJ0YC5gbmFtZWAsIGBwYXJ0YC5gbmFtZWApKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYERBVEFfRlJFRWAsCiAgICAgICBgdGJsYC5gY3JlYXRlZGAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBDUkVBVEVfVElNRWAsCiAgICAgICBpbnRlcm5hbF91cGRhdGVfdGltZShgc2NoYC5gbmFtZWAsIGB0YmxgLmBuYW1lYCwgaWYoKGB0YmxgLmBwYXJ0aXRpb25fdHlwZWAgaXMgbnVsbCksIGB0YmxgLmBlbmdpbmVgLCAnJyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgdGJsYC5gc2VfcHJpdmF0ZV9pZGAsIChgdGJsYC5gaGlkZGVuYCA8PiAnVmlzaWJsZScpLCBpZigoYHN1Yl9wYXJ0YC5gbmFtZWAgaXMgbnVsbCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigoYHBhcnRgLmBuYW1lYCBpcyBudWxsKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGB0YmxgLmBzZV9wcml2YXRlX2RhdGFgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYHBhcnRfdHNgLmBzZV9wcml2YXRlX2RhdGFgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBzdWJfcGFydF90c2AuYHNlX3ByaXZhdGVfZGF0YWApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMCwgMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmbnVsbChgc3ViX3BhcnRgLmBuYW1lYCwgYHBhcnRgLmBuYW1lYCkpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYFVQREFURV9USU1FYCwKICAgICAgIGludGVybmFsX2NoZWNrX3RpbWUoYHNjaGAuYG5hbWVgLCBgdGJsYC5gbmFtZWAsIGlmKChgdGJsYC5gcGFydGl0aW9uX3R5cGVgIGlzIG51bGwpLCBgdGJsYC5gZW5naW5lYCwgJycpLAogICAgICAgICAgICAgICAgICAgICAgICAgICBgdGJsYC5gc2VfcHJpdmF0ZV9pZGAsIChgdGJsYC5gaGlkZGVuYCA8PiAnVmlzaWJsZScpLCBpZigoYHN1Yl9wYXJ0YC5gbmFtZWAgaXMgbnVsbCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKChgcGFydGAuYG5hbWVgIGlzIG51bGwpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgdGJsYC5gc2VfcHJpdmF0ZV9kYXRhYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYHBhcnRfdHNgLmBzZV9wcml2YXRlX2RhdGFgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYHN1Yl9wYXJ0X3RzYC5gc2VfcHJpdmF0ZV9kYXRhYCksIDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmbnVsbChgc3ViX3BhcnRgLmBuYW1lYCwgYHBhcnRgLmBuYW1lYCkpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBDSEVDS19USU1FYCwKICAgICAgIGludGVybmFsX2NoZWNrc3VtKGBzY2hgLmBuYW1lYCwgYHRibGAuYG5hbWVgLCBpZigoYHRibGAuYHBhcnRpdGlvbl90eXBlYCBpcyBudWxsKSwgYHRibGAuYGVuZ2luZWAsICcnKSwKICAgICAgICAgICAgICAgICAgICAgICAgIGB0YmxgLmBzZV9wcml2YXRlX2lkYCwgKGB0YmxgLmBoaWRkZW5gIDw+ICdWaXNpYmxlJyksIGlmKChgc3ViX3BhcnRgLmBuYW1lYCBpcyBudWxsKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKChgcGFydGAuYG5hbWVgIGlzIG51bGwpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYHRibGAuYHNlX3ByaXZhdGVfZGF0YWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgcGFydF90c2AuYHNlX3ByaXZhdGVfZGF0YWApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYHN1Yl9wYXJ0X3RzYC5gc2VfcHJpdmF0ZV9kYXRhYCksIDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAwLAogICAgICAgICAgICAgICAgICAgICAgICAgaWZudWxsKGBzdWJfcGFydGAuYG5hbWVgLCBgcGFydGAuYG5hbWVgKSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgQ0hFQ0tTVU1gLAogICAgICAgaWYoKGBzdWJfcGFydGAuYG5hbWVgIGlzIG51bGwpLCBpZm51bGwoYHBhcnRgLmBjb21tZW50YCwgJycpLAogICAgICAgICAgaWZudWxsKGBzdWJfcGFydGAuYGNvbW1lbnRgLCAnJykpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgUEFSVElUSU9OX0NPTU1FTlRgLAogICAgICAgaWYoKGBwYXJ0YC5gbmFtZWAgaXMgbnVsbCksICcnLAogICAgICAgICAgaW50ZXJuYWxfZ2V0X3BhcnRpdGlvbl9ub2RlZ3JvdXAoaWYoKGBzdWJfcGFydGAuYG5hbWVgIGlzIG51bGwpLCBgcGFydGAuYG9wdGlvbnNgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYHN1Yl9wYXJ0YC5gb3B0aW9uc2ApKSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgTk9ERUdST1VQYCwKICAgICAgIGlmbnVsbChgc3ViX3BhcnRfdHNgLmBuYW1lYCwgYHBhcnRfdHNgLmBuYW1lYCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYFRBQkxFU1BBQ0VfTkFNRWAKZnJvbSAoKCgoKChgbXlzcWxgLmB0YWJsZXNgIGB0YmxgIGpvaW4gYG15c3FsYC5gc2NoZW1hdGFgIGBzY2hgCiAgICAgICAgICAgb24gKChgc2NoYC5gaWRgID0gYHRibGAuYHNjaGVtYV9pZGApKSkgam9pbiBgbXlzcWxgLmBjYXRhbG9nc2AgYGNhdGAKICAgICAgICAgIG9uICgoYGNhdGAuYGlkYCA9IGBzY2hgLmBjYXRhbG9nX2lkYCkpKSBsZWZ0IGpvaW4gYG15c3FsYC5gdGFibGVfcGFydGl0aW9uc2AgYHBhcnRgCiAgICAgICAgIG9uICgoYHBhcnRgLmB0YWJsZV9pZGAgPSBgdGJsYC5gaWRgKSkpIGxlZnQgam9pbiBgbXlzcWxgLmB0YWJsZV9wYXJ0aXRpb25zYCBgc3ViX3BhcnRgCiAgICAgICAgb24gKChgc3ViX3BhcnRgLmBwYXJlbnRfcGFydGl0aW9uX2lkYCA9IGBwYXJ0YC5gaWRgKSkpIGxlZnQgam9pbiBgbXlzcWxgLmB0YWJsZXNwYWNlc2AgYHBhcnRfdHNgCiAgICAgICBvbiAoKGBwYXJ0X3RzYC5gaWRgID0gYHBhcnRgLmB0YWJsZXNwYWNlX2lkYCkpKSBsZWZ0IGpvaW4gYG15c3FsYC5gdGFibGVzcGFjZXNgIGBzdWJfcGFydF90c2AKICAgICAgb24gKCgoYHN1Yl9wYXJ0YC5gdGFibGVzcGFjZV9pZGAgaXMgbm90IG51bGwpIGFuZCAoYHN1Yl9wYXJ0X3RzYC5gaWRgID0gYHN1Yl9wYXJ0YC5gdGFibGVzcGFjZV9pZGApKSkpCndoZXJlICgoMCA8PiBjYW5fYWNjZXNzX3RhYmxlKGBzY2hgLmBuYW1lYCwgYHRibGAuYG5hbWVgKSkgYW5kICgwIDw+IGlzX3Zpc2libGVfZGRfb2JqZWN0KGB0YmxgLmBoaWRkZW5gKSkgYW5kCiAgICAgICAoYHBhcnRgLmBwYXJlbnRfcGFydGl0aW9uX2lkYCBpcyBudWxsKSk7CgpQSwMECgAAAAAA3II6WNMefu5oAAAAaAAAACkAAAAvdmlldy9SRUZFUkVOVElBTF9DT05TVFJBSU5UUy53QVFuSFEubWV0YSNuOlJFRkVSRU5USUFMX0NPTlNUUkFJTlRTCiE8bWQ+IFtudWxsLCAtMTA5MDQ4MjMyMywgWzM5LCAzOSwgMTE5MCwgMTE5MCwgMTE5M10sIFtfLCBELCBRLCBELCA7XSwgMCwgMF0KUEsDBAoAAAAAANyCOljdZfP6qQQAAKkEAAAoAAAAL3ZpZXcvUkVGRVJFTlRJQUxfQ09OU1RSQUlOVFMud0FRbkhRLnNxbGNyZWF0ZSB2aWV3IFJFRkVSRU5USUFMX0NPTlNUUkFJTlRTIGFzCnNlbGVjdCBgY2F0YC5gbmFtZWAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBDT05TVFJBSU5UX0NBVEFMT0dgLAogICAgICAgYHNjaGAuYG5hbWVgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgQ09OU1RSQUlOVF9TQ0hFTUFgLAogICAgICAgKGBma2AuYG5hbWVgIGNvbGxhdGUgdXRmOG1iM190b2xvd2VyX2NpKSBBUyBgQ09OU1RSQUlOVF9OQU1FYCwKICAgICAgIGBma2AuYHJlZmVyZW5jZWRfdGFibGVfY2F0YWxvZ2AgICAgICAgICAgQVMgYFVOSVFVRV9DT05TVFJBSU5UX0NBVEFMT0dgLAogICAgICAgYGZrYC5gcmVmZXJlbmNlZF90YWJsZV9zY2hlbWFgICAgICAgICAgICBBUyBgVU5JUVVFX0NPTlNUUkFJTlRfU0NIRU1BYCwKICAgICAgIGBma2AuYHVuaXF1ZV9jb25zdHJhaW50X25hbWVgICAgICAgICAgICAgQVMgYFVOSVFVRV9DT05TVFJBSU5UX05BTUVgLAogICAgICAgYGZrYC5gbWF0Y2hfb3B0aW9uYCAgICAgICAgICAgICAgICAgICAgICBBUyBgTUFUQ0hfT1BUSU9OYCwKICAgICAgIGBma2AuYHVwZGF0ZV9ydWxlYCAgICAgICAgICAgICAgICAgICAgICAgQVMgYFVQREFURV9SVUxFYCwKICAgICAgIGBma2AuYGRlbGV0ZV9ydWxlYCAgICAgICAgICAgICAgICAgICAgICAgQVMgYERFTEVURV9SVUxFYCwKICAgICAgIGB0YmxgLmBuYW1lYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYFRBQkxFX05BTUVgLAogICAgICAgYGZrYC5gcmVmZXJlbmNlZF90YWJsZV9uYW1lYCAgICAgICAgICAgICBBUyBgUkVGRVJFTkNFRF9UQUJMRV9OQU1FYApmcm9tICgoKGBteXNxbGAuYGZvcmVpZ25fa2V5c2AgYGZrYCBqb2luIGBteXNxbGAuYHRhYmxlc2AgYHRibGAKICAgICAgICBvbiAoKGBma2AuYHRhYmxlX2lkYCA9IGB0YmxgLmBpZGApKSkgam9pbiBgbXlzcWxgLmBzY2hlbWF0YWAgYHNjaGAKICAgICAgIG9uICgoYGZrYC5gc2NoZW1hX2lkYCA9IGBzY2hgLmBpZGApKSkgam9pbiBgbXlzcWxgLmBjYXRhbG9nc2AgYGNhdGAgb24gKChgY2F0YC5gaWRgID0gYHNjaGAuYGNhdGFsb2dfaWRgKSkpCndoZXJlICgoMCA8PiBjYW5fYWNjZXNzX3RhYmxlKGBzY2hgLmBuYW1lYCwgYHRibGAuYG5hbWVgKSkgYW5kICgwIDw+IGlzX3Zpc2libGVfZGRfb2JqZWN0KGB0YmxgLmBoaWRkZW5gKSkpOwoKUEsDBAoAAAAAANyCOlhSJ+DWXAAAAFwAAAAhAAAAL3ZpZXcvUkVTT1VSQ0VfR1JPVVBTLkpRdXQtUS5tZXRhI246UkVTT1VSQ0VfR1JPVVBTCiE8bWQ+IFtudWxsLCAxNzIxMzEzODQ5LCBbMzEsIDMxLCA0OTIsIDQ5MiwgNDk1XSwgW18sIEQsIFEsIEQsIDtdLCAwLCAwXQpQSwMECgAAAAAA3II6WEN/SuHvAQAA7wEAACAAAAAvdmlldy9SRVNPVVJDRV9HUk9VUFMuSlF1dC1RLnNxbGNyZWF0ZSB2aWV3IFJFU09VUkNFX0dST1VQUyBhcwpzZWxlY3QgYHJlc2AuYHJlc291cmNlX2dyb3VwX25hbWVgICAgICAgICAgICAgICBBUyBgUkVTT1VSQ0VfR1JPVVBfTkFNRWAsCiAgICAgICBgcmVzYC5gcmVzb3VyY2VfZ3JvdXBfdHlwZWAgICAgICAgICAgICAgIEFTIGBSRVNPVVJDRV9HUk9VUF9UWVBFYCwKICAgICAgIGByZXNgLmByZXNvdXJjZV9ncm91cF9lbmFibGVkYCAgICAgICAgICAgQVMgYFJFU09VUkNFX0dST1VQX0VOQUJMRURgLAogICAgICAgY29udmVydF9jcHVfaWRfbWFzayhgcmVzYC5gY3B1X2lkX21hc2tgKSBBUyBgVkNQVV9JRFNgLAogICAgICAgYHJlc2AuYHRocmVhZF9wcmlvcml0eWAgICAgICAgICAgICAgICAgICBBUyBgVEhSRUFEX1BSSU9SSVRZYApmcm9tIGBteXNxbGAuYHJlc291cmNlX2dyb3Vwc2AgYHJlc2AKd2hlcmUgKDAgPD4gY2FuX2FjY2Vzc19yZXNvdXJjZV9ncm91cChgcmVzYC5gcmVzb3VyY2VfZ3JvdXBfbmFtZWApKTsKClBLAwQKAAAAAADcgjpYWfchLWIAAABiAAAAJAAAAC92aWV3L1JPTEVfQ09MVU1OX0dSQU5UUy4xd08xVmcubWV0YSNuOlJPTEVfQ09MVU1OX0dSQU5UUwohPG1kPiBbbnVsbCwgMTEwMjg2NjE5NiwgWzM0LCAzNCwgODM1MSwgODM1MSwgODM1NF0sIFtfLCBELCBRLCBELCA7XSwgMCwgMF0KUEsDBAoAAAAAANyCOliHIlJxoiAAAKIgAAAjAAAAL3ZpZXcvUk9MRV9DT0xVTU5fR1JBTlRTLjF3TzFWZy5zcWxjcmVhdGUgdmlldyBST0xFX0NPTFVNTl9HUkFOVFMgYXMKd2l0aCByZWN1cnNpdmUgYHJvbGVfZ3JhcGhgIChgY19wYXJlbnRfdXNlcmAsIGBjX3BhcmVudF9ob3N0YCwgYGNfZnJvbV91c2VyYCwgYGNfZnJvbV9ob3N0YCwgYGNfdG9fdXNlcmAsIGBjX3RvX2hvc3RgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGByb2xlX3BhdGhgLCBgY193aXRoX2FkbWluYCwgYGNfZW5hYmxlZGApCiAgICAgICAgICAgICAgICAgICBhcyAoc2VsZWN0IGludGVybmFsX2dldF91c2VybmFtZSgpICAgICAgICAgICAgICAgICAgICAgICAgQVMgYElOVEVSTkFMX0dFVF9VU0VSTkFNRSgpYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxfZ2V0X2hvc3RuYW1lKCkgICAgICAgICAgICAgICAgICAgICAgICBBUyBgSU5URVJOQUxfR0VUX0hPU1ROQU1FKClgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbF9nZXRfdXNlcm5hbWUoKSAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBJTlRFUk5BTF9HRVRfVVNFUk5BTUUoKWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVybmFsX2dldF9ob3N0bmFtZSgpICAgICAgICAgICAgICAgICAgICAgICAgQVMgYElOVEVSTkFMX0dFVF9IT1NUTkFNRSgpYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzdCgnJyBhcyBjaGFyKDY0KSBjaGFyc2V0IHV0ZjhtYjQpICAgICAgICAgICBBUyBgQ0FTVCgnJyBhcyBDSEFSKDY0KSBDSEFSU0VUIHV0ZjhtYjQpYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzdCgnJyBhcyBjaGFyKDI1NSkgY2hhcnNldCB1dGY4bWI0KSAgICAgICAgICBBUyBgQ0FTVCgnJyBhcyBDSEFSKDI1NSkgQ0hBUlNFVCB1dGY4bWI0KWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc3Qoc2hhMihjb25jYXQocXVvdGUoaW50ZXJuYWxfZ2V0X3VzZXJuYW1lKCkpLCAnQCcsIHF1b3RlKGludGVybmFsX2dldF9ob3N0bmFtZSgpKSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyNTYpIGFzIGNoYXIoMTcwMDApIGNoYXJzZXQgdXRmOG1iNCkgQVMgYENBU1QoU0hBMihDT05DQVQoUVVPVEUoSU5URVJOQUxfR0VUX1VTRVJOQU1FKCkpLCdAJywgICAgICAgICAgICAgICAgICAgICAgICBRVU9URShJTlRFUk5BTF9HRVRfSE9TVE5BTUUoKSkpLCAyNTYpICAgICAgICAgICAgQVMgQ0hBUigxNzAwMCkgQ0hBUlNFVCB1dGY4bWI0KWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc3QoJ04nIGFzIGNoYXIoMSkgY2hhcnNldCB1dGY4bWI0KSAgICAgICAgICAgQVMgYENBU1QoJ04nIGFzIENIQVIoMSkgQ0hBUlNFVCB1dGY4bWI0KWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYEZBTFNFYAogICAgICAgICAgICAgICAgICAgICAgIHVuaW9uCiAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0IGludGVybmFsX2dldF91c2VybmFtZSgpICAgICAgICAgICAgICAgICAgICAgICAgQVMgYElOVEVSTkFMX0dFVF9VU0VSTkFNRSgpYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxfZ2V0X2hvc3RuYW1lKCkgICAgICAgICAgICAgICAgICAgICAgICBBUyBgSU5URVJOQUxfR0VUX0hPU1ROQU1FKClgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgbWFuZGF0b3J5X3JvbGVzYC5gUk9MRV9OQU1FYCAgICAgICAgICAgICAgICAgIEFTIGBST0xFX05BTUVgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgbWFuZGF0b3J5X3JvbGVzYC5gUk9MRV9IT1NUYCAgICAgICAgICAgICAgICAgIEFTIGBST0xFX0hPU1RgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbF9nZXRfdXNlcm5hbWUoKSAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBJTlRFUk5BTF9HRVRfVVNFUk5BTUUoKWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVybmFsX2dldF9ob3N0bmFtZSgpICAgICAgICAgICAgICAgICAgICAgICAgQVMgYElOVEVSTkFMX0dFVF9IT1NUTkFNRSgpYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzdChzaGEyKGNvbmNhdChxdW90ZShgbWFuZGF0b3J5X3JvbGVzYC5gUk9MRV9OQU1FYCksICdAJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJ0KHF1b3RlKGBtYW5kYXRvcnlfcm9sZXNgLmBST0xFX0hPU1RgKSB1c2luZyB1dGY4bWI0KSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyNTYpIGFzIGNoYXIoMTcwMDApIGNoYXJzZXQgdXRmOG1iNCkgQVMgYENBU1QoU0hBMihDT05DQVQoUVVPVEUoUk9MRV9OQU1FKSwnQCcsICAgICAgICAgICAgICAgICAgIENPTlZFUlQoUVVPVEUoUk9MRV9IT1NUKSB1c2luZyB1dGY4bWI0KSksIDI1NikgICAgICAgICAgICAgIEFTIENIQVIoMTcwMDApIENIQVJTRVQgdXRmOG1iNClgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXN0KCdOJyBhcyBjaGFyKDEpIGNoYXJzZXQgdXRmOG1iNCkgICAgICAgICAgIEFTIGBDQVNUKCdOJyBhcyBDSEFSKDEpIENIQVJTRVQgdXRmOG1iNClgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWxzZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBGQUxTRWAKICAgICAgICAgICAgICAgICAgICAgICBmcm9tIGpzb25fdGFibGUoaW50ZXJuYWxfZ2V0X21hbmRhdG9yeV9yb2xlc19qc29uKCksICckWypdJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5zIChgUk9MRV9OQU1FYCB2YXJjaGFyKDI1NSkgY2hhcmFjdGVyIHNldCB1dGY4bWI0IHBhdGggJyQuUk9MRV9OQU1FJywgYFJPTEVfSE9TVGAgdmFyY2hhcigyNTUpIGNoYXJhY3RlciBzZXQgdXRmOG1iNCBwYXRoICckLlJPTEVfSE9TVCcpKSBgbWFuZGF0b3J5X3JvbGVzYAogICAgICAgICAgICAgICAgICAgICAgIHdoZXJlIGNvbmNhdChxdW90ZShgbWFuZGF0b3J5X3JvbGVzYC5gUk9MRV9OQU1FYCksICdAJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udmVydChxdW90ZShgbWFuZGF0b3J5X3JvbGVzYC5gUk9MRV9IT1NUYCkgdXNpbmcgdXRmOG1iNCkpIGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHNlbGVjdCBjb25jYXQoY29udmVydChxdW90ZShgbXlzcWxgLmByb2xlX2VkZ2VzYC5gRlJPTV9VU0VSYCkgdXNpbmcgdXRmOG1iNCksICdAJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJ0KHF1b3RlKGBteXNxbGAuYHJvbGVfZWRnZXNgLmBGUk9NX0hPU1RgKSB1c2luZyB1dGY4bWI0KSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSBgbXlzcWxgLmByb2xlX2VkZ2VzYAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVyZSAoKGBteXNxbGAuYHJvbGVfZWRnZXNgLmBUT19VU0VSYCA9IGludGVybmFsX2dldF91c2VybmFtZSgpKSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjb252ZXJ0KGBteXNxbGAuYHJvbGVfZWRnZXNgLmBUT19IT1NUYCB1c2luZyB1dGY4bWI0KSA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udmVydChpbnRlcm5hbF9nZXRfaG9zdG5hbWUoKSB1c2luZyB1dGY4bWI0KSkpKSBpcyBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgIHVuaW9uCiAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0IGByb2xlX2dyYXBoYC5gY19wYXJlbnRfdXNlcmAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYGNfcGFyZW50X3VzZXJgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgcm9sZV9ncmFwaGAuYGNfcGFyZW50X2hvc3RgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBjX3BhcmVudF9ob3N0YCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYG15c3FsYC5gcm9sZV9lZGdlc2AuYEZST01fVVNFUmAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgRlJPTV9VU0VSYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYG15c3FsYC5gcm9sZV9lZGdlc2AuYEZST01fSE9TVGAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgRlJPTV9IT1NUYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYG15c3FsYC5gcm9sZV9lZGdlc2AuYFRPX1VTRVJgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgVE9fVVNFUmAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBteXNxbGAuYHJvbGVfZWRnZXNgLmBUT19IT1NUYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYFRPX0hPU1RgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigobG9jYXRlKHNoYTIoY29uY2F0KGNvbnZlcnQocXVvdGUoYG15c3FsYC5gcm9sZV9lZGdlc2AuYEZST01fVVNFUmApIHVzaW5nIHV0ZjhtYjQpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdAJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJ0KHF1b3RlKGBteXNxbGAuYHJvbGVfZWRnZXNgLmBGUk9NX0hPU1RgKSB1c2luZyB1dGY4bWI0KSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyNTYpLCBgcm9sZV9ncmFwaGAuYHJvbGVfcGF0aGApID0gMCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmNhdChgcm9sZV9ncmFwaGAuYHJvbGVfcGF0aGAsICctPicsIGNvbnZlcnQoc2hhMihjb25jYXQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnQocXVvdGUoYG15c3FsYC5gcm9sZV9lZGdlc2AuYEZST01fVVNFUmApIHVzaW5nIHV0ZjhtYjQpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnQocXVvdGUoYG15c3FsYC5gcm9sZV9lZGdlc2AuYEZST01fSE9TVGApIHVzaW5nIHV0ZjhtYjQpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDI1NikgdXNpbmcgdXRmOG1iNCkpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOVUxMKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBJRihMT0NBVEUoU0hBMihDT05DQVQoUVVPVEUoRlJPTV9VU0VSKSwnQCcsICAgICAgICAgICAgICAgICAgICAgIENPTlZFUlQoUVVPVEUoRlJPTV9IT1NUKSB1c2luZyB1dGY4bWI0KSksIDI1NiksICAgICAgICAgICAgICAgICByb2xlX3BhdGgpID0gMCwgICAgICAgICAgQ09OQ0FUKHJvbGVfcGF0aCwnLT4nLCBTSEEyKENPTkNBVChRVU9URShGUk9NX1VTRVIpLCdAJywgICAgICAgICAgIENPTlZFUlQoUVVPVEUoRlJPTV9IT1NUKSB1c2luZyB1dGY4YCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYG15c3FsYC5gcm9sZV9lZGdlc2AuYFdJVEhfQURNSU5fT1BUSU9OYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgV0lUSF9BRE1JTl9PUFRJT05gLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigoKDAgPD4gYHJvbGVfZ3JhcGhgLmBjX2VuYWJsZWRgKSBvciAoMCA8PiBpbnRlcm5hbF9pc19lbmFibGVkX3JvbGUoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYG15c3FsYC5gcm9sZV9lZGdlc2AuYEZST01fVVNFUmAsIGBteXNxbGAuYHJvbGVfZWRnZXNgLmBGUk9NX0hPU1RgKSkpLCB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWxzZSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBJRihjX2VuYWJsZWQgT1IgICAgICAgIElOVEVSTkFMX0lTX0VOQUJMRURfUk9MRShGUk9NX1VTRVIsIEZST01fSE9TVCksIFRSVUUsIEZBTFNFKWAKICAgICAgICAgICAgICAgICAgICAgICBmcm9tIChgbXlzcWxgLmByb2xlX2VkZ2VzYCBqb2luIGByb2xlX2dyYXBoYCkKICAgICAgICAgICAgICAgICAgICAgICB3aGVyZSAoKGBteXNxbGAuYHJvbGVfZWRnZXNgLmBUT19VU0VSYCA9IGByb2xlX2dyYXBoYC5gY19mcm9tX3VzZXJgKSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNvbnZlcnQoYG15c3FsYC5gcm9sZV9lZGdlc2AuYFRPX0hPU1RgIHVzaW5nIHV0ZjhtYjQpID0gYHJvbGVfZ3JhcGhgLmBjX2Zyb21faG9zdGApIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYHJvbGVfZ3JhcGhgLmByb2xlX3BhdGhgIGlzIG5vdCBudWxsKSkpCnNlbGVjdCBkaXN0aW5jdCBpbnRlcm5hbF9nZXRfdXNlcm5hbWUoYHRwYC5gR3JhbnRvcmApICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgR1JBTlRPUmAsCiAgICAgICAgICAgICAgICBpbnRlcm5hbF9nZXRfaG9zdG5hbWUoYHRwYC5gR3JhbnRvcmApICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgR1JBTlRPUl9IT1NUYCwKICAgICAgICAgICAgICAgIGBjcGAuYFVzZXJgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBHUkFOVEVFYCwKICAgICAgICAgICAgICAgIGBjcGAuYEhvc3RgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBHUkFOVEVFX0hPU1RgLAogICAgICAgICAgICAgICAgJ2RlZicgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYFRBQkxFX0NBVEFMT0dgLAogICAgICAgICAgICAgICAgYGNwYC5gRGJgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYFRBQkxFX1NDSEVNQWAsCiAgICAgICAgICAgICAgICBgY3BgLmBUYWJsZV9uYW1lYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgVEFCTEVfTkFNRWAsCiAgICAgICAgICAgICAgICBgY3BgLmBDb2x1bW5fbmFtZWAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgQ09MVU1OX05BTUVgLAogICAgICAgICAgICAgICAgYGNwYC5gQ29sdW1uX3ByaXZgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYFBSSVZJTEVHRV9UWVBFYCwKICAgICAgICAgICAgICAgIGlmKChmaW5kX2luX3NldCgnR3JhbnQnLCBgdHBgLmBUYWJsZV9wcml2YCkgPiAwKSwgJ1lFUycsICdOTycpIEFTIGBJU19HUkFOVEFCTEVgCmZyb20gKChgbXlzcWxgLmB0YWJsZXNfcHJpdmAgYHRwYCBqb2luIGByb2xlX2dyYXBoYCBgcmdgIG9uICgoKGB0cGAuYFVzZXJgID0gYHJnYC5gY19mcm9tX3VzZXJgKSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY29udmVydChgdHBgLmBIb3N0YCB1c2luZyB1dGY4bWI0KSA9IGByZ2AuYGNfZnJvbV9ob3N0YCkpKSkgam9pbiBgbXlzcWxgLmBjb2x1bW5zX3ByaXZgIGBjcGAKICAgICAgb24gKCgoY29udmVydChgdHBgLmBIb3N0YCB1c2luZyB1dGY4bWI0KSA9IGBjcGAuYEhvc3RgKSBhbmQgKGBjcGAuYERiYCA9IGB0cGAuYERiYCkgYW5kCiAgICAgICAgICAgKGBjcGAuYFVzZXJgID0gYHRwYC5gVXNlcmApIGFuZCAoYGNwYC5gVGFibGVfbmFtZWAgPSBgdHBgLmBUYWJsZV9uYW1lYCkpKSkKd2hlcmUgKChgY3BgLmBDb2x1bW5fcHJpdmAgPiAwKSBhbmQgKGByZ2AuYGNfdG9fdXNlcmAgPD4gJycpIGFuZCAoYHJnYC5gY19lbmFibGVkYCA9IHRydWUpKTsKClBLAwQKAAAAAADcgjpYNhbUgGQAAABkAAAAJQAAAC92aWV3L1JPTEVfUk9VVElORV9HUkFOVFMudS1INThRLm1ldGEjbjpST0xFX1JPVVRJTkVfR1JBTlRTCiE8bWQ+IFtudWxsLCAtMTY0MjA3MDY3OSwgWzM1LCAzNSwgODI3OCwgODI3OCwgODI4MV0sIFtfLCBELCBRLCBELCA7XSwgMCwgMF0KUEsDBAoAAAAAANyCOlg/jkpSWSAAAFkgAAAkAAAAL3ZpZXcvUk9MRV9ST1VUSU5FX0dSQU5UUy51LUg1OFEuc3FsY3JlYXRlIHZpZXcgUk9MRV9ST1VUSU5FX0dSQU5UUyBhcwp3aXRoIHJlY3Vyc2l2ZSBgcm9sZV9ncmFwaGAgKGBjX3BhcmVudF91c2VyYCwgYGNfcGFyZW50X2hvc3RgLCBgY19mcm9tX3VzZXJgLCBgY19mcm9tX2hvc3RgLCBgY190b191c2VyYCwgYGNfdG9faG9zdGAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYHJvbGVfcGF0aGAsIGBjX3dpdGhfYWRtaW5gLCBgY19lbmFibGVkYCkKICAgICAgICAgICAgICAgICAgIGFzIChzZWxlY3QgaW50ZXJuYWxfZ2V0X3VzZXJuYW1lKCkgICAgICAgICAgICAgICAgICAgICAgICBBUyBgSU5URVJOQUxfR0VUX1VTRVJOQU1FKClgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbF9nZXRfaG9zdG5hbWUoKSAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBJTlRFUk5BTF9HRVRfSE9TVE5BTUUoKWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVybmFsX2dldF91c2VybmFtZSgpICAgICAgICAgICAgICAgICAgICAgICAgQVMgYElOVEVSTkFMX0dFVF9VU0VSTkFNRSgpYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxfZ2V0X2hvc3RuYW1lKCkgICAgICAgICAgICAgICAgICAgICAgICBBUyBgSU5URVJOQUxfR0VUX0hPU1ROQU1FKClgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXN0KCcnIGFzIGNoYXIoNjQpIGNoYXJzZXQgdXRmOG1iNCkgICAgICAgICAgIEFTIGBDQVNUKCcnIGFzIENIQVIoNjQpIENIQVJTRVQgdXRmOG1iNClgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXN0KCcnIGFzIGNoYXIoMjU1KSBjaGFyc2V0IHV0ZjhtYjQpICAgICAgICAgIEFTIGBDQVNUKCcnIGFzIENIQVIoMjU1KSBDSEFSU0VUIHV0ZjhtYjQpYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzdChzaGEyKGNvbmNhdChxdW90ZShpbnRlcm5hbF9nZXRfdXNlcm5hbWUoKSksICdAJywgcXVvdGUoaW50ZXJuYWxfZ2V0X2hvc3RuYW1lKCkpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDI1NikgYXMgY2hhcigxNzAwMCkgY2hhcnNldCB1dGY4bWI0KSBBUyBgQ0FTVChTSEEyKENPTkNBVChRVU9URShJTlRFUk5BTF9HRVRfVVNFUk5BTUUoKSksJ0AnLCAgICAgICAgICAgICAgICAgICAgICAgIFFVT1RFKElOVEVSTkFMX0dFVF9IT1NUTkFNRSgpKSksIDI1NikgICAgICAgICAgICBBUyBDSEFSKDE3MDAwKSBDSEFSU0VUIHV0ZjhtYjQpYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzdCgnTicgYXMgY2hhcigxKSBjaGFyc2V0IHV0ZjhtYjQpICAgICAgICAgICBBUyBgQ0FTVCgnTicgYXMgQ0hBUigxKSBDSEFSU0VUIHV0ZjhtYjQpYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgRkFMU0VgCiAgICAgICAgICAgICAgICAgICAgICAgdW5pb24KICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3QgaW50ZXJuYWxfZ2V0X3VzZXJuYW1lKCkgICAgICAgICAgICAgICAgICAgICAgICBBUyBgSU5URVJOQUxfR0VUX1VTRVJOQU1FKClgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbF9nZXRfaG9zdG5hbWUoKSAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBJTlRFUk5BTF9HRVRfSE9TVE5BTUUoKWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBtYW5kYXRvcnlfcm9sZXNgLmBST0xFX05BTUVgICAgICAgICAgICAgICAgICAgQVMgYFJPTEVfTkFNRWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBtYW5kYXRvcnlfcm9sZXNgLmBST0xFX0hPU1RgICAgICAgICAgICAgICAgICAgQVMgYFJPTEVfSE9TVGAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVybmFsX2dldF91c2VybmFtZSgpICAgICAgICAgICAgICAgICAgICAgICAgQVMgYElOVEVSTkFMX0dFVF9VU0VSTkFNRSgpYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxfZ2V0X2hvc3RuYW1lKCkgICAgICAgICAgICAgICAgICAgICAgICBBUyBgSU5URVJOQUxfR0VUX0hPU1ROQU1FKClgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXN0KHNoYTIoY29uY2F0KHF1b3RlKGBtYW5kYXRvcnlfcm9sZXNgLmBST0xFX05BTUVgKSwgJ0AnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnQocXVvdGUoYG1hbmRhdG9yeV9yb2xlc2AuYFJPTEVfSE9TVGApIHVzaW5nIHV0ZjhtYjQpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDI1NikgYXMgY2hhcigxNzAwMCkgY2hhcnNldCB1dGY4bWI0KSBBUyBgQ0FTVChTSEEyKENPTkNBVChRVU9URShST0xFX05BTUUpLCdAJywgICAgICAgICAgICAgICAgICAgQ09OVkVSVChRVU9URShST0xFX0hPU1QpIHVzaW5nIHV0ZjhtYjQpKSwgMjU2KSAgICAgICAgICAgICAgQVMgQ0hBUigxNzAwMCkgQ0hBUlNFVCB1dGY4bWI0KWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc3QoJ04nIGFzIGNoYXIoMSkgY2hhcnNldCB1dGY4bWI0KSAgICAgICAgICAgQVMgYENBU1QoJ04nIGFzIENIQVIoMSkgQ0hBUlNFVCB1dGY4bWI0KWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYEZBTFNFYAogICAgICAgICAgICAgICAgICAgICAgIGZyb20ganNvbl90YWJsZShpbnRlcm5hbF9nZXRfbWFuZGF0b3J5X3JvbGVzX2pzb24oKSwgJyRbKl0nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbnMgKGBST0xFX05BTUVgIHZhcmNoYXIoMjU1KSBjaGFyYWN0ZXIgc2V0IHV0ZjhtYjQgcGF0aCAnJC5ST0xFX05BTUUnLCBgUk9MRV9IT1NUYCB2YXJjaGFyKDI1NSkgY2hhcmFjdGVyIHNldCB1dGY4bWI0IHBhdGggJyQuUk9MRV9IT1NUJykpIGBtYW5kYXRvcnlfcm9sZXNgCiAgICAgICAgICAgICAgICAgICAgICAgd2hlcmUgY29uY2F0KHF1b3RlKGBtYW5kYXRvcnlfcm9sZXNgLmBST0xFX05BTUVgKSwgJ0AnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJ0KHF1b3RlKGBtYW5kYXRvcnlfcm9sZXNgLmBST0xFX0hPU1RgKSB1c2luZyB1dGY4bWI0KSkgaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoc2VsZWN0IGNvbmNhdChjb252ZXJ0KHF1b3RlKGBteXNxbGAuYHJvbGVfZWRnZXNgLmBGUk9NX1VTRVJgKSB1c2luZyB1dGY4bWI0KSwgJ0AnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnQocXVvdGUoYG15c3FsYC5gcm9sZV9lZGdlc2AuYEZST01fSE9TVGApIHVzaW5nIHV0ZjhtYjQpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tIGBteXNxbGAuYHJvbGVfZWRnZXNgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZXJlICgoYG15c3FsYC5gcm9sZV9lZGdlc2AuYFRPX1VTRVJgID0gaW50ZXJuYWxfZ2V0X3VzZXJuYW1lKCkpIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNvbnZlcnQoYG15c3FsYC5gcm9sZV9lZGdlc2AuYFRPX0hPU1RgIHVzaW5nIHV0ZjhtYjQpID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJ0KGludGVybmFsX2dldF9ob3N0bmFtZSgpIHVzaW5nIHV0ZjhtYjQpKSkpIGlzIGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgdW5pb24KICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3QgYHJvbGVfZ3JhcGhgLmBjX3BhcmVudF91c2VyYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgY19wYXJlbnRfdXNlcmAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGByb2xlX2dyYXBoYC5gY19wYXJlbnRfaG9zdGAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYGNfcGFyZW50X2hvc3RgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgbXlzcWxgLmByb2xlX2VkZ2VzYC5gRlJPTV9VU0VSYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBGUk9NX1VTRVJgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgbXlzcWxgLmByb2xlX2VkZ2VzYC5gRlJPTV9IT1NUYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBGUk9NX0hPU1RgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgbXlzcWxgLmByb2xlX2VkZ2VzYC5gVE9fVVNFUmAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBUT19VU0VSYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYG15c3FsYC5gcm9sZV9lZGdlc2AuYFRPX0hPU1RgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgVE9fSE9TVGAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKChsb2NhdGUoc2hhMihjb25jYXQoY29udmVydChxdW90ZShgbXlzcWxgLmByb2xlX2VkZ2VzYC5gRlJPTV9VU0VSYCkgdXNpbmcgdXRmOG1iNCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0AnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnQocXVvdGUoYG15c3FsYC5gcm9sZV9lZGdlc2AuYEZST01fSE9TVGApIHVzaW5nIHV0ZjhtYjQpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDI1NiksIGByb2xlX2dyYXBoYC5gcm9sZV9wYXRoYCkgPSAwKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uY2F0KGByb2xlX2dyYXBoYC5gcm9sZV9wYXRoYCwgJy0+JywgY29udmVydChzaGEyKGNvbmNhdCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udmVydChxdW90ZShgbXlzcWxgLmByb2xlX2VkZ2VzYC5gRlJPTV9VU0VSYCkgdXNpbmcgdXRmOG1iNCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdAJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udmVydChxdW90ZShgbXlzcWxgLmByb2xlX2VkZ2VzYC5gRlJPTV9IT1NUYCkgdXNpbmcgdXRmOG1iNCkpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMjU2KSB1c2luZyB1dGY4bWI0KSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5VTEwpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYElGKExPQ0FURShTSEEyKENPTkNBVChRVU9URShGUk9NX1VTRVIpLCdAJywgICAgICAgICAgICAgICAgICAgICAgQ09OVkVSVChRVU9URShGUk9NX0hPU1QpIHVzaW5nIHV0ZjhtYjQpKSwgMjU2KSwgICAgICAgICAgICAgICAgIHJvbGVfcGF0aCkgPSAwLCAgICAgICAgICBDT05DQVQocm9sZV9wYXRoLCctPicsIFNIQTIoQ09OQ0FUKFFVT1RFKEZST01fVVNFUiksJ0AnLCAgICAgICAgICAgQ09OVkVSVChRVU9URShGUk9NX0hPU1QpIHVzaW5nIHV0ZjhgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgbXlzcWxgLmByb2xlX2VkZ2VzYC5gV0lUSF9BRE1JTl9PUFRJT05gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBXSVRIX0FETUlOX09QVElPTmAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCgoMCA8PiBgcm9sZV9ncmFwaGAuYGNfZW5hYmxlZGApIG9yICgwIDw+IGludGVybmFsX2lzX2VuYWJsZWRfcm9sZSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgbXlzcWxgLmByb2xlX2VkZ2VzYC5gRlJPTV9VU0VSYCwgYG15c3FsYC5gcm9sZV9lZGdlc2AuYEZST01fSE9TVGApKSksIHRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhbHNlKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYElGKGNfZW5hYmxlZCBPUiAgICAgICAgSU5URVJOQUxfSVNfRU5BQkxFRF9ST0xFKEZST01fVVNFUiwgRlJPTV9IT1NUKSwgVFJVRSwgRkFMU0UpYAogICAgICAgICAgICAgICAgICAgICAgIGZyb20gKGBteXNxbGAuYHJvbGVfZWRnZXNgIGpvaW4gYHJvbGVfZ3JhcGhgKQogICAgICAgICAgICAgICAgICAgICAgIHdoZXJlICgoYG15c3FsYC5gcm9sZV9lZGdlc2AuYFRPX1VTRVJgID0gYHJvbGVfZ3JhcGhgLmBjX2Zyb21fdXNlcmApIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY29udmVydChgbXlzcWxgLmByb2xlX2VkZ2VzYC5gVE9fSE9TVGAgdXNpbmcgdXRmOG1iNCkgPSBgcm9sZV9ncmFwaGAuYGNfZnJvbV9ob3N0YCkgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChgcm9sZV9ncmFwaGAuYHJvbGVfcGF0aGAgaXMgbm90IG51bGwpKSkKc2VsZWN0IGRpc3RpbmN0IGludGVybmFsX2dldF91c2VybmFtZShgcHBgLmBHcmFudG9yYCkgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYEdSQU5UT1JgLAogICAgICAgICAgICAgICAgaW50ZXJuYWxfZ2V0X2hvc3RuYW1lKGBwcGAuYEdyYW50b3JgKSAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgR1JBTlRPUl9IT1NUYCwKICAgICAgICAgICAgICAgIGBwcGAuYFVzZXJgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYEdSQU5URUVgLAogICAgICAgICAgICAgICAgYHBwYC5gSG9zdGAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgR1JBTlRFRV9IT1NUYCwKICAgICAgICAgICAgICAgICdkZWYnICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYFNQRUNJRklDX0NBVEFMT0dgLAogICAgICAgICAgICAgICAgYHBwYC5gRGJgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgU1BFQ0lGSUNfU0NIRU1BYCwKICAgICAgICAgICAgICAgIGBwcGAuYFJvdXRpbmVfbmFtZWAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYFNQRUNJRklDX05BTUVgLAogICAgICAgICAgICAgICAgJ2RlZicgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgUk9VVElORV9DQVRBTE9HYCwKICAgICAgICAgICAgICAgIGBwcGAuYERiYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYFJPVVRJTkVfU0NIRU1BYCwKICAgICAgICAgICAgICAgIGBwcGAuYFJvdXRpbmVfbmFtZWAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYFJPVVRJTkVfTkFNRWAsCiAgICAgICAgICAgICAgICBgcHBgLmBQcm9jX3ByaXZgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBQUklWSUxFR0VfVFlQRWAsCiAgICAgICAgICAgICAgICBpZigoZmluZF9pbl9zZXQoJ0dyYW50JywgYHBwYC5gUHJvY19wcml2YCkgPiAwKSwgJ1lFUycsICdOTycpIEFTIGBJU19HUkFOVEFCTEVgCmZyb20gKGBteXNxbGAuYHByb2NzX3ByaXZgIGBwcGAgam9pbiBgcm9sZV9ncmFwaGAgYHJnYAogICAgICBvbiAoKChgcHBgLmBVc2VyYCA9IGByZ2AuYGNfZnJvbV91c2VyYCkgYW5kIChjb252ZXJ0KGBwcGAuYEhvc3RgIHVzaW5nIHV0ZjhtYjQpID0gYHJnYC5gY19mcm9tX2hvc3RgKSkpKQp3aGVyZSAoKGBwcGAuYFByb2NfcHJpdmAgPiAwKSBhbmQgKGByZ2AuYGNfdG9fdXNlcmAgPD4gJycpIGFuZCAoYHJnYC5gY19lbmFibGVkYCA9IHRydWUpKTsKClBLAwQKAAAAAADcgjpYcYVeo2EAAABhAAAAIwAAAC92aWV3L1JPTEVfVEFCTEVfR1JBTlRTLnNSRi05US5tZXRhI246Uk9MRV9UQUJMRV9HUkFOVFMKITxtZD4gW251bGwsIC0zNDkzMTA1MjIsIFszMywgMzMsIDc5ODIsIDc5ODIsIDc5ODVdLCBbXywgRCwgUSwgRCwgO10sIDAsIDBdClBLAwQKAAAAAADcgjpY8zWDdTEfAAAxHwAAIgAAAC92aWV3L1JPTEVfVEFCTEVfR1JBTlRTLnNSRi05US5zcWxjcmVhdGUgdmlldyBST0xFX1RBQkxFX0dSQU5UUyBhcwp3aXRoIHJlY3Vyc2l2ZSBgcm9sZV9ncmFwaGAgKGBjX3BhcmVudF91c2VyYCwgYGNfcGFyZW50X2hvc3RgLCBgY19mcm9tX3VzZXJgLCBgY19mcm9tX2hvc3RgLCBgY190b191c2VyYCwgYGNfdG9faG9zdGAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYHJvbGVfcGF0aGAsIGBjX3dpdGhfYWRtaW5gLCBgY19lbmFibGVkYCkKICAgICAgICAgICAgICAgICAgIGFzIChzZWxlY3QgaW50ZXJuYWxfZ2V0X3VzZXJuYW1lKCkgICAgICAgICAgICAgICAgICAgICAgICBBUyBgSU5URVJOQUxfR0VUX1VTRVJOQU1FKClgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbF9nZXRfaG9zdG5hbWUoKSAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBJTlRFUk5BTF9HRVRfSE9TVE5BTUUoKWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVybmFsX2dldF91c2VybmFtZSgpICAgICAgICAgICAgICAgICAgICAgICAgQVMgYElOVEVSTkFMX0dFVF9VU0VSTkFNRSgpYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxfZ2V0X2hvc3RuYW1lKCkgICAgICAgICAgICAgICAgICAgICAgICBBUyBgSU5URVJOQUxfR0VUX0hPU1ROQU1FKClgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXN0KCcnIGFzIGNoYXIoNjQpIGNoYXJzZXQgdXRmOG1iNCkgICAgICAgICAgIEFTIGBDQVNUKCcnIGFzIENIQVIoNjQpIENIQVJTRVQgdXRmOG1iNClgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXN0KCcnIGFzIGNoYXIoMjU1KSBjaGFyc2V0IHV0ZjhtYjQpICAgICAgICAgIEFTIGBDQVNUKCcnIGFzIENIQVIoMjU1KSBDSEFSU0VUIHV0ZjhtYjQpYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzdChzaGEyKGNvbmNhdChxdW90ZShpbnRlcm5hbF9nZXRfdXNlcm5hbWUoKSksICdAJywgcXVvdGUoaW50ZXJuYWxfZ2V0X2hvc3RuYW1lKCkpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDI1NikgYXMgY2hhcigxNzAwMCkgY2hhcnNldCB1dGY4bWI0KSBBUyBgQ0FTVChTSEEyKENPTkNBVChRVU9URShJTlRFUk5BTF9HRVRfVVNFUk5BTUUoKSksJ0AnLCAgICAgICAgICAgICAgICAgICAgICAgIFFVT1RFKElOVEVSTkFMX0dFVF9IT1NUTkFNRSgpKSksIDI1NikgICAgICAgICAgICBBUyBDSEFSKDE3MDAwKSBDSEFSU0VUIHV0ZjhtYjQpYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzdCgnTicgYXMgY2hhcigxKSBjaGFyc2V0IHV0ZjhtYjQpICAgICAgICAgICBBUyBgQ0FTVCgnTicgYXMgQ0hBUigxKSBDSEFSU0VUIHV0ZjhtYjQpYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgRkFMU0VgCiAgICAgICAgICAgICAgICAgICAgICAgdW5pb24KICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3QgaW50ZXJuYWxfZ2V0X3VzZXJuYW1lKCkgICAgICAgICAgICAgICAgICAgICAgICBBUyBgSU5URVJOQUxfR0VUX1VTRVJOQU1FKClgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbF9nZXRfaG9zdG5hbWUoKSAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBJTlRFUk5BTF9HRVRfSE9TVE5BTUUoKWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBtYW5kYXRvcnlfcm9sZXNgLmBST0xFX05BTUVgICAgICAgICAgICAgICAgICAgQVMgYFJPTEVfTkFNRWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBtYW5kYXRvcnlfcm9sZXNgLmBST0xFX0hPU1RgICAgICAgICAgICAgICAgICAgQVMgYFJPTEVfSE9TVGAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVybmFsX2dldF91c2VybmFtZSgpICAgICAgICAgICAgICAgICAgICAgICAgQVMgYElOVEVSTkFMX0dFVF9VU0VSTkFNRSgpYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxfZ2V0X2hvc3RuYW1lKCkgICAgICAgICAgICAgICAgICAgICAgICBBUyBgSU5URVJOQUxfR0VUX0hPU1ROQU1FKClgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXN0KHNoYTIoY29uY2F0KHF1b3RlKGBtYW5kYXRvcnlfcm9sZXNgLmBST0xFX05BTUVgKSwgJ0AnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnQocXVvdGUoYG1hbmRhdG9yeV9yb2xlc2AuYFJPTEVfSE9TVGApIHVzaW5nIHV0ZjhtYjQpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDI1NikgYXMgY2hhcigxNzAwMCkgY2hhcnNldCB1dGY4bWI0KSBBUyBgQ0FTVChTSEEyKENPTkNBVChRVU9URShST0xFX05BTUUpLCdAJywgICAgICAgICAgICAgICAgICAgQ09OVkVSVChRVU9URShST0xFX0hPU1QpIHVzaW5nIHV0ZjhtYjQpKSwgMjU2KSAgICAgICAgICAgICAgQVMgQ0hBUigxNzAwMCkgQ0hBUlNFVCB1dGY4bWI0KWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc3QoJ04nIGFzIGNoYXIoMSkgY2hhcnNldCB1dGY4bWI0KSAgICAgICAgICAgQVMgYENBU1QoJ04nIGFzIENIQVIoMSkgQ0hBUlNFVCB1dGY4bWI0KWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYEZBTFNFYAogICAgICAgICAgICAgICAgICAgICAgIGZyb20ganNvbl90YWJsZShpbnRlcm5hbF9nZXRfbWFuZGF0b3J5X3JvbGVzX2pzb24oKSwgJyRbKl0nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbnMgKGBST0xFX05BTUVgIHZhcmNoYXIoMjU1KSBjaGFyYWN0ZXIgc2V0IHV0ZjhtYjQgcGF0aCAnJC5ST0xFX05BTUUnLCBgUk9MRV9IT1NUYCB2YXJjaGFyKDI1NSkgY2hhcmFjdGVyIHNldCB1dGY4bWI0IHBhdGggJyQuUk9MRV9IT1NUJykpIGBtYW5kYXRvcnlfcm9sZXNgCiAgICAgICAgICAgICAgICAgICAgICAgd2hlcmUgY29uY2F0KHF1b3RlKGBtYW5kYXRvcnlfcm9sZXNgLmBST0xFX05BTUVgKSwgJ0AnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJ0KHF1b3RlKGBtYW5kYXRvcnlfcm9sZXNgLmBST0xFX0hPU1RgKSB1c2luZyB1dGY4bWI0KSkgaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoc2VsZWN0IGNvbmNhdChjb252ZXJ0KHF1b3RlKGBteXNxbGAuYHJvbGVfZWRnZXNgLmBGUk9NX1VTRVJgKSB1c2luZyB1dGY4bWI0KSwgJ0AnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnQocXVvdGUoYG15c3FsYC5gcm9sZV9lZGdlc2AuYEZST01fSE9TVGApIHVzaW5nIHV0ZjhtYjQpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tIGBteXNxbGAuYHJvbGVfZWRnZXNgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZXJlICgoYG15c3FsYC5gcm9sZV9lZGdlc2AuYFRPX1VTRVJgID0gaW50ZXJuYWxfZ2V0X3VzZXJuYW1lKCkpIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNvbnZlcnQoYG15c3FsYC5gcm9sZV9lZGdlc2AuYFRPX0hPU1RgIHVzaW5nIHV0ZjhtYjQpID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJ0KGludGVybmFsX2dldF9ob3N0bmFtZSgpIHVzaW5nIHV0ZjhtYjQpKSkpIGlzIGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgdW5pb24KICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3QgYHJvbGVfZ3JhcGhgLmBjX3BhcmVudF91c2VyYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgY19wYXJlbnRfdXNlcmAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGByb2xlX2dyYXBoYC5gY19wYXJlbnRfaG9zdGAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYGNfcGFyZW50X2hvc3RgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgbXlzcWxgLmByb2xlX2VkZ2VzYC5gRlJPTV9VU0VSYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBGUk9NX1VTRVJgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgbXlzcWxgLmByb2xlX2VkZ2VzYC5gRlJPTV9IT1NUYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBGUk9NX0hPU1RgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgbXlzcWxgLmByb2xlX2VkZ2VzYC5gVE9fVVNFUmAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBUT19VU0VSYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYG15c3FsYC5gcm9sZV9lZGdlc2AuYFRPX0hPU1RgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgVE9fSE9TVGAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKChsb2NhdGUoc2hhMihjb25jYXQoY29udmVydChxdW90ZShgbXlzcWxgLmByb2xlX2VkZ2VzYC5gRlJPTV9VU0VSYCkgdXNpbmcgdXRmOG1iNCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0AnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnQocXVvdGUoYG15c3FsYC5gcm9sZV9lZGdlc2AuYEZST01fSE9TVGApIHVzaW5nIHV0ZjhtYjQpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDI1NiksIGByb2xlX2dyYXBoYC5gcm9sZV9wYXRoYCkgPSAwKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uY2F0KGByb2xlX2dyYXBoYC5gcm9sZV9wYXRoYCwgJy0+JywgY29udmVydChzaGEyKGNvbmNhdCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udmVydChxdW90ZShgbXlzcWxgLmByb2xlX2VkZ2VzYC5gRlJPTV9VU0VSYCkgdXNpbmcgdXRmOG1iNCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdAJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udmVydChxdW90ZShgbXlzcWxgLmByb2xlX2VkZ2VzYC5gRlJPTV9IT1NUYCkgdXNpbmcgdXRmOG1iNCkpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMjU2KSB1c2luZyB1dGY4bWI0KSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5VTEwpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYElGKExPQ0FURShTSEEyKENPTkNBVChRVU9URShGUk9NX1VTRVIpLCdAJywgICAgICAgICAgICAgICAgICAgICAgQ09OVkVSVChRVU9URShGUk9NX0hPU1QpIHVzaW5nIHV0ZjhtYjQpKSwgMjU2KSwgICAgICAgICAgICAgICAgIHJvbGVfcGF0aCkgPSAwLCAgICAgICAgICBDT05DQVQocm9sZV9wYXRoLCctPicsIFNIQTIoQ09OQ0FUKFFVT1RFKEZST01fVVNFUiksJ0AnLCAgICAgICAgICAgQ09OVkVSVChRVU9URShGUk9NX0hPU1QpIHVzaW5nIHV0ZjhgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgbXlzcWxgLmByb2xlX2VkZ2VzYC5gV0lUSF9BRE1JTl9PUFRJT05gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBXSVRIX0FETUlOX09QVElPTmAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCgoMCA8PiBgcm9sZV9ncmFwaGAuYGNfZW5hYmxlZGApIG9yICgwIDw+IGludGVybmFsX2lzX2VuYWJsZWRfcm9sZSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgbXlzcWxgLmByb2xlX2VkZ2VzYC5gRlJPTV9VU0VSYCwgYG15c3FsYC5gcm9sZV9lZGdlc2AuYEZST01fSE9TVGApKSksIHRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhbHNlKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYElGKGNfZW5hYmxlZCBPUiAgICAgICAgSU5URVJOQUxfSVNfRU5BQkxFRF9ST0xFKEZST01fVVNFUiwgRlJPTV9IT1NUKSwgVFJVRSwgRkFMU0UpYAogICAgICAgICAgICAgICAgICAgICAgIGZyb20gKGBteXNxbGAuYHJvbGVfZWRnZXNgIGpvaW4gYHJvbGVfZ3JhcGhgKQogICAgICAgICAgICAgICAgICAgICAgIHdoZXJlICgoYG15c3FsYC5gcm9sZV9lZGdlc2AuYFRPX1VTRVJgID0gYHJvbGVfZ3JhcGhgLmBjX2Zyb21fdXNlcmApIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY29udmVydChgbXlzcWxgLmByb2xlX2VkZ2VzYC5gVE9fSE9TVGAgdXNpbmcgdXRmOG1iNCkgPSBgcm9sZV9ncmFwaGAuYGNfZnJvbV9ob3N0YCkgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChgcm9sZV9ncmFwaGAuYHJvbGVfcGF0aGAgaXMgbm90IG51bGwpKSkKc2VsZWN0IGRpc3RpbmN0IGludGVybmFsX2dldF91c2VybmFtZShgdHBgLmBHcmFudG9yYCkgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBHUkFOVE9SYCwKICAgICAgICAgICAgICAgIGludGVybmFsX2dldF9ob3N0bmFtZShgdHBgLmBHcmFudG9yYCkgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBHUkFOVE9SX0hPU1RgLAogICAgICAgICAgICAgICAgYHRwYC5gVXNlcmAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYEdSQU5URUVgLAogICAgICAgICAgICAgICAgYHRwYC5gSG9zdGAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYEdSQU5URUVfSE9TVGAsCiAgICAgICAgICAgICAgICAnZGVmJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgVEFCTEVfQ0FUQUxPR2AsCiAgICAgICAgICAgICAgICBgdHBgLmBEYmAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgVEFCTEVfU0NIRU1BYCwKICAgICAgICAgICAgICAgIGB0cGAuYFRhYmxlX25hbWVgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBUQUJMRV9OQU1FYCwKICAgICAgICAgICAgICAgIGB0cGAuYFRhYmxlX3ByaXZgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBQUklWSUxFR0VfVFlQRWAsCiAgICAgICAgICAgICAgICBpZigoZmluZF9pbl9zZXQoJ0dyYW50JywgYHRwYC5gVGFibGVfcHJpdmApID4gMCksICdZRVMnLCAnTk8nKSBBUyBgSVNfR1JBTlRBQkxFYApmcm9tIChgbXlzcWxgLmB0YWJsZXNfcHJpdmAgYHRwYCBqb2luIGByb2xlX2dyYXBoYCBgcmdgCiAgICAgIG9uICgoKGB0cGAuYFVzZXJgID0gYHJnYC5gY19mcm9tX3VzZXJgKSBhbmQgKGNvbnZlcnQoYHRwYC5gSG9zdGAgdXNpbmcgdXRmOG1iNCkgPSBgcmdgLmBjX2Zyb21faG9zdGApKSkpCndoZXJlICgoYHRwYC5gVGFibGVfcHJpdmAgPiAwKSBhbmQgKGByZ2AuYGNfdG9fdXNlcmAgPD4gJycpIGFuZCAoYHJnYC5gY19lbmFibGVkYCA9IHRydWUpKTsKClBLAwQKAAAAAADcgjpYzPf4j1gAAABYAAAAGgAAAC92aWV3L1JPVVRJTkVTLkw2ajZMZy5tZXRhI246Uk9VVElORVMKITxtZD4gW251bGwsIC03MjQ5NDA4MTksIFsyNCwgMjQsIDc1MjgsIDc1MjgsIDc1MzFdLCBbXywgRCwgUSwgRCwgO10sIDAsIDBdClBLAwQKAAAAAADcgjpYOpmY3WsdAABrHQAAGQAAAC92aWV3L1JPVVRJTkVTLkw2ajZMZy5zcWxjcmVhdGUgdmlldyBST1VUSU5FUyBhcwpzZWxlY3QgYHJ0bmAuYG5hbWVgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBTUEVDSUZJQ19OQU1FYCwKICAgICAgIGBjYXRgLmBuYW1lYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgUk9VVElORV9DQVRBTE9HYCwKICAgICAgIGBzY2hgLmBuYW1lYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgUk9VVElORV9TQ0hFTUFgLAogICAgICAgYHJ0bmAuYG5hbWVgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBST1VUSU5FX05BTUVgLAogICAgICAgYHJ0bmAuYHR5cGVgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBST1VUSU5FX1RZUEVgLAogICAgICAgaWYoKGBydG5gLmB0eXBlYCA9ICdQUk9DRURVUkUnKSwgJycsIHN1YnN0cmluZ19pbmRleChzdWJzdHJpbmdfaW5kZXgoYHJ0bmAuYHJlc3VsdF9kYXRhX3R5cGVfdXRmOGAsICcoJywgMSksICcgJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMSkpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgREFUQV9UWVBFYCwKICAgICAgIGludGVybmFsX2RkX2NoYXJfbGVuZ3RoKGBydG5gLmByZXN1bHRfZGF0YV90eXBlYCwgYHJ0bmAuYHJlc3VsdF9jaGFyX2xlbmd0aGAsIGBjb2xsX3Jlc3VsdGAuYG5hbWVgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBDSEFSQUNURVJfTUFYSU1VTV9MRU5HVEhgLAogICAgICAgaW50ZXJuYWxfZGRfY2hhcl9sZW5ndGgoYHJ0bmAuYHJlc3VsdF9kYXRhX3R5cGVgLCBgcnRuYC5gcmVzdWx0X2NoYXJfbGVuZ3RoYCwgYGNvbGxfcmVzdWx0YC5gbmFtZWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYENIQVJBQ1RFUl9PQ1RFVF9MRU5HVEhgLAogICAgICAgYHJ0bmAuYHJlc3VsdF9udW1lcmljX3ByZWNpc2lvbmAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBOVU1FUklDX1BSRUNJU0lPTmAsCiAgICAgICBgcnRuYC5gcmVzdWx0X251bWVyaWNfc2NhbGVgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYE5VTUVSSUNfU0NBTEVgLAogICAgICAgYHJ0bmAuYHJlc3VsdF9kYXRldGltZV9wcmVjaXNpb25gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBEQVRFVElNRV9QUkVDSVNJT05gLAogICAgICAgKGNhc2UgYHJ0bmAuYHJlc3VsdF9kYXRhX3R5cGVgCiAgICAgICAgICAgIHdoZW4gJ01ZU1FMX1RZUEVfU1RSSU5HJyB0aGVuIGlmKChgY3NfcmVzdWx0YC5gbmFtZWAgPSAnYmluYXJ5JyksIE5VTEwsIGBjc19yZXN1bHRgLmBuYW1lYCkKICAgICAgICAgICAgd2hlbiAnTVlTUUxfVFlQRV9WQVJfU1RSSU5HJyB0aGVuIGlmKChgY3NfcmVzdWx0YC5gbmFtZWAgPSAnYmluYXJ5JyksIE5VTEwsIGBjc19yZXN1bHRgLmBuYW1lYCkKICAgICAgICAgICAgd2hlbiAnTVlTUUxfVFlQRV9WQVJDSEFSJyB0aGVuIGlmKChgY3NfcmVzdWx0YC5gbmFtZWAgPSAnYmluYXJ5JyksIE5VTEwsIGBjc19yZXN1bHRgLmBuYW1lYCkKICAgICAgICAgICAgd2hlbiAnTVlTUUxfVFlQRV9USU5ZX0JMT0InIHRoZW4gaWYoKGBjc19yZXN1bHRgLmBuYW1lYCA9ICdiaW5hcnknKSwgTlVMTCwgYGNzX3Jlc3VsdGAuYG5hbWVgKQogICAgICAgICAgICB3aGVuICdNWVNRTF9UWVBFX01FRElVTV9CTE9CJyB0aGVuIGlmKChgY3NfcmVzdWx0YC5gbmFtZWAgPSAnYmluYXJ5JyksIE5VTEwsIGBjc19yZXN1bHRgLmBuYW1lYCkKICAgICAgICAgICAgd2hlbiAnTVlTUUxfVFlQRV9CTE9CJyB0aGVuIGlmKChgY3NfcmVzdWx0YC5gbmFtZWAgPSAnYmluYXJ5JyksIE5VTEwsIGBjc19yZXN1bHRgLmBuYW1lYCkKICAgICAgICAgICAgd2hlbiAnTVlTUUxfVFlQRV9MT05HX0JMT0InIHRoZW4gaWYoKGBjc19yZXN1bHRgLmBuYW1lYCA9ICdiaW5hcnknKSwgTlVMTCwgYGNzX3Jlc3VsdGAuYG5hbWVgKQogICAgICAgICAgICB3aGVuICdNWVNRTF9UWVBFX0VOVU0nIHRoZW4gaWYoKGBjc19yZXN1bHRgLmBuYW1lYCA9ICdiaW5hcnknKSwgTlVMTCwgYGNzX3Jlc3VsdGAuYG5hbWVgKQogICAgICAgICAgICB3aGVuICdNWVNRTF9UWVBFX1NFVCcgdGhlbiBpZigoYGNzX3Jlc3VsdGAuYG5hbWVgID0gJ2JpbmFyeScpLCBOVUxMLCBgY3NfcmVzdWx0YC5gbmFtZWApCiAgICAgICAgICAgIGVsc2UgTlVMTCBlbmQpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYENIQVJBQ1RFUl9TRVRfTkFNRWAsCiAgICAgICAoY2FzZSBgcnRuYC5gcmVzdWx0X2RhdGFfdHlwZWAKICAgICAgICAgICAgd2hlbiAnTVlTUUxfVFlQRV9TVFJJTkcnIHRoZW4gaWYoKGBjc19yZXN1bHRgLmBuYW1lYCA9ICdiaW5hcnknKSwgTlVMTCwgYGNvbGxfcmVzdWx0YC5gbmFtZWApCiAgICAgICAgICAgIHdoZW4gJ01ZU1FMX1RZUEVfVkFSX1NUUklORycgdGhlbiBpZigoYGNzX3Jlc3VsdGAuYG5hbWVgID0gJ2JpbmFyeScpLCBOVUxMLCBgY29sbF9yZXN1bHRgLmBuYW1lYCkKICAgICAgICAgICAgd2hlbiAnTVlTUUxfVFlQRV9WQVJDSEFSJyB0aGVuIGlmKChgY3NfcmVzdWx0YC5gbmFtZWAgPSAnYmluYXJ5JyksIE5VTEwsIGBjb2xsX3Jlc3VsdGAuYG5hbWVgKQogICAgICAgICAgICB3aGVuICdNWVNRTF9UWVBFX1RJTllfQkxPQicgdGhlbiBpZigoYGNzX3Jlc3VsdGAuYG5hbWVgID0gJ2JpbmFyeScpLCBOVUxMLCBgY29sbF9yZXN1bHRgLmBuYW1lYCkKICAgICAgICAgICAgd2hlbiAnTVlTUUxfVFlQRV9NRURJVU1fQkxPQicgdGhlbiBpZigoYGNzX3Jlc3VsdGAuYG5hbWVgID0gJ2JpbmFyeScpLCBOVUxMLCBgY29sbF9yZXN1bHRgLmBuYW1lYCkKICAgICAgICAgICAgd2hlbiAnTVlTUUxfVFlQRV9CTE9CJyB0aGVuIGlmKChgY3NfcmVzdWx0YC5gbmFtZWAgPSAnYmluYXJ5JyksIE5VTEwsIGBjb2xsX3Jlc3VsdGAuYG5hbWVgKQogICAgICAgICAgICB3aGVuICdNWVNRTF9UWVBFX0xPTkdfQkxPQicgdGhlbiBpZigoYGNzX3Jlc3VsdGAuYG5hbWVgID0gJ2JpbmFyeScpLCBOVUxMLCBgY29sbF9yZXN1bHRgLmBuYW1lYCkKICAgICAgICAgICAgd2hlbiAnTVlTUUxfVFlQRV9FTlVNJyB0aGVuIGlmKChgY3NfcmVzdWx0YC5gbmFtZWAgPSAnYmluYXJ5JyksIE5VTEwsIGBjb2xsX3Jlc3VsdGAuYG5hbWVgKQogICAgICAgICAgICB3aGVuICdNWVNRTF9UWVBFX1NFVCcgdGhlbiBpZigoYGNzX3Jlc3VsdGAuYG5hbWVgID0gJ2JpbmFyeScpLCBOVUxMLCBgY29sbF9yZXN1bHRgLmBuYW1lYCkKICAgICAgICAgICAgZWxzZSBOVUxMIGVuZCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgQ09MTEFUSU9OX05BTUVgLAogICAgICAgaWYoKGBydG5gLmB0eXBlYCA9ICdQUk9DRURVUkUnKSwgTlVMTCwKICAgICAgICAgIGBydG5gLmByZXN1bHRfZGF0YV90eXBlX3V0ZjhgKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgRFREX0lERU5USUZJRVJgLAogICAgICAgaWYoKGBydG5gLmBleHRlcm5hbF9sYW5ndWFnZWAgPSAnU1FMJyksICdTUUwnLCAnRVhURVJOQUwnKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBST1VUSU5FX0JPRFlgLAogICAgICAgaWYoY2FuX2FjY2Vzc19yb3V0aW5lKGBzY2hgLmBuYW1lYCwgYHJ0bmAuYG5hbWVgLCBgcnRuYC5gdHlwZWAsIGBydG5gLmBkZWZpbmVyYCwgdHJ1ZSksIGBydG5gLmBkZWZpbml0aW9uX3V0ZjhgLAogICAgICAgICAgTlVMTCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBST1VUSU5FX0RFRklOSVRJT05gLAogICAgICAgTlVMTCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBFWFRFUk5BTF9OQU1FYCwKICAgICAgIGBydG5gLmBleHRlcm5hbF9sYW5ndWFnZWAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgRVhURVJOQUxfTEFOR1VBR0VgLAogICAgICAgJ1NRTCcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBQQVJBTUVURVJfU1RZTEVgLAogICAgICAgaWYoKGBydG5gLmBpc19kZXRlcm1pbmlzdGljYCA9IDApLCAnTk8nLCAnWUVTJykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBJU19ERVRFUk1JTklTVElDYCwKICAgICAgIGBydG5gLmBzcWxfZGF0YV9hY2Nlc3NgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgU1FMX0RBVEFfQUNDRVNTYCwKICAgICAgIE5VTEwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgU1FMX1BBVEhgLAogICAgICAgYHJ0bmAuYHNlY3VyaXR5X3R5cGVgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBTRUNVUklUWV9UWVBFYCwKICAgICAgIGBydG5gLmBjcmVhdGVkYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgQ1JFQVRFRGAsCiAgICAgICBgcnRuYC5gbGFzdF9hbHRlcmVkYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYExBU1RfQUxURVJFRGAsCiAgICAgICBgcnRuYC5gc3FsX21vZGVgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYFNRTF9NT0RFYCwKICAgICAgIGBydG5gLmBjb21tZW50YCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgUk9VVElORV9DT01NRU5UYCwKICAgICAgIGBydG5gLmBkZWZpbmVyYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgREVGSU5FUmAsCiAgICAgICBgY3NfY2xpZW50YC5gbmFtZWAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYENIQVJBQ1RFUl9TRVRfQ0xJRU5UYCwKICAgICAgIGBjb2xsX2Nvbm5gLmBuYW1lYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgQ09MTEFUSU9OX0NPTk5FQ1RJT05gLAogICAgICAgYGNvbGxfZGJgLmBuYW1lYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBEQVRBQkFTRV9DT0xMQVRJT05gCmZyb20gKCgoKCgoKChgbXlzcWxgLmByb3V0aW5lc2AgYHJ0bmAgam9pbiBgbXlzcWxgLmBzY2hlbWF0YWAgYHNjaGAKICAgICAgICAgICAgIG9uICgoYHJ0bmAuYHNjaGVtYV9pZGAgPSBgc2NoYC5gaWRgKSkpIGpvaW4gYG15c3FsYC5gY2F0YWxvZ3NgIGBjYXRgCiAgICAgICAgICAgIG9uICgoYGNhdGAuYGlkYCA9IGBzY2hgLmBjYXRhbG9nX2lkYCkpKSBqb2luIGBteXNxbGAuYGNvbGxhdGlvbnNgIGBjb2xsX2NsaWVudGAKICAgICAgICAgICBvbiAoKGBjb2xsX2NsaWVudGAuYGlkYCA9IGBydG5gLmBjbGllbnRfY29sbGF0aW9uX2lkYCkpKSBqb2luIGBteXNxbGAuYGNoYXJhY3Rlcl9zZXRzYCBgY3NfY2xpZW50YAogICAgICAgICAgb24gKChgY3NfY2xpZW50YC5gaWRgID0gYGNvbGxfY2xpZW50YC5gY2hhcmFjdGVyX3NldF9pZGApKSkgam9pbiBgbXlzcWxgLmBjb2xsYXRpb25zYCBgY29sbF9jb25uYAogICAgICAgICBvbiAoKGBjb2xsX2Nvbm5gLmBpZGAgPSBgcnRuYC5gY29ubmVjdGlvbl9jb2xsYXRpb25faWRgKSkpIGpvaW4gYG15c3FsYC5gY29sbGF0aW9uc2AgYGNvbGxfZGJgCiAgICAgICAgb24gKChgY29sbF9kYmAuYGlkYCA9IGBydG5gLmBzY2hlbWFfY29sbGF0aW9uX2lkYCkpKSBsZWZ0IGpvaW4gYG15c3FsYC5gY29sbGF0aW9uc2AgYGNvbGxfcmVzdWx0YAogICAgICAgb24gKChgY29sbF9yZXN1bHRgLmBpZGAgPSBgcnRuYC5gcmVzdWx0X2NvbGxhdGlvbl9pZGApKSkgbGVmdCBqb2luIGBteXNxbGAuYGNoYXJhY3Rlcl9zZXRzYCBgY3NfcmVzdWx0YAogICAgICBvbiAoKGBjc19yZXN1bHRgLmBpZGAgPSBgY29sbF9yZXN1bHRgLmBjaGFyYWN0ZXJfc2V0X2lkYCkpKQp3aGVyZSAoMCA8PiBjYW5fYWNjZXNzX3JvdXRpbmUoYHNjaGAuYG5hbWVgLCBgcnRuYC5gbmFtZWAsIGBydG5gLmB0eXBlYCwgYHJ0bmAuYGRlZmluZXJgLCBmYWxzZSkpOwoKUEsDBAoAAAAAANyCOliv3CdMVQAAAFUAAAAaAAAAL3ZpZXcvU0NIRU1BVEEuems4UUJRLm1ldGEjbjpTQ0hFTUFUQQohPG1kPiBbbnVsbCwgMTU0NTk4NjY1OCwgWzI0LCAyNCwgNjk4LCA2OTgsIDcwMV0sIFtfLCBELCBRLCBELCA7XSwgMCwgMF0KUEsDBAoAAAAAANyCOliSv9rbvQIAAL0CAAAZAAAAL3ZpZXcvU0NIRU1BVEEuems4UUJRLnNxbGNyZWF0ZSB2aWV3IFNDSEVNQVRBIGFzCnNlbGVjdCBgY2F0YC5gbmFtZWAgICAgICAgICAgICAgICBBUyBgQ0FUQUxPR19OQU1FYCwKICAgICAgIGBzY2hgLmBuYW1lYCAgICAgICAgICAgICAgIEFTIGBTQ0hFTUFfTkFNRWAsCiAgICAgICBgY3NgLmBuYW1lYCAgICAgICAgICAgICAgICBBUyBgREVGQVVMVF9DSEFSQUNURVJfU0VUX05BTUVgLAogICAgICAgYGNvbGAuYG5hbWVgICAgICAgICAgICAgICAgQVMgYERFRkFVTFRfQ09MTEFUSU9OX05BTUVgLAogICAgICAgTlVMTCAgICAgICAgICAgICAgICAgICAgICAgQVMgYFNRTF9QQVRIYCwKICAgICAgIGBzY2hgLmBkZWZhdWx0X2VuY3J5cHRpb25gIEFTIGBERUZBVUxUX0VOQ1JZUFRJT05gCmZyb20gKCgoYG15c3FsYC5gc2NoZW1hdGFgIGBzY2hgIGpvaW4gYG15c3FsYC5gY2F0YWxvZ3NgIGBjYXRgCiAgICAgICAgb24gKChgY2F0YC5gaWRgID0gYHNjaGAuYGNhdGFsb2dfaWRgKSkpIGpvaW4gYG15c3FsYC5gY29sbGF0aW9uc2AgYGNvbGAKICAgICAgIG9uICgoYHNjaGAuYGRlZmF1bHRfY29sbGF0aW9uX2lkYCA9IGBjb2xgLmBpZGApKSkgam9pbiBgbXlzcWxgLmBjaGFyYWN0ZXJfc2V0c2AgYGNzYAogICAgICBvbiAoKGBjb2xgLmBjaGFyYWN0ZXJfc2V0X2lkYCA9IGBjc2AuYGlkYCkpKQp3aGVyZSAoMCA8PiBjYW5fYWNjZXNzX2RhdGFiYXNlKGBzY2hgLmBuYW1lYCkpOwoKUEsDBAoAAAAAANyCOlho23A5YAAAAGAAAAAlAAAAL3ZpZXcvU0NIRU1BVEFfRVhURU5TSU9OUy5KUkhhSlEubWV0YSNuOlNDSEVNQVRBX0VYVEVOU0lPTlMKITxtZD4gW251bGwsIC05MTk4NTM0MzAsIFszNSwgMzUsIDM3MCwgMzcwLCAzNzNdLCBbXywgRCwgUSwgRCwgO10sIDAsIDBdClBLAwQKAAAAAADcgjpYnOrnuXUBAAB1AQAAJAAAAC92aWV3L1NDSEVNQVRBX0VYVEVOU0lPTlMuSlJIYUpRLnNxbGNyZWF0ZSB2aWV3IFNDSEVNQVRBX0VYVEVOU0lPTlMgYXMKc2VsZWN0IGBjYXRgLmBuYW1lYCAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBDQVRBTE9HX05BTUVgLAogICAgICAgYHNjaGAuYG5hbWVgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYFNDSEVNQV9OQU1FYCwKICAgICAgIGdldF9kZF9zY2hlbWFfb3B0aW9ucyhgc2NoYC5gb3B0aW9uc2ApIEFTIGBPUFRJT05TYApmcm9tIChgbXlzcWxgLmBzY2hlbWF0YWAgYHNjaGAgam9pbiBgbXlzcWxgLmBjYXRhbG9nc2AgYGNhdGAgb24gKChgY2F0YC5gaWRgID0gYHNjaGAuYGNhdGFsb2dfaWRgKSkpCndoZXJlICgwIDw+IGNhbl9hY2Nlc3NfZGF0YWJhc2UoYHNjaGAuYG5hbWVgKSk7CgpQSwMECgAAAAAA3II6WKniUXJaAAAAWgAAABwAAAAvdmlldy9TVEFUSVNUSUNTLkk1MUdGdy5tZXRhI246U1RBVElTVElDUwohPG1kPiBbbnVsbCwgLTY2MDA2NTEzNywgWzI2LCAyNiwgNDEyMiwgNDEyMiwgNDEyNV0sIFtfLCBELCBRLCBELCA7XSwgMCwgMF0KUEsDBAoAAAAAANyCOli1KXLrHRAAAB0QAAAbAAAAL3ZpZXcvU1RBVElTVElDUy5JNTFHRncuc3FsY3JlYXRlIHZpZXcgU1RBVElTVElDUyBhcwpzZWxlY3QgYGNhdGAuYG5hbWVgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgVEFCTEVfQ0FUQUxPR2AsCiAgICAgICBgc2NoYC5gbmFtZWAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBUQUJMRV9TQ0hFTUFgLAogICAgICAgYHRibGAuYG5hbWVgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgVEFCTEVfTkFNRWAsCiAgICAgICBpZigoKGBpZHhgLmB0eXBlYCA9ICdQUklNQVJZJykgb3IgKGBpZHhgLmB0eXBlYCA9ICdVTklRVUUnKSksIDAsIDEpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBOT05fVU5JUVVFYCwKICAgICAgIGBzY2hgLmBuYW1lYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYElOREVYX1NDSEVNQWAsCiAgICAgICAoYGlkeGAuYG5hbWVgIGNvbGxhdGUgdXRmOG1iM190b2xvd2VyX2NpKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBJTkRFWF9OQU1FYCwKICAgICAgIGBpY3VgLmBvcmRpbmFsX3Bvc2l0aW9uYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYFNFUV9JTl9JTkRFWGAsCiAgICAgICBpZigoYGNvbGAuYGhpZGRlbmAgPSAnU1FMJyksIE5VTEwsCiAgICAgICAgICAoYGNvbGAuYG5hbWVgIGNvbGxhdGUgdXRmOG1iM190b2xvd2VyX2NpKSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBDT0xVTU5fTkFNRWAsCiAgICAgICAoY2FzZSB3aGVuIChgaWN1YC5gb3JkZXJgID0gJ0RFU0MnKSB0aGVuICdEJyB3aGVuIChgaWN1YC5gb3JkZXJgID0gJ0FTQycpIHRoZW4gJ0EnIGVsc2UgTlVMTCBlbmQpIEFTIGBDT0xMQVRJT05gLAogICAgICAgaW50ZXJuYWxfaW5kZXhfY29sdW1uX2NhcmRpbmFsaXR5KGBzY2hgLmBuYW1lYCwgYHRibGAuYG5hbWVgLCBgaWR4YC5gbmFtZWAsIGBjb2xgLmBuYW1lYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgaWR4YC5gb3JkaW5hbF9wb3NpdGlvbmAsIGBpY3VgLmBvcmRpbmFsX3Bvc2l0aW9uYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigoYHRibGAuYHBhcnRpdGlvbl90eXBlYCBpcyBudWxsKSwgYHRibGAuYGVuZ2luZWAsICcnKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgdGJsYC5gc2VfcHJpdmF0ZV9pZGAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKChgdGJsYC5gaGlkZGVuYCA8PiAnVmlzaWJsZScpIG9yICgwIDw+IGBpZHhgLmBoaWRkZW5gKSBvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCA8PiBgaWN1YC5gaGlkZGVuYCkpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvYWxlc2NlKGBzdGF0YC5gY2FyZGluYWxpdHlgLCBjYXN0KC0oMSkgYXMgdW5zaWduZWQpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2FsZXNjZShjYXN0KGBzdGF0YC5gY2FjaGVkX3RpbWVgIGFzIHVuc2lnbmVkKSwgMCkpICAgICAgICAgICAgQVMgYENBUkRJTkFMSVRZYCwKICAgICAgIGdldF9kZF9pbmRleF9zdWJfcGFydF9sZW5ndGgoYGljdWAuYGxlbmd0aGAsIGBjb2xgLmB0eXBlYCwgYGNvbGAuYGNoYXJfbGVuZ3RoYCwgYGNvbGAuYGNvbGxhdGlvbl9pZGAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBpZHhgLmB0eXBlYCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBTVUJfUEFSVGAsCiAgICAgICBOVUxMICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBQQUNLRURgLAogICAgICAgaWYoKGBjb2xgLmBpc19udWxsYWJsZWAgPSAxKSwgJ1lFUycsICcnKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgTlVMTEFCTEVgLAogICAgICAgKGNhc2UKICAgICAgICAgICAgd2hlbiAoYGlkeGAuYHR5cGVgID0gJ1NQQVRJQUwnKSB0aGVuICdTUEFUSUFMJwogICAgICAgICAgICB3aGVuIChgaWR4YC5gYWxnb3JpdGhtYCA9ICdTRV9QUklWQVRFJykgdGhlbiAnJwogICAgICAgICAgICBlbHNlIGBpZHhgLmBhbGdvcml0aG1gIGVuZCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgSU5ERVhfVFlQRWAsCiAgICAgICBpZigoKGBpZHhgLmB0eXBlYCA9ICdQUklNQVJZJykgb3IgKGBpZHhgLmB0eXBlYCA9ICdVTklRVUUnKSksICcnLAogICAgICAgICAgaWYoaW50ZXJuYWxfa2V5c19kaXNhYmxlZChgdGJsYC5gb3B0aW9uc2ApLCAnZGlzYWJsZWQnLCAnJykpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgQ09NTUVOVGAsCiAgICAgICBgaWR4YC5gY29tbWVudGAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBJTkRFWF9DT01NRU5UYCwKICAgICAgIGlmKGBpZHhgLmBpc192aXNpYmxlYCwgJ1lFUycsICdOTycpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYElTX1ZJU0lCTEVgLAogICAgICAgaWYoKGBjb2xgLmBoaWRkZW5gID0gJ1NRTCcpLCBgY29sYC5gZ2VuZXJhdGlvbl9leHByZXNzaW9uX3V0ZjhgLCBOVUxMKSAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgRVhQUkVTU0lPTmAKZnJvbSAoKCgoKCgoYG15c3FsYC5gaW5kZXhfY29sdW1uX3VzYWdlYCBgaWN1YCBqb2luIGBteXNxbGAuYGluZGV4ZXNgIGBpZHhgCiAgICAgICAgICAgIG9uICgoYGlkeGAuYGlkYCA9IGBpY3VgLmBpbmRleF9pZGApKSkgam9pbiBgbXlzcWxgLmB0YWJsZXNgIGB0YmxgCiAgICAgICAgICAgb24gKChgaWR4YC5gdGFibGVfaWRgID0gYHRibGAuYGlkYCkpKSBqb2luIGBteXNxbGAuYGNvbHVtbnNgIGBjb2xgCiAgICAgICAgICBvbiAoKGBpY3VgLmBjb2x1bW5faWRgID0gYGNvbGAuYGlkYCkpKSBqb2luIGBteXNxbGAuYHNjaGVtYXRhYCBgc2NoYAogICAgICAgICBvbiAoKGB0YmxgLmBzY2hlbWFfaWRgID0gYHNjaGAuYGlkYCkpKSBqb2luIGBteXNxbGAuYGNhdGFsb2dzYCBgY2F0YAogICAgICAgIG9uICgoYGNhdGAuYGlkYCA9IGBzY2hgLmBjYXRhbG9nX2lkYCkpKSBqb2luIGBteXNxbGAuYGNvbGxhdGlvbnNgIGBjb2xsYAogICAgICAgb24gKChgdGJsYC5gY29sbGF0aW9uX2lkYCA9IGBjb2xsYC5gaWRgKSkpIGxlZnQgam9pbiBgbXlzcWxgLmBpbmRleF9zdGF0c2AgYHN0YXRgCiAgICAgIG9uICgoKGB0YmxgLmBuYW1lYCA9IGBzdGF0YC5gdGFibGVfbmFtZWApIGFuZCAoYHNjaGAuYG5hbWVgID0gYHN0YXRgLmBzY2hlbWFfbmFtZWApIGFuZAogICAgICAgICAgIChgaWR4YC5gbmFtZWAgPSBgc3RhdGAuYGluZGV4X25hbWVgKSBhbmQgKGBjb2xgLmBuYW1lYCA9IGBzdGF0YC5gY29sdW1uX25hbWVgKSkpKQp3aGVyZSAoKDAgPD4gY2FuX2FjY2Vzc190YWJsZShgc2NoYC5gbmFtZWAsIGB0YmxgLmBuYW1lYCkpIGFuZAogICAgICAgKDAgPD4gaXNfdmlzaWJsZV9kZF9vYmplY3QoYHRibGAuYGhpZGRlbmAsICgoMCA8PiBgaWR4YC5gaGlkZGVuYCkgb3IgKDAgPD4gYGljdWAuYGhpZGRlbmApKSwgYGlkeGAuYG9wdGlvbnNgKSkpOwoKUEsDBAoAAAAAANyCOlhfYT8tXwAAAF8AAAAlAAAAL3ZpZXcvU1RfR0VPTUVUUllfQ09MVU1OUy5EbmZMX2cubWV0YSNuOlNUX0dFT01FVFJZX0NPTFVNTlMKITxtZD4gW251bGwsIDUyMTU2Mjk3NSwgWzM1LCAzNSwgODk4LCA4OTgsIDkwMV0sIFtfLCBELCBRLCBELCA7XSwgMCwgMF0KUEsDBAoAAAAAANyCOlhaeEAEhQMAAIUDAAAkAAAAL3ZpZXcvU1RfR0VPTUVUUllfQ09MVU1OUy5EbmZMX2cuc3FsY3JlYXRlIHZpZXcgU1RfR0VPTUVUUllfQ09MVU1OUyBhcwpzZWxlY3QgYGluZm9ybWF0aW9uX3NjaGVtYWAuYGNvbHNgLmBUQUJMRV9DQVRBTE9HYCBBUyBgVEFCTEVfQ0FUQUxPR2AsCiAgICAgICBgaW5mb3JtYXRpb25fc2NoZW1hYC5gY29sc2AuYFRBQkxFX1NDSEVNQWAgIEFTIGBUQUJMRV9TQ0hFTUFgLAogICAgICAgYGluZm9ybWF0aW9uX3NjaGVtYWAuYGNvbHNgLmBUQUJMRV9OQU1FYCAgICBBUyBgVEFCTEVfTkFNRWAsCiAgICAgICBgaW5mb3JtYXRpb25fc2NoZW1hYC5gY29sc2AuYENPTFVNTl9OQU1FYCAgIEFTIGBDT0xVTU5fTkFNRWAsCiAgICAgICBgaW5mb3JtYXRpb25fc2NoZW1hYC5gc3JzYC5gU1JTX05BTUVgICAgICAgIEFTIGBTUlNfTkFNRWAsCiAgICAgICBgaW5mb3JtYXRpb25fc2NoZW1hYC5gY29sc2AuYFNSU19JRGAgICAgICAgIEFTIGBTUlNfSURgLAogICAgICAgYGluZm9ybWF0aW9uX3NjaGVtYWAuYGNvbHNgLmBEQVRBX1RZUEVgICAgICBBUyBgR0VPTUVUUllfVFlQRV9OQU1FYApmcm9tIChgaW5mb3JtYXRpb25fc2NoZW1hYC5gQ09MVU1OU2AgYGNvbHNgIGxlZnQgam9pbiBgaW5mb3JtYXRpb25fc2NoZW1hYC5gU1RfU1BBVElBTF9SRUZFUkVOQ0VfU1lTVEVNU2AgYHNyc2AKICAgICAgb24gKChgaW5mb3JtYXRpb25fc2NoZW1hYC5gY29sc2AuYFNSU19JRGAgPSBgaW5mb3JtYXRpb25fc2NoZW1hYC5gc3JzYC5gU1JTX0lEYCkpKQp3aGVyZSAoYGluZm9ybWF0aW9uX3NjaGVtYWAuYGNvbHNgLmBEQVRBX1RZUEVgIGluCiAgICAgICAoJ2dlb21ldHJ5JywgJ3BvaW50JywgJ2xpbmVzdHJpbmcnLCAncG9seWdvbicsICdtdWx0aXBvaW50JywgJ211bHRpbGluZXN0cmluZycsICdtdWx0aXBvbHlnb24nLAogICAgICAgICdnZW9tY29sbGVjdGlvbicpKTsKClBLAwQKAAAAAADcgjpYN9BgsGgAAABoAAAALgAAAC92aWV3L1NUX1NQQVRJQUxfUkVGRVJFTkNFX1NZU1RFTVMuOTllUXNnLm1ldGEjbjpTVF9TUEFUSUFMX1JFRkVSRU5DRV9TWVNURU1TCiE8bWQ+IFtudWxsLCAtOTI4ODIxMTQsIFs0NCwgNDQsIDYzNywgNjM3LCA2NDBdLCBbXywgRCwgUSwgRCwgO10sIDAsIDBdClBLAwQKAAAAAADcgjpYtyOyGIACAACAAgAALQAAAC92aWV3L1NUX1NQQVRJQUxfUkVGRVJFTkNFX1NZU1RFTVMuOTllUXNnLnNxbGNyZWF0ZSB2aWV3IFNUX1NQQVRJQUxfUkVGRVJFTkNFX1NZU1RFTVMgYXMKc2VsZWN0IGBteXNxbGAuYHN0X3NwYXRpYWxfcmVmZXJlbmNlX3N5c3RlbXNgLmBuYW1lYCAgICAgICAgICAgICAgICAgICAgIEFTIGBTUlNfTkFNRWAsCiAgICAgICBgbXlzcWxgLmBzdF9zcGF0aWFsX3JlZmVyZW5jZV9zeXN0ZW1zYC5gaWRgICAgICAgICAgICAgICAgICAgICAgICBBUyBgU1JTX0lEYCwKICAgICAgIGBteXNxbGAuYHN0X3NwYXRpYWxfcmVmZXJlbmNlX3N5c3RlbXNgLmBvcmdhbml6YXRpb25gICAgICAgICAgICAgIEFTIGBPUkdBTklaQVRJT05gLAogICAgICAgYG15c3FsYC5gc3Rfc3BhdGlhbF9yZWZlcmVuY2Vfc3lzdGVtc2AuYG9yZ2FuaXphdGlvbl9jb29yZHN5c19pZGAgQVMgYE9SR0FOSVpBVElPTl9DT09SRFNZU19JRGAsCiAgICAgICBgbXlzcWxgLmBzdF9zcGF0aWFsX3JlZmVyZW5jZV9zeXN0ZW1zYC5gZGVmaW5pdGlvbmAgICAgICAgICAgICAgICBBUyBgREVGSU5JVElPTmAsCiAgICAgICBgbXlzcWxgLmBzdF9zcGF0aWFsX3JlZmVyZW5jZV9zeXN0ZW1zYC5gZGVzY3JpcHRpb25gICAgICAgICAgICAgICBBUyBgREVTQ1JJUFRJT05gCmZyb20gYG15c3FsYC5gc3Rfc3BhdGlhbF9yZWZlcmVuY2Vfc3lzdGVtc2A7CgpQSwMECgAAAAAA3II6WFPG86ZjAAAAYwAAACUAAAAvdmlldy9TVF9VTklUU19PRl9NRUFTVVJFLjVQX0txZy5tZXRhI246U1RfVU5JVFNfT0ZfTUVBU1VSRQohPG1kPiBbbnVsbCwgMTE0MDY2MzcxNywgWzM1LCAzNSwgMjkwOSwgMjkwOSwgMjkxMl0sIFtfLCBELCBRLCBELCA7XSwgMCwgMF0KUEsDBAoAAAAAANyCOlhShoESYAsAAGALAAAkAAAAL3ZpZXcvU1RfVU5JVFNfT0ZfTUVBU1VSRS41UF9LcWcuc3FsY3JlYXRlIHZpZXcgU1RfVU5JVFNfT0ZfTUVBU1VSRSBhcwpzZWxlY3QgYFNUX1VOSVRTX09GX01FQVNVUkVgLmBVTklUX05BTUVgICAgICAgICAgQVMgYFVOSVRfTkFNRWAsCiAgICAgICBgU1RfVU5JVFNfT0ZfTUVBU1VSRWAuYFVOSVRfVFlQRWAgICAgICAgICBBUyBgVU5JVF9UWVBFYCwKICAgICAgIGBTVF9VTklUU19PRl9NRUFTVVJFYC5gQ09OVkVSU0lPTl9GQUNUT1JgIEFTIGBDT05WRVJTSU9OX0ZBQ1RPUmAsCiAgICAgICBgU1RfVU5JVFNfT0ZfTUVBU1VSRWAuYERFU0NSSVBUSU9OYCAgICAgICBBUyBgREVTQ1JJUFRJT05gCmZyb20ganNvbl90YWJsZSgKICAgICAgICAgICAgICdbWyJCcml0aXNoIGxpbmsgKFNlYXJzIDE5MjIgdHJ1bmNhdGVkKSIsIkxJTkVBUiIsIiIsMC4yMDExNjc1Nl0sWyJmb290IiwiTElORUFSIiwiIiwwLjMwNDhdLFsiQnJpdGlzaCB5YXJkIChCZW5vaXQgMTg5NSBCKSIsIkxJTkVBUiIsIiIsMC45MTQzOTkyMDQyODk4MTI0XSxbIkJyaXRpc2ggeWFyZCAoU2VhcnMgMTkyMiB0cnVuY2F0ZWQpIiwiTElORUFSIiwiIiwwLjkxNDM5OF0sWyJCcml0aXNoIHlhcmQgKEJlbm9pdCAxODk1IEEpIiwiTElORUFSIiwiIiwwLjkxNDM5OTJdLFsiQnJpdGlzaCBjaGFpbiAoU2VhcnMgMTkyMikiLCJMSU5FQVIiLCIiLDIwLjExNjc2NTEyMTU1MjYzMl0sWyJDbGFya2VcJ3MgbGluayIsIkxJTkVBUiIsIiIsMC4yMDExNjYxOTUxNjRdLFsiQ2xhcmtlXCdzIHlhcmQiLCJMSU5FQVIiLCIiLDAuOTE0MzkxNzk2Ml0sWyJCcml0aXNoIGNoYWluIChCZW5vaXQgMTg5NSBBKSIsIkxJTkVBUiIsIiIsMjAuMTE2NzgyNF0sWyJraWxvbWV0cmUiLCJMSU5FQVIiLCIiLDEwMDBdLFsiVVMgc3VydmV5IGZvb3QiLCJMSU5FQVIiLCIiLDAuMzA0ODAwNjA5NjAxMjE5MjRdLFsiQnJpdGlzaCB5YXJkIChTZWFycyAxOTIyKSIsIkxJTkVBUiIsIiIsMC45MTQzOTg0MTQ2MTYwMjg3XSxbImNlbnRpbWV0cmUiLCJMSU5FQVIiLCIiLDAuMDFdLFsibWlsbGltZXRyZSIsIkxJTkVBUiIsIiIsMC4wMDFdLFsiQnJpdGlzaCBmb290IChTZWFycyAxOTIyKSIsIkxJTkVBUiIsIiIsMC4zMDQ3OTk0NzE1Mzg2NzYyXSxbIkJyaXRpc2ggbGluayAoU2VhcnMgMTkyMikiLCJMSU5FQVIiLCIiLDAuMjAxMTY3NjUxMjE1NTI2M10sWyJmYXRob20iLCJMSU5FQVIiLCIiLDEuODI4OF0sWyJVUyBzdXJ2ZXkgY2hhaW4iLCJMSU5FQVIiLCIiLDIwLjExNjg0MDIzMzY4MDQ3XSxbIlVTIHN1cnZleSBsaW5rIiwiTElORUFSIiwiIiwwLjIwMTE2ODQwMjMzNjgwNDddLFsibWV0cmUiLCJMSU5FQVIiLCIiLDFdLFsiR2VybWFuIGxlZ2FsIG1ldHJlIiwiTElORUFSIiwiIiwxLjAwMDAxMzU5NjVdLFsibmF1dGljYWwgbWlsZSIsIkxJTkVBUiIsIiIsMTg1Ml0sWyJCcml0aXNoIGxpbmsgKEJlbm9pdCAxODk1IEEpIiwiTElORUFSIiwiIiwwLjIwMTE2NzgyNF0sWyJCcml0aXNoIGZvb3QgKEJlbm9pdCAxODk1IEIpIiwiTElORUFSIiwiIiwwLjMwNDc5OTczNDc2MzI3MDc3XSxbIkJyaXRpc2ggY2hhaW4gKEJlbm9pdCAxODk1IEIpIiwiTElORUFSIiwiIiwyMC4xMTY3ODI0OTQzNzU4NzJdLFsiU3RhdHV0ZSBtaWxlIiwiTElORUFSIiwiIiwxNjA5LjM0NF0sWyJCcml0aXNoIGxpbmsgKEJlbm9pdCAxODk1IEIpIiwiTElORUFSIiwiIiwwLjIwMTE2NzgyNDk0Mzc1ODddLFsiQnJpdGlzaCBmb290ICgxODY1KSIsIkxJTkVBUiIsIiIsMC4zMDQ4MDA4MzMzMzMzMzMzNV0sWyJJbmRpYW4gZm9vdCAoMTk2MikiLCJMSU5FQVIiLCIiLDAuMzA0Nzk5Nl0sWyJJbmRpYW4gZm9vdCIsIkxJTkVBUiIsIiIsMC4zMDQ3OTk1MTAyNDgxNDY5NF0sWyJJbmRpYW4gZm9vdCAoMTkzNykiLCJMSU5FQVIiLCIiLDAuMzA0Nzk4NDFdLFsiQnJpdGlzaCBmb290IChCZW5vaXQgMTg5NSBBKSIsIkxJTkVBUiIsIiIsMC4zMDQ3OTk3MzMzMzMzMzMzXSxbIkluZGlhbiBmb290ICgxOTc1KSIsIkxJTkVBUiIsIiIsMC4zMDQ3OTk1XSxbIkluZGlhbiB5YXJkICgxOTYyKSIsIkxJTkVBUiIsIiIsMC45MTQzOTg4XSxbIkluZGlhbiB5YXJkICgxOTc1KSIsIkxJTkVBUiIsIiIsMC45MTQzOTg1XSxbIkluZGlhbiB5YXJkIiwiTElORUFSIiwiIiwwLjkxNDM5ODUzMDc0NDQ0MDhdLFsibGluayIsIkxJTkVBUiIsIiIsMC4yMDExNjhdLFsiQnJpdGlzaCBmb290ICgxOTM2KSIsIkxJTkVBUiIsIiIsMC4zMDQ4MDA3NDkxXSxbIkNsYXJrZVwncyBjaGFpbiIsIkxJTkVBUiIsIiIsMjAuMTE2NjE5NTE2NF0sWyJ5YXJkIiwiTElORUFSIiwiIiwwLjkxNDRdLFsiVVMgc3VydmV5IG1pbGUiLCJMSU5FQVIiLCIiLDE2MDkuMzQ3MjE4Njk0NDM3NV0sWyJHb2xkIENvYXN0IGZvb3QiLCJMSU5FQVIiLCIiLDAuMzA0Nzk5NzEwMTgxNTA4OF0sWyJjaGFpbiIsIkxJTkVBUiIsIiIsMjAuMTE2OF0sWyJJbmRpYW4geWFyZCAoMTkzNykiLCJMSU5FQVIiLCIiLDAuOTE0Mzk1MjNdLFsiQnJpdGlzaCBmb290IChTZWFycyAxOTIyIHRydW5jYXRlZCkiLCJMSU5FQVIiLCIiLDAuMzA0Nzk5MzMzMzMzMzMzMzddLFsiQ2xhcmtlXCdzIGZvb3QiLCJMSU5FQVIiLCIiLDAuMzA0Nzk3MjY1NF0sWyJCcml0aXNoIGNoYWluIChTZWFycyAxOTIyIHRydW5jYXRlZCkiLCJMSU5FQVIiLCIiLDIwLjExNjc1Nl1dJywKICAgICAgICAgICAgICckWypdJwogICAgICAgICAgICAgY29sdW1ucyAoYFVOSVRfTkFNRWAgdmFyY2hhcigyNTUpIGNoYXJhY3RlciBzZXQgdXRmOG1iNCBwYXRoICckWzBdJywgYFVOSVRfVFlQRWAgdmFyY2hhcig3KSBjaGFyYWN0ZXIgc2V0IHV0ZjhtYjQgcGF0aCAnJFsxXScsIGBERVNDUklQVElPTmAgdmFyY2hhcigyNTUpIGNoYXJhY3RlciBzZXQgdXRmOG1iNCBwYXRoICckWzJdJywgYENPTlZFUlNJT05fRkFDVE9SYCBkb3VibGUgcGF0aCAnJFszXScpKSBgU1RfVU5JVFNfT0ZfTUVBU1VSRWA7CgpQSwMECgAAAAAA3II6WPCYJk5SAAAAUgAAABgAAAAvdmlldy9UQUJMRVMuWlRJS2t3Lm1ldGEjbjpUQUJMRVMKITxtZD4gW251bGwsIDM2ODgyOSwgWzIyLCAyMiwgNzMxMSwgNzMxMSwgNzMxNF0sIFtfLCBELCBRLCBELCA7XSwgMCwgMF0KUEsDBAoAAAAAANyCOlhi8YpqkhwAAJIcAAAXAAAAL3ZpZXcvVEFCTEVTLlpUSUtrdy5zcWxjcmVhdGUgdmlldyBUQUJMRVMgYXMKc2VsZWN0IGBjYXRgLmBuYW1lYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBUQUJMRV9DQVRBTE9HYCwKICAgICAgIGBzY2hgLmBuYW1lYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBUQUJMRV9TQ0hFTUFgLAogICAgICAgYHRibGAuYG5hbWVgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYFRBQkxFX05BTUVgLAogICAgICAgYHRibGAuYHR5cGVgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYFRBQkxFX1RZUEVgLAogICAgICAgaWYoKGB0YmxgLmB0eXBlYCA9ICdCQVNFIFRBQkxFJyksIGB0YmxgLmBlbmdpbmVgLCBOVUxMKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYEVOR0lORWAsCiAgICAgICBpZigoYHRibGAuYHR5cGVgID0gJ1ZJRVcnKSwgTlVMTCwgMTApICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgVkVSU0lPTmAsCiAgICAgICBgdGJsYC5gcm93X2Zvcm1hdGAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgUk9XX0ZPUk1BVGAsCiAgICAgICBpZigoYHRibGAuYHR5cGVgID0gJ1ZJRVcnKSwgTlVMTCwKICAgICAgICAgIGludGVybmFsX3RhYmxlX3Jvd3MoYHNjaGAuYG5hbWVgLCBgdGJsYC5gbmFtZWAsIGlmKChgdGJsYC5gcGFydGl0aW9uX3R5cGVgIGlzIG51bGwpLCBgdGJsYC5gZW5naW5lYCwgJycpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgdGJsYC5gc2VfcHJpdmF0ZV9pZGAsIChgdGJsYC5gaGlkZGVuYCA8PiAnVmlzaWJsZScpLCBgdHNgLmBzZV9wcml2YXRlX2RhdGFgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2FsZXNjZShgc3RhdGAuYHRhYmxlX3Jvd3NgLCAwKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29hbGVzY2UoY2FzdChgc3RhdGAuYGNhY2hlZF90aW1lYCBhcyB1bnNpZ25lZCksIDApKSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBUQUJMRV9ST1dTYCwKICAgICAgIGlmKChgdGJsYC5gdHlwZWAgPSAnVklFVycpLCBOVUxMLAogICAgICAgICAgaW50ZXJuYWxfYXZnX3Jvd19sZW5ndGgoYHNjaGAuYG5hbWVgLCBgdGJsYC5gbmFtZWAsIGlmKChgdGJsYC5gcGFydGl0aW9uX3R5cGVgIGlzIG51bGwpLCBgdGJsYC5gZW5naW5lYCwgJycpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYHRibGAuYHNlX3ByaXZhdGVfaWRgLCAoYHRibGAuYGhpZGRlbmAgPD4gJ1Zpc2libGUnKSwgYHRzYC5gc2VfcHJpdmF0ZV9kYXRhYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvYWxlc2NlKGBzdGF0YC5gYXZnX3Jvd19sZW5ndGhgLCAwKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvYWxlc2NlKGNhc3QoYHN0YXRgLmBjYWNoZWRfdGltZWAgYXMgdW5zaWduZWQpLCAwKSkpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBBVkdfUk9XX0xFTkdUSGAsCiAgICAgICBpZigoYHRibGAuYHR5cGVgID0gJ1ZJRVcnKSwgTlVMTCwKICAgICAgICAgIGludGVybmFsX2RhdGFfbGVuZ3RoKGBzY2hgLmBuYW1lYCwgYHRibGAuYG5hbWVgLCBpZigoYHRibGAuYHBhcnRpdGlvbl90eXBlYCBpcyBudWxsKSwgYHRibGAuYGVuZ2luZWAsICcnKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGB0YmxgLmBzZV9wcml2YXRlX2lkYCwgKGB0YmxgLmBoaWRkZW5gIDw+ICdWaXNpYmxlJyksIGB0c2AuYHNlX3ByaXZhdGVfZGF0YWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2FsZXNjZShgc3RhdGAuYGRhdGFfbGVuZ3RoYCwgMCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2FsZXNjZShjYXN0KGBzdGF0YC5gY2FjaGVkX3RpbWVgIGFzIHVuc2lnbmVkKSwgMCkpKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgREFUQV9MRU5HVEhgLAogICAgICAgaWYoKGB0YmxgLmB0eXBlYCA9ICdWSUVXJyksIE5VTEwsCiAgICAgICAgICBpbnRlcm5hbF9tYXhfZGF0YV9sZW5ndGgoYHNjaGAuYG5hbWVgLCBgdGJsYC5gbmFtZWAsIGlmKChgdGJsYC5gcGFydGl0aW9uX3R5cGVgIGlzIG51bGwpLCBgdGJsYC5gZW5naW5lYCwgJycpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGB0YmxgLmBzZV9wcml2YXRlX2lkYCwgKGB0YmxgLmBoaWRkZW5gIDw+ICdWaXNpYmxlJyksIGB0c2AuYHNlX3ByaXZhdGVfZGF0YWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29hbGVzY2UoYHN0YXRgLmBtYXhfZGF0YV9sZW5ndGhgLCAwKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2FsZXNjZShjYXN0KGBzdGF0YC5gY2FjaGVkX3RpbWVgIGFzIHVuc2lnbmVkKSwgMCkpKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBNQVhfREFUQV9MRU5HVEhgLAogICAgICAgaWYoKGB0YmxgLmB0eXBlYCA9ICdWSUVXJyksIE5VTEwsCiAgICAgICAgICBpbnRlcm5hbF9pbmRleF9sZW5ndGgoYHNjaGAuYG5hbWVgLCBgdGJsYC5gbmFtZWAsIGlmKChgdGJsYC5gcGFydGl0aW9uX3R5cGVgIGlzIG51bGwpLCBgdGJsYC5gZW5naW5lYCwgJycpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGB0YmxgLmBzZV9wcml2YXRlX2lkYCwgKGB0YmxgLmBoaWRkZW5gIDw+ICdWaXNpYmxlJyksIGB0c2AuYHNlX3ByaXZhdGVfZGF0YWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29hbGVzY2UoYHN0YXRgLmBpbmRleF9sZW5ndGhgLCAwKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2FsZXNjZShjYXN0KGBzdGF0YC5gY2FjaGVkX3RpbWVgIGFzIHVuc2lnbmVkKSwgMCkpKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBJTkRFWF9MRU5HVEhgLAogICAgICAgaWYoKGB0YmxgLmB0eXBlYCA9ICdWSUVXJyksIE5VTEwsCiAgICAgICAgICBpbnRlcm5hbF9kYXRhX2ZyZWUoYHNjaGAuYG5hbWVgLCBgdGJsYC5gbmFtZWAsIGlmKChgdGJsYC5gcGFydGl0aW9uX3R5cGVgIGlzIG51bGwpLCBgdGJsYC5gZW5naW5lYCwgJycpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGB0YmxgLmBzZV9wcml2YXRlX2lkYCwgKGB0YmxgLmBoaWRkZW5gIDw+ICdWaXNpYmxlJyksIGB0c2AuYHNlX3ByaXZhdGVfZGF0YWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29hbGVzY2UoYHN0YXRgLmBkYXRhX2ZyZWVgLCAwKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2FsZXNjZShjYXN0KGBzdGF0YC5gY2FjaGVkX3RpbWVgIGFzIHVuc2lnbmVkKSwgMCkpKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBEQVRBX0ZSRUVgLAogICAgICAgaWYoKGB0YmxgLmB0eXBlYCA9ICdWSUVXJyksIE5VTEwsCiAgICAgICAgICBpbnRlcm5hbF9hdXRvX2luY3JlbWVudChgc2NoYC5gbmFtZWAsIGB0YmxgLmBuYW1lYCwgaWYoKGB0YmxgLmBwYXJ0aXRpb25fdHlwZWAgaXMgbnVsbCksIGB0YmxgLmBlbmdpbmVgLCAnJyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgdGJsYC5gc2VfcHJpdmF0ZV9pZGAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKDAgPD4gaXNfdmlzaWJsZV9kZF9vYmplY3QoYHRibGAuYGhpZGRlbmAsIGZhbHNlLCBgdGJsYC5gb3B0aW9uc2ApKSBpcyBmYWxzZSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgdHNgLmBzZV9wcml2YXRlX2RhdGFgLCBjb2FsZXNjZShgc3RhdGAuYGF1dG9faW5jcmVtZW50YCwgMCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2FsZXNjZShjYXN0KGBzdGF0YC5gY2FjaGVkX3RpbWVgIGFzIHVuc2lnbmVkKSwgMCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgdGJsYC5gc2VfcHJpdmF0ZV9kYXRhYCkpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgQVVUT19JTkNSRU1FTlRgLAogICAgICAgYHRibGAuYGNyZWF0ZWRgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYENSRUFURV9USU1FYCwKICAgICAgIGlmKChgdGJsYC5gdHlwZWAgPSAnVklFVycpLCBOVUxMLAogICAgICAgICAgaW50ZXJuYWxfdXBkYXRlX3RpbWUoYHNjaGAuYG5hbWVgLCBgdGJsYC5gbmFtZWAsIGlmKChgdGJsYC5gcGFydGl0aW9uX3R5cGVgIGlzIG51bGwpLCBgdGJsYC5gZW5naW5lYCwgJycpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYHRibGAuYHNlX3ByaXZhdGVfaWRgLCAoYHRibGAuYGhpZGRlbmAgPD4gJ1Zpc2libGUnKSwgYHRzYC5gc2VfcHJpdmF0ZV9kYXRhYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvYWxlc2NlKGNhc3QoYHN0YXRgLmB1cGRhdGVfdGltZWAgYXMgdW5zaWduZWQpLCAwKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvYWxlc2NlKGNhc3QoYHN0YXRgLmBjYWNoZWRfdGltZWAgYXMgdW5zaWduZWQpLCAwKSkpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBVUERBVEVfVElNRWAsCiAgICAgICBpZigoYHRibGAuYHR5cGVgID0gJ1ZJRVcnKSwgTlVMTCwKICAgICAgICAgIGludGVybmFsX2NoZWNrX3RpbWUoYHNjaGAuYG5hbWVgLCBgdGJsYC5gbmFtZWAsIGlmKChgdGJsYC5gcGFydGl0aW9uX3R5cGVgIGlzIG51bGwpLCBgdGJsYC5gZW5naW5lYCwgJycpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgdGJsYC5gc2VfcHJpdmF0ZV9pZGAsIChgdGJsYC5gaGlkZGVuYCA8PiAnVmlzaWJsZScpLCBgdHNgLmBzZV9wcml2YXRlX2RhdGFgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2FsZXNjZShjYXN0KGBzdGF0YC5gY2hlY2tfdGltZWAgYXMgdW5zaWduZWQpLCAwKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29hbGVzY2UoY2FzdChgc3RhdGAuYGNhY2hlZF90aW1lYCBhcyB1bnNpZ25lZCksIDApKSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBDSEVDS19USU1FYCwKICAgICAgIGBjb2xgLmBuYW1lYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBUQUJMRV9DT0xMQVRJT05gLAogICAgICAgaWYoKGB0YmxgLmB0eXBlYCA9ICdWSUVXJyksIE5VTEwsCiAgICAgICAgICBpbnRlcm5hbF9jaGVja3N1bShgc2NoYC5gbmFtZWAsIGB0YmxgLmBuYW1lYCwgaWYoKGB0YmxgLmBwYXJ0aXRpb25fdHlwZWAgaXMgbnVsbCksIGB0YmxgLmBlbmdpbmVgLCAnJyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgdGJsYC5gc2VfcHJpdmF0ZV9pZGAsIChgdGJsYC5gaGlkZGVuYCA8PiAnVmlzaWJsZScpLCBgdHNgLmBzZV9wcml2YXRlX2RhdGFgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29hbGVzY2UoYHN0YXRgLmBjaGVja3N1bWAsIDApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29hbGVzY2UoY2FzdChgc3RhdGAuYGNhY2hlZF90aW1lYCBhcyB1bnNpZ25lZCksIDApKSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYENIRUNLU1VNYCwKICAgICAgIGlmKChgdGJsYC5gdHlwZWAgPSAnVklFVycpLCBOVUxMLCBnZXRfZGRfY3JlYXRlX29wdGlvbnMoYHRibGAuYG9wdGlvbnNgLCBpZigKICAgICAgICAgICAgICAgKGlmbnVsbChgdGJsYC5gcGFydGl0aW9uX2V4cHJlc3Npb25gLCAnTk9UX1BBUlRfVEJMJykgPSAnTk9UX1BBUlRfVEJMJyksIDAsIDEpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigoYHNjaGAuYGRlZmF1bHRfZW5jcnlwdGlvbmAgPSAnWUVTJyksIDEsIDApKSkgICAgICAgQVMgYENSRUFURV9PUFRJT05TYCwKICAgICAgIGludGVybmFsX2dldF9jb21tZW50X29yX2Vycm9yKGBzY2hgLmBuYW1lYCwgYHRibGAuYG5hbWVgLCBgdGJsYC5gdHlwZWAsIGB0YmxgLmBvcHRpb25zYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGB0YmxgLmBjb21tZW50YCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBUQUJMRV9DT01NRU5UYApmcm9tICgoKCgoYG15c3FsYC5gdGFibGVzYCBgdGJsYCBqb2luIGBteXNxbGAuYHNjaGVtYXRhYCBgc2NoYAogICAgICAgICAgb24gKChgdGJsYC5gc2NoZW1hX2lkYCA9IGBzY2hgLmBpZGApKSkgam9pbiBgbXlzcWxgLmBjYXRhbG9nc2AgYGNhdGAKICAgICAgICAgb24gKChgY2F0YC5gaWRgID0gYHNjaGAuYGNhdGFsb2dfaWRgKSkpIGxlZnQgam9pbiBgbXlzcWxgLmBjb2xsYXRpb25zYCBgY29sYAogICAgICAgIG9uICgoYHRibGAuYGNvbGxhdGlvbl9pZGAgPSBgY29sYC5gaWRgKSkpIGxlZnQgam9pbiBgbXlzcWxgLmB0YWJsZXNwYWNlc2AgYHRzYAogICAgICAgb24gKChgdGJsYC5gdGFibGVzcGFjZV9pZGAgPSBgdHNgLmBpZGApKSkgbGVmdCBqb2luIGBteXNxbGAuYHRhYmxlX3N0YXRzYCBgc3RhdGAKICAgICAgb24gKCgoYHRibGAuYG5hbWVgID0gYHN0YXRgLmB0YWJsZV9uYW1lYCkgYW5kIChgc2NoYC5gbmFtZWAgPSBgc3RhdGAuYHNjaGVtYV9uYW1lYCkpKSkKd2hlcmUgKCgwIDw+IGNhbl9hY2Nlc3NfdGFibGUoYHNjaGAuYG5hbWVgLCBgdGJsYC5gbmFtZWApKSBhbmQgKDAgPD4gaXNfdmlzaWJsZV9kZF9vYmplY3QoYHRibGAuYGhpZGRlbmApKSk7CgpQSwMECgAAAAAA3II6WFOVHShkAAAAZAAAACgAAAAvdmlldy9UQUJMRVNQQUNFU19FWFRFTlNJT05TLmVPbVpaQS5tZXRhI246VEFCTEVTUEFDRVNfRVhURU5TSU9OUwohPG1kPiBbbnVsbCwgLTEyNjU2Mzg5NTgsIFszOCwgMzgsIDE2MiwgMTYyLCAxNjVdLCBbXywgRCwgUSwgRCwgO10sIDAsIDBdClBLAwQKAAAAAADcgjpY+thmhaUAAAClAAAAJwAAAC92aWV3L1RBQkxFU1BBQ0VTX0VYVEVOU0lPTlMuZU9tWlpBLnNxbGNyZWF0ZSB2aWV3IFRBQkxFU1BBQ0VTX0VYVEVOU0lPTlMgYXMKc2VsZWN0IGB0c3BzYC5gbmFtZWAgQVMgYFRBQkxFU1BBQ0VfTkFNRWAsIGB0c3BzYC5gZW5naW5lX2F0dHJpYnV0ZWAgQVMgYEVOR0lORV9BVFRSSUJVVEVgCmZyb20gYG15c3FsYC5gdGFibGVzcGFjZXNgIGB0c3BzYDsKClBLAwQKAAAAAADcgjpYu2l7AF4AAABeAAAAIwAAAC92aWV3L1RBQkxFU19FWFRFTlNJT05TLkxub0hzQS5tZXRhI246VEFCTEVTX0VYVEVOU0lPTlMKITxtZD4gW251bGwsIDIwMTgxMzAwMzcsIFszMywgMzMsIDYzNywgNjM3LCA2NDBdLCBbXywgRCwgUSwgRCwgO10sIDAsIDBdClBLAwQKAAAAAADcgjpYxr8zzIACAACAAgAAIgAAAC92aWV3L1RBQkxFU19FWFRFTlNJT05TLkxub0hzQS5zcWxjcmVhdGUgdmlldyBUQUJMRVNfRVhURU5TSU9OUyBhcwpzZWxlY3QgYGNhdGAuYG5hbWVgICAgICAgICAgICAgICAgICAgICAgICBBUyBgVEFCTEVfQ0FUQUxPR2AsCiAgICAgICBgc2NoYC5gbmFtZWAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBUQUJMRV9TQ0hFTUFgLAogICAgICAgYHRibGAuYG5hbWVgICAgICAgICAgICAgICAgICAgICAgICBBUyBgVEFCTEVfTkFNRWAsCiAgICAgICBgdGJsYC5gZW5naW5lX2F0dHJpYnV0ZWAgICAgICAgICAgIEFTIGBFTkdJTkVfQVRUUklCVVRFYCwKICAgICAgIGB0YmxgLmBzZWNvbmRhcnlfZW5naW5lX2F0dHJpYnV0ZWAgQVMgYFNFQ09OREFSWV9FTkdJTkVfQVRUUklCVVRFYApmcm9tICgoYG15c3FsYC5gdGFibGVzYCBgdGJsYCBqb2luIGBteXNxbGAuYHNjaGVtYXRhYCBgc2NoYAogICAgICAgb24gKChgdGJsYC5gc2NoZW1hX2lkYCA9IGBzY2hgLmBpZGApKSkgam9pbiBgbXlzcWxgLmBjYXRhbG9nc2AgYGNhdGAgb24gKChgY2F0YC5gaWRgID0gYHNjaGAuYGNhdGFsb2dfaWRgKSkpCndoZXJlICgoMCA8PiBjYW5fYWNjZXNzX3RhYmxlKGBzY2hgLmBuYW1lYCwgYHRibGAuYG5hbWVgKSkgYW5kICgwIDw+IGlzX3Zpc2libGVfZGRfb2JqZWN0KGB0YmxgLmBoaWRkZW5gKSkpOwoKUEsDBAoAAAAAANyCOljZz8cxYQAAAGEAAAAjAAAAL3ZpZXcvVEFCTEVfQ09OU1RSQUlOVFMuQmNmN09nLm1ldGEjbjpUQUJMRV9DT05TVFJBSU5UUwohPG1kPiBbbnVsbCwgMTYwMDA5MzE2MiwgWzMzLCAzMywgMzIzOSwgMzIzOSwgMzI0Ml0sIFtfLCBELCBRLCBELCA7XSwgMCwgMF0KUEsDBAoAAAAAANyCOljo1cg2qgwAAKoMAAAiAAAAL3ZpZXcvVEFCTEVfQ09OU1RSQUlOVFMuQmNmN09nLnNxbGNyZWF0ZSB2aWV3IFRBQkxFX0NPTlNUUkFJTlRTIGFzCnNlbGVjdCBgY2F0YC5gbmFtZWAgICAgICAgICAgICAgICAgICAgIEFTIGBDT05TVFJBSU5UX0NBVEFMT0dgLAogICAgICAgYHNjaGAuYG5hbWVgICAgICAgICAgICAgICAgICAgICBBUyBgQ09OU1RSQUlOVF9TQ0hFTUFgLAogICAgICAgYGNvbnN0cmFpbnRzYC5gQ09OU1RSQUlOVF9OQU1FYCBBUyBgQ09OU1RSQUlOVF9OQU1FYCwKICAgICAgIGBzY2hgLmBuYW1lYCAgICAgICAgICAgICAgICAgICAgQVMgYFRBQkxFX1NDSEVNQWAsCiAgICAgICBgdGJsYC5gbmFtZWAgICAgICAgICAgICAgICAgICAgIEFTIGBUQUJMRV9OQU1FYCwKICAgICAgIGBjb25zdHJhaW50c2AuYENPTlNUUkFJTlRfVFlQRWAgQVMgYENPTlNUUkFJTlRfVFlQRWAsCiAgICAgICBgY29uc3RyYWludHNgLmBFTkZPUkNFRGAgICAgICAgIEFTIGBFTkZPUkNFRGAKZnJvbSAoKChgbXlzcWxgLmB0YWJsZXNgIGB0YmxgIGpvaW4gYG15c3FsYC5gc2NoZW1hdGFgIGBzY2hgCiAgICAgICAgb24gKChgdGJsYC5gc2NoZW1hX2lkYCA9IGBzY2hgLmBpZGApKSkgam9pbiBgbXlzcWxgLmBjYXRhbG9nc2AgYGNhdGAKICAgICAgIG9uICgoYGNhdGAuYGlkYCA9IGBzY2hgLmBjYXRhbG9nX2lkYCkpKSBqb2luIGxhdGVyYWwgKHNlbGVjdCBgaWR4YC5gbmFtZWAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgQ09OU1RSQUlOVF9OQU1FYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigoYGlkeGAuYHR5cGVgID0gJ1BSSU1BUlknKSwgJ1BSSU1BUlkgS0VZJywgYGlkeGAuYHR5cGVgKSBBUyBgQ09OU1RSQUlOVF9UWVBFYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnWUVTJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgRU5GT1JDRURgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tIGBteXNxbGAuYGluZGV4ZXNgIGBpZHhgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVyZSAoKGBpZHhgLmB0YWJsZV9pZGAgPSBgdGJsYC5gaWRgKSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYGlkeGAuYHR5cGVgIGluICgnUFJJTUFSWScsICdVTklRVUUnKSkgYW5kICgwIDw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNfdmlzaWJsZV9kZF9vYmplY3QoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgdGJsYC5gaGlkZGVuYCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBpZHhgLmBoaWRkZW5gLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYGlkeGAuYG9wdGlvbnNgKSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmlvbiBhbGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdCAoYGZrYC5gbmFtZWAgY29sbGF0ZSB1dGY4bWIzX3RvbG93ZXJfY2kpIEFTIGBDT05TVFJBSU5UX05BTUVgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdGT1JFSUdOIEtFWScgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYENPTlNUUkFJTlRfVFlQRWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1lFUycgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgRU5GT1JDRURgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tIGBteXNxbGAuYGZvcmVpZ25fa2V5c2AgYGZrYAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlcmUgKGBma2AuYHRhYmxlX2lkYCA9IGB0YmxgLmBpZGApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmlvbiBhbGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdCBgY2NgLmBuYW1lYCAgICAgQVMgYENPTlNUUkFJTlRfTkFNRWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0NIRUNLJyAgICAgICAgIEFTIGBDT05TVFJBSU5UX1RZUEVgLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBjY2AuYGVuZm9yY2VkYCBBUyBgRU5GT1JDRURgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tIGBteXNxbGAuYGNoZWNrX2NvbnN0cmFpbnRzYCBgY2NgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVyZSAoYGNjYC5gdGFibGVfaWRgID0gYHRibGAuYGlkYCkpIGBjb25zdHJhaW50c2ApCndoZXJlICgoMCA8PiBjYW5fYWNjZXNzX3RhYmxlKGBzY2hgLmBuYW1lYCwgYHRibGAuYG5hbWVgKSkgYW5kICgwIDw+IGlzX3Zpc2libGVfZGRfb2JqZWN0KGB0YmxgLmBoaWRkZW5gKSkpOwoKUEsDBAoAAAAAANyCOlhdVMsYagAAAGoAAAAuAAAAL3ZpZXcvVEFCTEVfQ09OU1RSQUlOVFNfRVhURU5TSU9OUy5qc0VZMmcubWV0YSNuOlRBQkxFX0NPTlNUUkFJTlRTX0VYVEVOU0lPTlMKITxtZD4gW251bGwsIC0xMzAxNTQ3MTc0LCBbNDQsIDQ0LCA4MjksIDgyOSwgODMyXSwgW18sIEQsIFEsIEQsIDtdLCAwLCAwXQpQSwMECgAAAAAA3II6WJysputAAwAAQAMAAC0AAAAvdmlldy9UQUJMRV9DT05TVFJBSU5UU19FWFRFTlNJT05TLmpzRVkyZy5zcWxjcmVhdGUgdmlldyBUQUJMRV9DT05TVFJBSU5UU19FWFRFTlNJT05TIGFzCnNlbGVjdCBgY2F0YC5gbmFtZWAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBDT05TVFJBSU5UX0NBVEFMT0dgLAogICAgICAgYHNjaGAuYG5hbWVgICAgICAgICAgICAgICAgICAgICAgICBBUyBgQ09OU1RSQUlOVF9TQ0hFTUFgLAogICAgICAgYGlkeGAuYG5hbWVgICAgICAgICAgICAgICAgICAgICAgICBBUyBgQ09OU1RSQUlOVF9OQU1FYCwKICAgICAgIGB0YmxgLmBuYW1lYCAgICAgICAgICAgICAgICAgICAgICAgQVMgYFRBQkxFX05BTUVgLAogICAgICAgYGlkeGAuYGVuZ2luZV9hdHRyaWJ1dGVgICAgICAgICAgICBBUyBgRU5HSU5FX0FUVFJJQlVURWAsCiAgICAgICBgaWR4YC5gc2Vjb25kYXJ5X2VuZ2luZV9hdHRyaWJ1dGVgIEFTIGBTRUNPTkRBUllfRU5HSU5FX0FUVFJJQlVURWAKZnJvbSAoKChgbXlzcWxgLmBpbmRleGVzYCBgaWR4YCBqb2luIGBteXNxbGAuYHRhYmxlc2AgYHRibGAKICAgICAgICBvbiAoKGBpZHhgLmB0YWJsZV9pZGAgPSBgdGJsYC5gaWRgKSkpIGpvaW4gYG15c3FsYC5gc2NoZW1hdGFgIGBzY2hgCiAgICAgICBvbiAoKGB0YmxgLmBzY2hlbWFfaWRgID0gYHNjaGAuYGlkYCkpKSBqb2luIGBteXNxbGAuYGNhdGFsb2dzYCBgY2F0YCBvbiAoKGBjYXRgLmBpZGAgPSBgc2NoYC5gY2F0YWxvZ19pZGApKSkKd2hlcmUgKCgwIDw+IGNhbl9hY2Nlc3NfdGFibGUoYHNjaGAuYG5hbWVgLCBgdGJsYC5gbmFtZWApKSBhbmQKICAgICAgICgwIDw+IGlzX3Zpc2libGVfZGRfb2JqZWN0KGB0YmxgLmBoaWRkZW5gLCBmYWxzZSwgYGlkeGAuYG9wdGlvbnNgKSkpOwoKUEsDBAoAAAAAANyCOli1sUv+WQAAAFkAAAAaAAAAL3ZpZXcvVFJJR0dFUlMudTFFOWlBLm1ldGEjbjpUUklHR0VSUwohPG1kPiBbbnVsbCwgLTEwODA2NDQ2ODgsIFsyNCwgMjQsIDIxOTcsIDIxOTcsIDIyMDBdLCBbXywgRCwgUSwgRCwgO10sIDAsIDBdClBLAwQKAAAAAADcgjpYrujs1ZgIAACYCAAAGQAAAC92aWV3L1RSSUdHRVJTLnUxRTlpQS5zcWxjcmVhdGUgdmlldyBUUklHR0VSUyBhcwpzZWxlY3QgYGNhdGAuYG5hbWVgICAgICAgICAgICAgICAgICAgQVMgYFRSSUdHRVJfQ0FUQUxPR2AsCiAgICAgICBgc2NoYC5gbmFtZWAgICAgICAgICAgICAgICAgICBBUyBgVFJJR0dFUl9TQ0hFTUFgLAogICAgICAgYHRyZ2AuYG5hbWVgICAgICAgICAgICAgICAgICAgQVMgYFRSSUdHRVJfTkFNRWAsCiAgICAgICBgdHJnYC5gZXZlbnRfdHlwZWAgICAgICAgICAgICBBUyBgRVZFTlRfTUFOSVBVTEFUSU9OYCwKICAgICAgIGBjYXRgLmBuYW1lYCAgICAgICAgICAgICAgICAgIEFTIGBFVkVOVF9PQkpFQ1RfQ0FUQUxPR2AsCiAgICAgICBgc2NoYC5gbmFtZWAgICAgICAgICAgICAgICAgICBBUyBgRVZFTlRfT0JKRUNUX1NDSEVNQWAsCiAgICAgICBgdGJsYC5gbmFtZWAgICAgICAgICAgICAgICAgICBBUyBgRVZFTlRfT0JKRUNUX1RBQkxFYCwKICAgICAgIGB0cmdgLmBhY3Rpb25fb3JkZXJgICAgICAgICAgIEFTIGBBQ1RJT05fT1JERVJgLAogICAgICAgTlVMTCAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYEFDVElPTl9DT05ESVRJT05gLAogICAgICAgYHRyZ2AuYGFjdGlvbl9zdGF0ZW1lbnRfdXRmOGAgQVMgYEFDVElPTl9TVEFURU1FTlRgLAogICAgICAgJ1JPVycgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYEFDVElPTl9PUklFTlRBVElPTmAsCiAgICAgICBgdHJnYC5gYWN0aW9uX3RpbWluZ2AgICAgICAgICBBUyBgQUNUSU9OX1RJTUlOR2AsCiAgICAgICBOVUxMICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgQUNUSU9OX1JFRkVSRU5DRV9PTERfVEFCTEVgLAogICAgICAgTlVMTCAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYEFDVElPTl9SRUZFUkVOQ0VfTkVXX1RBQkxFYCwKICAgICAgICdPTEQnICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBBQ1RJT05fUkVGRVJFTkNFX09MRF9ST1dgLAogICAgICAgJ05FVycgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYEFDVElPTl9SRUZFUkVOQ0VfTkVXX1JPV2AsCiAgICAgICBgdHJnYC5gY3JlYXRlZGAgICAgICAgICAgICAgICBBUyBgQ1JFQVRFRGAsCiAgICAgICBgdHJnYC5gc3FsX21vZGVgICAgICAgICAgICAgICBBUyBgU1FMX01PREVgLAogICAgICAgYHRyZ2AuYGRlZmluZXJgICAgICAgICAgICAgICAgQVMgYERFRklORVJgLAogICAgICAgYGNzX2NsaWVudGAuYG5hbWVgICAgICAgICAgICAgQVMgYENIQVJBQ1RFUl9TRVRfQ0xJRU5UYCwKICAgICAgIGBjb2xsX2Nvbm5gLmBuYW1lYCAgICAgICAgICAgIEFTIGBDT0xMQVRJT05fQ09OTkVDVElPTmAsCiAgICAgICBgY29sbF9kYmAuYG5hbWVgICAgICAgICAgICAgICBBUyBgREFUQUJBU0VfQ09MTEFUSU9OYApmcm9tICgoKCgoKChgbXlzcWxgLmB0cmlnZ2Vyc2AgYHRyZ2Agam9pbiBgbXlzcWxgLmB0YWJsZXNgIGB0YmxgCiAgICAgICAgICAgIG9uICgoYHRibGAuYGlkYCA9IGB0cmdgLmB0YWJsZV9pZGApKSkgam9pbiBgbXlzcWxgLmBzY2hlbWF0YWAgYHNjaGAKICAgICAgICAgICBvbiAoKGB0YmxgLmBzY2hlbWFfaWRgID0gYHNjaGAuYGlkYCkpKSBqb2luIGBteXNxbGAuYGNhdGFsb2dzYCBgY2F0YAogICAgICAgICAgb24gKChgY2F0YC5gaWRgID0gYHNjaGAuYGNhdGFsb2dfaWRgKSkpIGpvaW4gYG15c3FsYC5gY29sbGF0aW9uc2AgYGNvbGxfY2xpZW50YAogICAgICAgICBvbiAoKGBjb2xsX2NsaWVudGAuYGlkYCA9IGB0cmdgLmBjbGllbnRfY29sbGF0aW9uX2lkYCkpKSBqb2luIGBteXNxbGAuYGNoYXJhY3Rlcl9zZXRzYCBgY3NfY2xpZW50YAogICAgICAgIG9uICgoYGNzX2NsaWVudGAuYGlkYCA9IGBjb2xsX2NsaWVudGAuYGNoYXJhY3Rlcl9zZXRfaWRgKSkpIGpvaW4gYG15c3FsYC5gY29sbGF0aW9uc2AgYGNvbGxfY29ubmAKICAgICAgIG9uICgoYGNvbGxfY29ubmAuYGlkYCA9IGB0cmdgLmBjb25uZWN0aW9uX2NvbGxhdGlvbl9pZGApKSkgam9pbiBgbXlzcWxgLmBjb2xsYXRpb25zYCBgY29sbF9kYmAKICAgICAgb24gKChgY29sbF9kYmAuYGlkYCA9IGB0cmdgLmBzY2hlbWFfY29sbGF0aW9uX2lkYCkpKQp3aGVyZSAoKGB0YmxgLmB0eXBlYCA8PiAnVklFVycpIGFuZCAoMCA8PiBjYW5fYWNjZXNzX3RyaWdnZXIoYHNjaGAuYG5hbWVgLCBgdGJsYC5gbmFtZWApKSBhbmQKICAgICAgICgwIDw+IGlzX3Zpc2libGVfZGRfb2JqZWN0KGB0YmxgLmBoaWRkZW5gKSkpOwoKUEsDBAoAAAAAANyCOliq1JGiXAAAAFwAAAAhAAAAL3ZpZXcvVVNFUl9BVFRSSUJVVEVTLlMwcndSZy5tZXRhI246VVNFUl9BVFRSSUJVVEVTCiE8bWQ+IFtudWxsLCAtNjk0MDA3ODE2LCBbMzEsIDMxLCA0MDgsIDQwOCwgNDExXSwgW18sIEQsIFEsIEQsIDtdLCAwLCAwXQpQSwMECgAAAAAA3II6WN7QHxebAQAAmwEAACAAAAAvdmlldy9VU0VSX0FUVFJJQlVURVMuUzByd1JnLnNxbGNyZWF0ZSB2aWV3IFVTRVJfQVRUUklCVVRFUyBhcwpzZWxlY3QgYG15c3FsYC5gdXNlcmAuYFVzZXJgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYFVTRVJgLAogICAgICAgYG15c3FsYC5gdXNlcmAuYEhvc3RgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYEhPU1RgLAogICAgICAganNvbl91bnF1b3RlKGpzb25fZXh0cmFjdChgbXlzcWxgLmB1c2VyYC5gVXNlcl9hdHRyaWJ1dGVzYCwgJyQubWV0YWRhdGEnKSkgQVMgYEFUVFJJQlVURWAKZnJvbSBgbXlzcWxgLmB1c2VyYAp3aGVyZSAoMCA8PiBjYW5fYWNjZXNzX3VzZXIoYG15c3FsYC5gdXNlcmAuYFVzZXJgLCBgbXlzcWxgLmB1c2VyYC5gSG9zdGApKTsKClBLAwQKAAAAAADcgjpYf9CrVlYAAABWAAAAFwAAAC92aWV3L1ZJRVdTLlRpTGVCQS5tZXRhI246VklFV1MKITxtZD4gW251bGwsIC0xNDM3NDE4Mjc3LCBbMjEsIDIxLCAxNzk5LCAxNzk5LCAxODAyXSwgW18sIEQsIFEsIEQsIDtdLCAwLCAwXQpQSwMECgAAAAAA3II6WGjgQXEKBwAACgcAABYAAAAvdmlldy9WSUVXUy5UaUxlQkEuc3FsY3JlYXRlIHZpZXcgVklFV1MgYXMKc2VsZWN0IGBjYXRgLmBuYW1lYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgVEFCTEVfQ0FUQUxPR2AsCiAgICAgICBgc2NoYC5gbmFtZWAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYFRBQkxFX1NDSEVNQWAsCiAgICAgICBgdndgLmBuYW1lYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYFRBQkxFX05BTUVgLAogICAgICAgaWYoKGNhbl9hY2Nlc3Nfdmlldyhgc2NoYC5gbmFtZWAsIGB2d2AuYG5hbWVgLCBgdndgLmB2aWV3X2RlZmluZXJgLCBgdndgLmBvcHRpb25zYCkgPSB0cnVlKSwKICAgICAgICAgIGB2d2AuYHZpZXdfZGVmaW5pdGlvbl91dGY4YCwgJycpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgVklFV19ERUZJTklUSU9OYCwKICAgICAgIGB2d2AuYHZpZXdfY2hlY2tfb3B0aW9uYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgQ0hFQ0tfT1BUSU9OYCwKICAgICAgIGB2d2AuYHZpZXdfaXNfdXBkYXRhYmxlYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgSVNfVVBEQVRBQkxFYCwKICAgICAgIGB2d2AuYHZpZXdfZGVmaW5lcmAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUyBgREVGSU5FUmAsCiAgICAgICBpZigoYHZ3YC5gdmlld19zZWN1cml0eV90eXBlYCA9ICdERUZBVUxUJyksICdERUZJTkVSJywgYHZ3YC5gdmlld19zZWN1cml0eV90eXBlYCkgQVMgYFNFQ1VSSVRZX1RZUEVgLAogICAgICAgYGNzYC5gbmFtZWAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFTIGBDSEFSQUNURVJfU0VUX0NMSUVOVGAsCiAgICAgICBgY29ubl9jb2xsYC5gbmFtZWAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVMgYENPTExBVElPTl9DT05ORUNUSU9OYApmcm9tICgoKCgoYG15c3FsYC5gdGFibGVzYCBgdndgIGpvaW4gYG15c3FsYC5gc2NoZW1hdGFgIGBzY2hgCiAgICAgICAgICBvbiAoKGB2d2AuYHNjaGVtYV9pZGAgPSBgc2NoYC5gaWRgKSkpIGpvaW4gYG15c3FsYC5gY2F0YWxvZ3NgIGBjYXRgCiAgICAgICAgIG9uICgoYGNhdGAuYGlkYCA9IGBzY2hgLmBjYXRhbG9nX2lkYCkpKSBqb2luIGBteXNxbGAuYGNvbGxhdGlvbnNgIGBjb25uX2NvbGxgCiAgICAgICAgb24gKChgY29ubl9jb2xsYC5gaWRgID0gYHZ3YC5gdmlld19jb25uZWN0aW9uX2NvbGxhdGlvbl9pZGApKSkgam9pbiBgbXlzcWxgLmBj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AAAhAAAAAAAAAAAAwAAAAC92aWV3L0FETUlOSVNUUkFCTEVfUk9MRV9BVVRIT1JJWkFUSU9OUy5kUy1oNncuc3FsQURNSU5JU1RSQUJMRV9ST0xFX0FVVEhPUklaQVRJT05TUEsBAhQACgAAAAAA24I6WOfDsXNhAAAAYQAAACIAAAAQAAAAAAAAAAAAcgQAAC92aWV3L0FQUExJQ0FCTEVfUk9MRVMuX1FWSjZBLm1ldGFBUFBMSUNBQkxFX1JPTEVTUEsBAhQACgAAAAAA24I6WCj6UoEZIgAAGSIAACEAAAAQAAAAAAAAAAAAEwUAAC92aWV3L0FQUExJQ0FCTEVfUk9MRVMuX1FWSjZBLnNxbEFQUExJQ0FCTEVfUk9MRVNQSwECFAAKAAAAAADbgjpYW1i6GVwAAABcAAAAIAAAAA4AAAAAAAAAAABrJwAAL3ZpZXcvQ0hBUkFDVEVSX1NFVFMueHpNUWxRLm1ldGFDSEFSQUNURVJfU0VUU1BLAQIUAAoAAAAAANuCOlhuCdXAVwEAAFcBAAAfAAAADgAAAAAAAAAAAAUoAAAvdmlldy9DSEFSQUNURVJfU0VUUy54ek1RbFEuc3FsQ0hBUkFDVEVSX1NFVFNQSwECFAAKAAAAAADbgjpYEiCHOl0AAABdAAAAIwAAABEAAAAAAAAAAACZKQAAL3ZpZXcvQ0hFQ0tfQ09OU1RSQUlOVFMuUDJtSnZnLm1ldGFDSEVDS19DT05TVFJBSU5UU1BLAQIUAAoAAAAAANuCOli9Fxm+bAIAAGwCAAAiAAAAEQAAAAAAAAAAADcqAAAvdmlldy9DSEVDS19DT05TVFJBSU5UUy5QMm1Kdmcuc3FsQ0hFQ0tfQ09OU1RSQUlOVFNQSwECFAAKAAAAAADbgjpYXCZ16lkAAABZAAAAHAAAAAoAAAAAAAAAAADjLAAAL3ZpZXcvQ09MTEFUSU9OUy5DdDQycncubWV0YUNPTExBVElPTlNQSwECFAAKAAAAAADbgjpYnBTuegYEAAAGBAAAGwAAAAoAAAAAAAAAAAB2LQAAL3ZpZXcvQ09MTEFUSU9OUy5DdDQycncuc3FsQ09MTEFUSU9OU1BLAQIUAAoAAAAAANuCOljvpRZMcwAAAHMAAAA3AAAAJQAAAAAAAAAAALUxAAAvdmlldy9DT0xMQVRJT05fQ0hBUkFDVEVSX1NFVF9BUFBMSUNBQklMSVRZLjNFc0tVZy5tZXRhQ09MTEFUSU9OX0NIQVJBQ1RFUl9TRVRfQVBQTElDQUJJTElUWVBLAQIUAAoAAAAAANuCOljRhmME9QAAAPUAAAA2AAAAJQAAAAAAAAAAAH0yAAAvdmlldy9DT0xMQVRJT05fQ0hBUkFDVEVSX1NFVF9BUFBMSUNBQklMSVRZLjNFc0tVZy5zcWxDT0xMQVRJT05fQ0hBUkFDVEVSX1NFVF9BUFBMSUNBQklMSVRZUEsBAhQACgAAAAAA3II6WBlD21BYAAAAWAAAABkAAAAHAAAAAAAAAAAAxjMAAC92aWV3L0NPTFVNTlMudlNObll3Lm1ldGFDT0xVTU5TUEsBAhQACgAAAAAA3II6WAZzSrn/FgAA/xYAABgAAAAHAAAAAAAAAAAAVTQAAC92aWV3L0NPTFVNTlMudlNObll3LnNxbENPTFVNTlNQSwECFAAKAAAAAADcgjpYv95002IAAABiAAAAJAAAABIAAAAAAAAAAACKSwAAL3ZpZXcvQ09MVU1OU19FWFRFTlNJT05TLjFzSHFMdy5tZXRhQ09MVU1OU19FWFRFTlNJT05TUEsBAhQACgAAAAAA3II6WMzIxkH3AwAA9wMAACMAAAASAAAAAAAAAAAALkwAAC92aWV3L0NPTFVNTlNfRVhURU5TSU9OUy4xc0hxTHcuc3FsQ09MVU1OU19FWFRFTlNJT05TUEsBAhQACgAAAAAA3II6WK7UL4ZdAAAAXQAAACMAAAARAAAAAAAAAAAAZlAAAC92aWV3L0NPTFVNTl9TVEFUSVNUSUNTLnJGbnUwUS5tZXRhQ09MVU1OX1NUQVRJU1RJQ1NQSwECFAAKAAAAAADcgjpYdpb4Rb8BAAC/AQAAIgAAABEAAAAAAAAAAAAEUQAAL3ZpZXcvQ09MVU1OX1NUQVRJU1RJQ1MuckZudTBRLnNxbENPTFVNTl9TVEFUSVNUSUNTUEsBAhQACgAAAAAA3II6WLo62TheAAAAXgAAAB8AAAANAAAAAAAAAAAAA1MAAC92aWV3L0VOQUJMRURfUk9MRVMuXzNOZ0lnLm1ldGFFTkFCTEVEX1JPTEVTUEsBAhQACgAAAAAA3II6WBygz6X+BAAA/gQAAB4AAAANAAAAAAAAAAAAnlMAAC92aWV3L0VOQUJMRURfUk9MRVMuXzNOZ0lnLnNxbEVOQUJMRURfUk9MRVNQSwECFAAKAAAAAADcgjpYPSy1rFUAAABVAAAAGAAAAAYAAAAAAAAAAADYWAAAL3ZpZXcvRVZFTlRTLkdkV2FlZy5tZXRhRVZFTlRTUEsBAhQACgAAAAAA3II6WNfw07weDQAAHg0AABcAAAAGAAAAAAAAAAAAY1kAAC92aWV3L0VWRU5UUy5HZFdhZWcuc3FsRVZFTlRTUEsBAhQACgAAAAAA3II6WE38FKNUAAAAVAAAABcAAAAFAAAAAAAAAAAAtmYAAC92aWV3L0ZJTEVTLlY4TDhBdy5tZXRhRklMRVNQSwECFAAKAAAAAADcgjpYEKbKwB8aAAAfGgAAFgAAAAUAAAAAAAAAAAA/ZwAAL3ZpZXcvRklMRVMuVjhMOEF3LnNxbEZJTEVTUEsBAhQACgAAAAAA3II6WP+dudBcAAAAXAAAACIAAAAQAAAAAAAAAAAAkoEAAC92aWV3L0lOTk9EQl9EQVRBRklMRVMuRWllcHhRLm1ldGFJTk5PREJfREFUQUZJTEVTUEsBAhQACgAAAAAA3II6WJCXuzisAQAArAEAACEAAAAQAAAAAAAAAAAALoIAAC92aWV3L0lOTk9EQl9EQVRBRklMRVMuRWllcHhRLnNxbElOTk9EQl9EQVRBRklMRVNQSwECFAAKAAAAAADcgjpYjHaO0VoAAABaAAAAHwAAAA0AAAAAAAAAAAAZhAAAL3ZpZXcvSU5OT0RCX0ZJRUxEUy50Qm9aWXcubWV0YUlOTk9EQl9GSUVMRFNQSwECFAAKAAAAAADcgjpYUh1owa8CAACvAgAAHgAAAA0AAAAAAAAAAACwhAAAL3ZpZXcvSU5OT0RCX0ZJRUxEUy50Qm9aWXcuc3FsSU5OT0RCX0ZJRUxEU1BLAQIUAAoAAAAAANyCOlivvEEMXwAAAF8AAAAgAAAADgAAAAAAAAAAAJuHAAAvdmlldy9JTk5PREJfRk9SRUlHTi5HV1Q3Q2cubWV0YUlOTk9EQl9GT1JFSUdOUEsBAhQACgAAAAAA3II6WIxane32BAAA9gQAAB8AAAAOAAAAAAAAAAAAOIgAAC92aWV3L0lOTk9EQl9GT1JFSUdOLkdXVDdDZy5zcWxJTk5PREJfRk9SRUlHTlBLAQIUAAoAAAAAANyCOli8CokQYAAAAGAAAAAlAAAAEwAAAAAAAAAAAGuNAAAvdmlldy9JTk5PREJfRk9SRUlHTl9DT0xTLldhT0diZy5tZXRhSU5OT0RCX0ZPUkVJR05fQ09MU1BLAQIUAAoAAAAAANyCOlgcnC4rOgMAADoDAAAkAAAAEwAAAAAAAAAAAA6OAAAvdmlldy9JTk5PREJfRk9SRUlHTl9DT0xTLldhT0diZy5zcWxJTk5PREJfRk9SRUlHTl9DT0xTUEsBAhQACgAAAAAA3II6WAxHPWNmAAAAZgAAACoAAAAYAAAAAAAAAAAAipEAAC92aWV3L0lOTk9EQl9UQUJMRVNQQUNFU19CUklFRi5tNjNvdkEubWV0YUlOTk9EQl9UQUJMRVNQQUNFU19CUklFRlBLAQIUAAoAAAAAANyCOli6TAwvrAMAAKwDAAApAAAAGAAAAAAAAAAAADiSAAAvdmlldy9JTk5PREJfVEFCTEVTUEFDRVNfQlJJRUYubTYzb3ZBLnNxbElOTk9EQl9UQUJMRVNQQUNFU19CUklFRlBLAQIUAAoAAAAAANyCOlgc6SxtXAAAAFwAAAAaAAAACAAAAAAAAAAAACuWAAAvdmlldy9LRVlXT1JEUy5xb19VVFEubWV0YUtFWVdPUkRTUEsBAhQACgAAAAAA3II6WO5pP+S3LgAAty4AABkAAAAIAAAAAAAAAAAAv5YAAC92aWV3L0tFWVdPUkRTLnFvX1VUUS5zcWxLRVlXT1JEU1BLAQIUAAoAAAAAANyCOlgOvNtMYAAAAGAAAAAiAAAAEAAAAAAAAAAAAK3FAAAvdmlldy9LRVlfQ09MVU1OX1VTQUdFLldIMERFUS5tZXRhS0VZX0NPTFVNTl9VU0FHRVBLAQIUAAoAAAAAANyCOlgTHa/wChMAAAoTAAAhAAAAEAAAAAAAAAAAAE3GAAAvdmlldy9LRVlfQ09MVU1OX1VTQUdFLldIMERFUS5zcWxLRVlfQ09MVU1OX1VTQUdFUEsBAhQACgAAAAAA3II6WG+fpZpZAAAAWQAAABwAAAAKAAAAAAAAAAAAltkAAC92aWV3L1BBUkFNRVRFUlMuNnExQk9BLm1ldGFQQVJBTUVURVJTUEsBAhQACgAAAAAA3II6WABevT4FEQAABREAABsAAAAKAAAAAAAAAAAAKdoAAC92aWV3L1BBUkFNRVRFUlMuNnExQk9BLnNxbFBBUkFNRVRFUlNQSwECFAAKAAAAAADcgjpY5GrVMF4AAABeAAAAHAAAAAoAAAAAAAAAAABn6wAAL3ZpZXcvUEFSVElUSU9OUy55VFpUSHcubWV0YVBBUlRJVElPTlNQSwECFAAKAAAAAADcgjpY0Mm9VCYvAAAmLwAAGwAAAAoAAAAAAAAAAAD/6wAAL3ZpZXcvUEFSVElUSU9OUy55VFpUSHcuc3FsUEFSVElUSU9OU1BLAQIUAAoAAAAAANyCOljTHn7uaAAAAGgAAAApAAAAFwAAAAAAAAAAAF4bAQAvdmlldy9SRUZFUkVOVElBTF9DT05TVFJBSU5UUy53QVFuSFEubWV0YVJFRkVSRU5USUFMX0NPTlNUUkFJTlRTUEsBAhQACgAAAAAA3II6WN1l8/qpBAAAqQQAACgAAAAXAAAAAAAAAAAADRwBAC92aWV3L1JFRkVSRU5USUFMX0NPTlNUUkFJTlRTLndBUW5IUS5zcWxSRUZFUkVOVElBTF9DT05TVFJBSU5UU1BLAQIUAAoAAAAAANyCOlhSJ+DWXAAAAFwAAAAhAAAADwAAAAAAAAAAAPwgAQAvdmlldy9SRVNPVVJDRV9HUk9VUFMuSlF1dC1RLm1ldGFSRVNPVVJDRV9HUk9VUFNQSwECFAAKAAAAAADcgjpYQ39K4e8BAADvAQAAIAAAAA8AAAAAAAAAAACXIQEAL3ZpZXcvUkVTT1VSQ0VfR1JPVVBTLkpRdXQtUS5zcWxSRVNPVVJDRV9HUk9VUFNQSwECFAAKAAAAAADcgjpYWfchLWIAAABiAAAAJAAAABIAAAAAAAAAAADEIwEAL3ZpZXcvUk9MRV9DT0xVTU5fR1JBTlRTLjF3TzFWZy5tZXRhUk9MRV9DT0xVTU5fR1JBTlRTUEsBAhQACgAAAAAA3II6WIciUnGiIAAAoiAAACMAAAASAAAAAAAAAAAAaCQBAC92aWV3L1JPTEVfQ09MVU1OX0dSQU5UUy4xd08xVmcuc3FsUk9MRV9DT0xVTU5fR1JBTlRTUEsBAhQACgAAAAAA3II6WDYW1IBkAAAAZAAAACUAAAATAAAAAAAAAAAAS0UBAC92aWV3L1JPTEVfUk9VVElORV9HUkFOVFMudS1INThRLm1ldGFST0xFX1JPVVRJTkVfR1JBTlRTUEsBAhQACgAAAAAA3II6WD+OSlJZIAAAWSAAACQAAAATAAAAAAAAAAAA8kUBAC92aWV3L1JPTEVfUk9VVElORV9HUkFOVFMudS1INThRLnNxbFJPTEVfUk9VVElORV9HUkFOVFNQSwECFAAKAAAAAADcgjpYcYVeo2EAAABhAAAAIwAAABEAAAAAAAAAAACNZgEAL3ZpZXcvUk9MRV9UQUJMRV9HUkFOVFMuc1JGLTlRLm1ldGFST0xFX1RBQkxFX0dSQU5UU1BLAQIUAAoAAAAAANyCOljzNYN1MR8AADEfAAAiAAAAEQAAAAAAAAAAAC9nAQAvdmlldy9ST0xFX1RBQkxFX0dSQU5UUy5zUkYtOVEuc3FsUk9MRV9UQUJMRV9HUkFOVFNQSwECFAAKAAAAAADcgjpYzPf4j1gAAABYAAAAGgAAAAgAAAAAAAAAAACghgEAL3ZpZXcvUk9VVElORVMuTDZqNkxnLm1ldGFST1VUSU5FU1BLAQIUAAoAAAAAANyCOlg6mZjdax0AAGsdAAAZAAAACAAAAAAAAAAAADCHAQAvdmlldy9ST1VUSU5FUy5MNmo2TGcuc3FsUk9VVElORVNQSwECFAAKAAAAAADcgjpYr9wnTFUAAABVAAAAGgAAAAgAAAAAAAAAAADSpAEAL3ZpZXcvU0NIRU1BVEEuems4UUJRLm1ldGFTQ0hFTUFUQVBLAQIUAAoAAAAAANyCOliSv9rbvQIAAL0CAAAZAAAACAAAAAAAAAAAAF+lAQAvdmlldy9TQ0hFTUFUQS56azhRQlEuc3FsU0NIRU1BVEFQSwECFAAKAAAAAADcgjpYaNtwOWAAAABgAAAAJQAAABMAAAAAAAAAAABTqAEAL3ZpZXcvU0NIRU1BVEFfRVhURU5TSU9OUy5KUkhhSlEubWV0YVNDSEVNQVRBX0VYVEVOU0lPTlNQSwECFAAKAAAAAADcgjpYnOrnuXUBAAB1AQAAJAAAABMAAAAAAAAAAAD2qAEAL3ZpZXcvU0NIRU1BVEFfRVhURU5TSU9OUy5KUkhhSlEuc3FsU0NIRU1BVEFfRVhURU5TSU9OU1BLAQIUAAoAAAAAANyCOlip4lFyWgAAAFoAAAAcAAAACgAAAAAAAAAAAK2qAQAvdmlldy9TVEFUSVNUSUNTLkk1MUdGdy5tZXRhU1RBVElTVElDU1BLAQIUAAoAAAAAANyCOli1KXLrHRAAAB0QAAAbAAAACgAAAAAAAAAAAEGrAQAvdmlldy9TVEFUSVNUSUNTLkk1MUdGdy5zcWxTVEFUSVNUSUNTUEsBAhQACgAAAAAA3II6WF9hPy1fAAAAXwAAACUAAAATAAAAAAAAAAAAl7sBAC92aWV3L1NUX0dFT01FVFJZX0NPTFVNTlMuRG5mTF9nLm1ldGFTVF9HRU9NRVRSWV9DT0xVTU5TUEsBAhQACgAAAAAA3II6WFp4QASFAwAAhQMAACQAAAATAAAAAAAAAAAAObwBAC92aWV3L1NUX0dFT01FVFJZX0NPTFVNTlMuRG5mTF9nLnNxbFNUX0dFT01FVFJZX0NPTFVNTlNQSwECFAAKAAAAAADcgjpYN9BgsGgAAABoAAAALgAAABwAAAAAAAAAAAAAwAEAL3ZpZXcvU1RfU1BBVElBTF9SRUZFUkVOQ0VfU1lTVEVNUy45OWVRc2cubWV0YVNUX1NQQVRJQUxfUkVGRVJFTkNFX1NZU1RFTVNQSwECFAAKAAAAAADcgjpYtyOyGIACAACAAgAALQAAABwAAAAAAAAAAAC0wAEAL3ZpZXcvU1RfU1BBVElBTF9SRUZFUkVOQ0VfU1lTVEVNUy45OWVRc2cuc3FsU1RfU1BBVElBTF9SRUZFUkVOQ0VfU1lTVEVNU1BLAQIUAAoAAAAAANyCOlhTxvOmYwAAAGMAAAAlAAAAEwAAAAAAAAAAAH/DAQAvdmlldy9TVF9VTklUU19PRl9NRUFTVVJFLjVQX0txZy5tZXRhU1RfVU5JVFNfT0ZfTUVBU1VSRVBLAQIUAAoAAAAAANyCOlhShoESYAsAAGALAAAkAAAAEwAAAAAAAAAAACXEAQAvdmlldy9TVF9VTklUU19PRl9NRUFTVVJFLjVQX0txZy5zcWxTVF9VTklUU19PRl9NRUFTVVJFUEsBAhQACgAAAAAA3II6WPCYJk5SAAAAUgAAABgAAAAGAAAAAAAAAAAAx88BAC92aWV3L1RBQkxFUy5aVElLa3cubWV0YVRBQkxFU1BLAQIUAAoAAAAAANyCOlhi8YpqkhwAAJIcAAAXAAAABgAAAAAAAAAAAE/QAQAvdmlldy9UQUJMRVMuWlRJS2t3LnNxbFRBQkxFU1BLAQIUAAoAAAAAANyCOlhTlR0oZAAAAGQAAAAoAAAAFgAAAAAAAAAAABbtAQAvdmlldy9UQUJMRVNQQUNFU19FWFRFTlNJT05TLmVPbVpaQS5tZXRhVEFCTEVTUEFDRVNfRVhURU5TSU9OU1BLAQIUAAoAAAAAANyCOlj62GaFpQAAAKUAAAAnAAAAFgAAAAAAAAAAAMDtAQAvdmlldy9UQUJMRVNQQUNFU19FWFRFTlNJT05TLmVPbVpaQS5zcWxUQUJMRVNQQUNFU19FWFRFTlNJT05TUEsBAhQACgAAAAAA3II6WLtpewBeAAAAXgAAACMAAAARAAAAAAAAAAAAqu4BAC92aWV3L1RBQkxFU19FWFRFTlNJT05TLkxub0hzQS5tZXRhVEFCTEVTX0VYVEVOU0lPTlNQSwECFAAKAAAAAADcgjpYxr8zzIACAACAAgAAIgAAABEAAAAAAAAAAABJ7wEAL3ZpZXcvVEFCTEVTX0VYVEVOU0lPTlMuTG5vSHNBLnNxbFRBQkxFU19FWFRFTlNJT05TUEsBAhQACgAAAAAA3II6WNnPxzFhAAAAYQAAACMAAAARAAAAAAAAAAAACfIBAC92aWV3L1RBQkxFX0NPTlNUUkFJTlRTLkJjZjdPZy5tZXRhVEFCTEVfQ09OU1RSQUlOVFNQSwECFAAKAAAAAADcgjpY6NXINqoMAACqDAAAIgAAABEAAAAAAAAAAACr8gEAL3ZpZXcvVEFCTEVfQ09OU1RSQUlOVFMuQmNmN09nLnNxbFRBQkxFX0NPTlNUUkFJTlRTUEsBAhQACgAAAAAA3II6WF1UyxhqAAAAagAAAC4AAAAcAAAAAAAAAAAAlf8BAC92aWV3L1RBQkxFX0NPTlNUUkFJTlRTX0VYVEVOU0lPTlMuanNFWTJnLm1ldGFUQUJMRV9DT05TVFJBSU5UU19FWFRFTlNJT05TUEsBAhQACgAAAAAA3II6WJysputAAwAAQAMAAC0AAAAcAAAAAAAAAAAASwACAC92aWV3L1RBQkxFX0NPTlNUUkFJTlRTX0VYVEVOU0lPTlMuanNFWTJnLnNxbFRBQkxFX0NPTlNUUkFJTlRTX0VYVEVOU0lPTlNQSwECFAAKAAAAAADcgjpYtbFL/lkAAABZAAAAGgAAAAgAAAAAAAAAAADWAwIAL3ZpZXcvVFJJR0dFUlMudTFFOWlBLm1ldGFUUklHR0VSU1BLAQIUAAoAAAAAANyCOliu6OzVmAgAAJgIAAAZAAAACAAAAAAAAAAAAGcEAgAvdmlldy9UUklHR0VSUy51MUU5aUEuc3FsVFJJR0dFUlNQSwECFAAKAAAAAADcgjpYqtSRolwAAABcAAAAIQAAAA8AAAAAAAAAAAA2DQIAL3ZpZXcvVVNFUl9BVFRSSUJVVEVTLlMwcndSZy5tZXRhVVNFUl9BVFRSSUJVVEVTUEsBAhQACgAAAAAA3II6WN7QHxebAQAAmwEAACAAAAAPAAAAAAAAAAAA0Q0CAC92aWV3L1VTRVJfQVRUUklCVVRFUy5TMHJ3Umcuc3FsVVNFUl9BVFRSSUJVVEVTUEsBAhQACgAAAAAA3II6WH/Qq1ZWAAAAVgAAABcAAAAFAAAAAAAAAAAAqg8CAC92aWV3L1ZJRVdTLlRpTGVCQS5tZXRhVklFV1NQSwECFAAKAAAAAADcgjpYaOBBcQoHAAAKBwAAFgAAAAUAAAAAAAAAAAA1EAIAL3ZpZXcvVklFV1MuVGlMZUJBLnNxbFZJRVdTUEsBAhQACgAAAAAA3II6WG3Um8hjAAAAYwAAACQAAAASAAAAAAAAAAAAcxcCAC92aWV3L1ZJRVdfUk9VVElORV9VU0FHRS5ETXFTWlEubWV0YVZJRVdfUk9VVElORV9VU0FHRVBLAQIUAAoAAAAAANyCOlhTXiTREwQAABMEAAAjAAAAEgAAAAAAAAAAABgYAgAvdmlldy9WSUVXX1JPVVRJTkVfVVNBR0UuRE1xU1pRLnNxbFZJRVdfUk9VVElORV9VU0FHRVBLAQIUAAoAAAAAANyCOlgHreaMXQAAAF0AAAAiAAAAEAAAAAAAAAAAAGwcAgAvdmlldy9WSUVXX1RBQkxFX1VTQUdFLkZ2UDVDdy5tZXRhVklFV19UQUJMRV9VU0FHRVBLAQIUAAoAAAAAANyCOlh9GrX5BAMAAAQDAAAhAAAAEAAAAAAAAAAAAAkdAgAvdmlldy9WSUVXX1RBQkxFX1VTQUdFLkZ2UDVDdy5zcWxWSUVXX1RBQkxFX1VTQUdFUEsFBgAAAABWAFYA7R8AAEwgAgAAAA==